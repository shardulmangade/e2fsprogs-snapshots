cscope 15 $HOME/GSoC_new/e2fsprogs-snapshots/misc               0000928258
	@badblocks.c

32 
	#_GNU_SOURCE


	)

34 #i‚de‡
O_LARGEFILE


35 
	#O_LARGEFILE
 0

	)

38 
	~<î∫o.h
>

39 
	~<f˙é.h
>

40 #ifde‡
HAVE_GETOPT_H


41 
	~<gë›t.h
>

43 *
›èrg
;

44 
›töd
;

46 
	~<sig«l.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<uni°d.h
>

51 
	~<£tjmp.h
>

52 
	~<time.h
>

53 
	~<limôs.h
>

55 
	~<sys/time.h
>

56 
	~<sys/io˘l.h
>

57 
	~<sys/ty≥s.h
>

59 
	~"ë/com_îr.h
"

60 
	~"ext2fs/ext2_io.h
"

61 
	~"ext2fs/ext2_fs.h
"

62 
	~"ext2fs/ext2fs.h
"

63 
	~"∆s-íabÀ.h
"

65 c⁄° * 
	g¥ogøm_«me
 = "badblocks";

66 c⁄° * 
	gd⁄e_°rög
 = 
N_
("done \n");

68 
	gv_Êag
 = 0;

69 
	gw_Êag
 = 0;

71 
	gs_Êag
 = 0;

72 
	gf‹˚
 = 0;

73 
	gt_Êag
 = 0;

74 
	gt_max
 = 0;

75 *
	gt_∑âs
 = 
NULL
;

76 
	gcuºít_O_DIRECT
 = 0;

77 
	gex˛usive_ok
 = 0;

78 
	gmax_bb
 = 0;

79 
	gd_Êag
 = 0;

80 
timevÆ
 
	gtime_°¨t
;

82 
	#T_INC
 32

	)

84 
	gsys_∑ge_size
 = 4096;

86 
	$ußge
()

88 
	`Ârötf
(
°dîr
, 
	`_
(

93 
¥ogøm_«me
);

94 
	`exô
 (1);

95 
	}
}

97 
	$ex˛usive_ußge
()

99 
	`Ârötf
(
°dîr
,

100 
	`_
("%s: The -nánd -w optionsáre mutuallyÉxclusive.\n\n"),

101 
¥ogøm_«me
);

102 
	`exô
(1);

103 
	}
}

105 
blk_t
 
	gcuºíéy_ã°ög
 = 0;

106 
blk_t
 
	gnum_blocks
 = 0;

107 
ext2_badblocks_li°
 
	gbb_li°
 = 
NULL
;

108 
FILE
 *
	gout
;

109 
blk_t
 
	g√xt_bad
 = 0;

110 
ext2_badblocks_ôî©e
 
	gbb_ôî
 = 
NULL
;

112 *
	$Æloˇã_buf„r
(
size_t
 
size
)

114 *
ªt
 = 0;

116 #ifde‡
HAVE_POSIX_MEMALIGN


117 i‡(
	`posix_memÆign
(&
ªt
, 
sys_∑ge_size
, 
size
) < 0)

118 
ªt
 = 0;

120 #ifde‡
HAVE_MEMALIGN


121 
ªt
 = 
	`memÆign
(
sys_∑ge_size
, 
size
);

123 #ifde‡
HAVE_VALLOC


124 
ªt
 = 
	`vÆloc
(
size
);

129 i‡(!
ªt
)

130 
ªt
 = 
	`mÆloc
(
size
);

132  
ªt
;

133 
	}
}

139 
	$bb_ouçut
 (
blk_t
 
bad
)

141 
îrcode_t
 
îrcode
;

143 i‡(
	`ext2fs_badblocks_li°_ã°
(
bb_li°
, 
bad
))

146 
	`Ârötf
(
out
, "%lu\n", (Ë
bad
);

147 
	`fÊush
(
out
);

149 
îrcode
 = 
	`ext2fs_badblocks_li°_add
 (
bb_li°
, 
bad
);

150 i‡(
îrcode
) {

151 
	`com_îr
 (
¥ogøm_«me
, 
îrcode
, "addingÅo in-memory bad blockÜist");

152 
	`exô
 (1);

159 i‡(
bb_ôî
 && 
bad
 < 
√xt_bad
)

160 
	`ext2fs_badblocks_li°_ôî©e
 (
bb_ôî
, &
√xt_bad
);

162 
	}
}

164 *
	$time_diff_f‹m©
(
timevÆ
 *
tv1
,

165 
timevÆ
 *
tv2
, *
buf
)

167 
time_t
 
diff
 = (
tv1
->
tv_£c
 - 
tv2
->tv_sec);

168 
hr
,
mö
,
£c
;

170 
£c
 = 
diff
 % 60;

171 
diff
 /= 60;

172 
mö
 = 
diff
 % 60;

173 
hr
 = 
diff
 / 60;

175 i‡(
hr
)

176 
	`•rötf
(
buf
, "%d:%02d:%02d", 
hr
, 
mö
, 
£c
);

178 
	`•rötf
(
buf
, "%d:%02d", 
mö
, 
£c
);

179  
buf
;

180 
	}
}

182 
	$ˇlc_≥r˚¡
(
cuºít
, 
tŸÆ
) {

183 
≥r˚¡
 = 0.0;

184 i‡(
tŸÆ
 <= 0)

185  
≥r˚¡
;

186 i‡(
cuºít
 >
tŸÆ
) {

187 
≥r˚¡
 = 100.0;

189 
≥r˚¡
=(100.0*()
cuºít
/()
tŸÆ
);

191  
≥r˚¡
;

192 
	}
}

194 
	$¥öt_°©us
()

196 
timevÆ
 
time_íd
;

197 
diff_buf
[32], 
löe_buf
[128];

198 
Àn
;

200 
	`gëtimeofday
(&
time_íd
, 0);

201 
Àn
 = 
	`¢¥ötf
(
löe_buf
, (line_buf),

202 
	`_
("%6.2f%% done, %sÉlapsed"),

203 
	`ˇlc_≥r˚¡
((Ë
cuºíéy_ã°ög
,

204 (Ë
num_blocks
),

205 
	`time_diff_f‹m©
(&
time_íd
, &
time_°¨t
, 
diff_buf
));

206 #ifde‡
HAVE_MBSTOWCS


207 
Àn
 = 
	`mb°owcs
(
NULL
, 
löe_buf
, (line_buf));

209 
	`Âuts
(
löe_buf
, 
°dîr
);

210 
	`mem£t
(
löe_buf
, '\b', 
Àn
);

211 
löe_buf
[
Àn
] = 0;

212 
	`Âuts
(
löe_buf
, 
°dîr
);

213 
	`fÊush
 (
°dîr
);

214 
	}
}

216 
Æ¨m_öå
(
Ænum
 
EXT2FS_ATTR
((
unu£d
)))

218 
sig«l
 (
SIGALRM
, 
Æ¨m_öå
);

219 
Æ¨m
(1);

220 i‡(!
	gnum_blocks
)

222 
¥öt_°©us
();

225 *
	gãrmö©e_addr
 = 
NULL
;

227 
ãrmö©e_öå
(
signo
 
EXT2FS_ATTR
((
unu£d
)))

229 
fÊush
(
out
);

230 
Ârötf
(
°dîr
, "\n\nInterruptedát block %llu\n",

231 (Ë
cuºíéy_ã°ög
);

232 
fÊush
(
°dîr
);

233 i‡(
	gãrmö©e_addr
)

234 
l⁄gjmp
(
ãrmö©e_addr
,1);

235 
exô
(1);

238 
	$ˇ±uª_ãrmö©e
(
jmp_buf
 
ãrm_addr
)

240 
ãrmö©e_addr
 = 
ãrm_addr
;

241 
	`sig«l
 (
SIGHUP
, 
ãrmö©e_öå
);

242 
	`sig«l
 (
SIGINT
, 
ãrmö©e_öå
);

243 
	`sig«l
 (
SIGPIPE
, 
ãrmö©e_öå
);

244 
	`sig«l
 (
SIGTERM
, 
ãrmö©e_öå
);

245 
	`sig«l
 (
SIGUSR1
, 
ãrmö©e_öå
);

246 
	`sig«l
 (
SIGUSR2
, 
ãrmö©e_öå
);

247 
	}
}

249 
	$unˇ±uª_ãrmö©e
()

251 
ãrmö©e_addr
 = 
NULL
;

252 
	`sig«l
 (
SIGHUP
, 
SIG_DFL
);

253 
	`sig«l
 (
SIGINT
, 
SIG_DFL
);

254 
	`sig«l
 (
SIGPIPE
, 
SIG_DFL
);

255 
	`sig«l
 (
SIGTERM
, 
SIG_DFL
);

256 
	`sig«l
 (
SIGUSR1
, 
SIG_DFL
);

257 
	`sig«l
 (
SIGUSR2
, 
SIG_DFL
);

258 
	}
}

260 
	$£t_o_dúe˘
(
dev
, *
buf„r
, 
size_t
 
size
,

261 
blk_t
 
cuºít_block
)

263 #ifde‡
O_DIRECT


264 
√w_Êag
 = 
O_DIRECT
;

265 
Êag
;

267 i‡((((Ë
buf„r
 & (
sys_∑ge_size
 - 1)) != 0) ||

268 ((
size
 & (
sys_∑ge_size
 - 1)) != 0) ||

269 ((
cuºít_block
 & ((
sys_∑ge_size
 >> 9)-1)) != 0))

270 
√w_Êag
 = 0;

272 i‡(
√w_Êag
 !
cuºít_O_DIRECT
) {

274 
Êag
 = 
	`f˙é
(
dev
, 
F_GETFL
);

275 i‡(
Êag
 > 0) {

276 
Êag
 = (Êag & ~
O_DIRECT
Ë| 
√w_Êag
;

277 
	`f˙é
(
dev
, 
F_SETFL
, 
Êag
);

279 
cuºít_O_DIRECT
 = 
√w_Êag
;

282 
	}
}

285 
	$∑âîn_fûl
(*
buf„r
, 
∑âîn
,

286 
size_t
 
n
)

288 
i
, 
nb
;

289 
b∑âîn
[(
∑âîn
)], *
±r
;

291 i‡(
∑âîn
 == () ~0) {

292 
±r
 = 
buf„r
;Öå < buf„∏+ 
n
;Ötr++) {

293 (*
±r
Ë
	`øndom
() % (1 << (8 * ()));

295 i‡(
s_Êag
 | 
v_Êag
)

296 
	`Âuts
(
	`_
("Te°ög wôhÑ™domÖ©ã∫: "), 
°dîr
);

298 
b∑âîn
[0] = 0;

299 
i
 = 0; i < (
b∑âîn
); i++) {

300 i‡(
∑âîn
 == 0)

302 
b∑âîn
[
i
] = 
∑âîn
 & 0xFF;

303 
∑âîn
 =Öattern >> 8;

305 
nb
 = 
i
 ? (i-1) : 0;

306 
±r
 = 
buf„r
, 
i
 = 
nb
;Öå < buf„∏+ 
n
;Ötr++) {

307 *
±r
 = 
b∑âîn
[
i
];

308 i‡(
i
 == 0)

309 
i
 = 
nb
;

311 
i
--;

313 i‡(
s_Êag
 | 
v_Êag
) {

314 
	`Âuts
(
	`_
("Te°ög wôhÖ©ã∫ 0x"), 
°dîr
);

315 
i
 = 0; i <
nb
; i++)

316 
	`Ârötf
(
°dîr
, "%02x", 
buf„r
[
i
]);

317 
	`Âuts
(": ", 
°dîr
);

320 
	}
}

326 
	$do_ªad
 (
dev
, * 
buf„r
, 
åy
, 
block_size
,

327 
blk_t
 
cuºít_block
)

329 
gŸ
;

330 
timevÆ
 
tv1
, 
tv2
;

331 
	#NANOSEC
 (1000000000L)

	)

332 
	#MILISEC
 (1000L)

	)

334 
	`£t_o_dúe˘
(
dev
, 
buf„r
, 
åy
 * 
block_size
, 
cuºít_block
);

336 i‡(
v_Êag
 > 1)

337 
	`¥öt_°©us
();

340 i‡(
	`ext2fs_Œ£ek
 (
dev
, (
ext2_loff_t
Ë
cuºít_block
 * 
block_size
,

341 
SEEK_SET
Ë!(
ext2_loff_t
Ë
cuºít_block
 * 
block_size
)

342 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
, 
	`_
("during seek"));

345 i‡(
d_Êag
)

346 
	`gëtimeofday
(&
tv1
, 
NULL
);

347 
gŸ
 = 
	`ªad
 (
dev
, 
buf„r
, 
åy
 * 
block_size
);

348 i‡(
d_Êag
)

349 
	`gëtimeofday
(&
tv2
, 
NULL
);

350 i‡(
gŸ
 < 0)

351 
gŸ
 = 0;

352 i‡(
gŸ
 & 511)

353 
	`Ârötf
(
°dîr
, 
	`_
("Weúd vÆuê(%ldËö do_ªad\n"), 
gŸ
);

354 
gŸ
 /
block_size
;

355 i‡(
d_Êag
 && 
gŸ
 =
åy
) {

356 #ifde‡
HAVE_NANOSLEEP


357 
time•ec
 
ts
;

358 
ts
.
tv_£c
 = 
tv2
.tv_£¯- 
tv1
.tv_sec;

359 
ts
.
tv_n£c
 = (
tv2
.
tv_u£c
 - 
tv1
.tv_u£cË* 
MILISEC
;

360 i‡(
ts
.
tv_n£c
 < 0) {

361 
ts
.
tv_n£c
 +
NANOSEC
;

362 
ts
.
tv_£c
 -= 1;

365 
ts
.
tv_£c
 =Ås.tv_£¯* 
d_Êag
 / 100;

366 
ts
.
tv_n£c
 =Ås.tv_n£¯* 
d_Êag
 / 100;

367 i‡(
ts
.
tv_n£c
 > 
NANOSEC
) {

368 
ts
.
tv_£c
 +ts.
tv_n£c
 / 
NANOSEC
;

369 
ts
.
tv_n£c
 %
NANOSEC
;

371 i‡(
ts
.
tv_£c
 ||Ås.
tv_n£c
)

372 
	`«no¶ìp
(&
ts
, 
NULL
);

374 #ifde‡
HAVE_USLEEP


375 
timevÆ
 
tv
;

376 
tv
.
tv_£c
 = 
tv2
.tv_£¯- 
tv1
.tv_sec;

377 
tv
.
tv_u£c
 = 
tv2
.tv_u£¯- 
tv1
.tv_usec;

378 
tv
.
tv_£c
 =Åv.tv_£¯* 
d_Êag
 / 100;

379 
tv
.
tv_u£c
 =Åv.tv_u£¯* 
d_Êag
 / 100;

380 i‡(
tv
.
tv_u£c
 > 1000000) {

381 
tv
.
tv_£c
 +tv.
tv_u£c
 / 1000000;

382 
tv
.
tv_u£c
 %= 1000000;

384 i‡(
tv
.
tv_£c
)

385 
	`¶ìp
(
tv
.
tv_£c
);

386 i‡(
tv
.
tv_u£c
)

387 
	`u¶ìp
(
tv
.
tv_u£c
);

391  
gŸ
;

392 
	}
}

398 
	$do_wrôe
(
dev
, * 
buf„r
, 
åy
, 
block_size
,

399 
cuºít_block
)

401 
gŸ
;

403 
	`£t_o_dúe˘
(
dev
, 
buf„r
, 
åy
 * 
block_size
, 
cuºít_block
);

405 i‡(
v_Êag
 > 1)

406 
	`¥öt_°©us
();

409 i‡(
	`ext2fs_Œ£ek
 (
dev
, (
ext2_loff_t
Ë
cuºít_block
 * 
block_size
,

410 
SEEK_SET
Ë!(
ext2_loff_t
Ë
cuºít_block
 * 
block_size
)

411 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
, 
	`_
("during seek"));

414 
gŸ
 = 
	`wrôe
 (
dev
, 
buf„r
, 
åy
 * 
block_size
);

415 i‡(
gŸ
 < 0)

416 
gŸ
 = 0;

417 i‡(
gŸ
 & 511)

418 
	`Ârötf
(
°dîr
, "Weúd vÆuê(%ldËö do_wrôe\n", 
gŸ
);

419 
gŸ
 /
block_size
;

420  
gŸ
;

421 
	}
}

423 
	gho°_dev
;

425 
	$Êush_bufs
()

427 
îrcode_t
 
ªtvÆ
;

429 
ªtvÆ
 = 
	`ext2fs_sync_devi˚
(
ho°_dev
, 1);

430 i‡(
ªtvÆ
)

431 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("duringÉxt2fs_sync_device"));

432 
	}
}

434 
	$ã°_ro
 (
dev
, 
blk_t
 
œ°_block
,

435 
block_size
, 
blk_t
 
fú°_block
,

436 
blocks_©_⁄˚
)

438 * 
blkbuf
;

439 
åy
;

440 
gŸ
;

441 
bb_cou¡
 = 0;

442 
îrcode_t
 
îrcode
;

445 
	`ˇ±uª_ãrmö©e
(
NULL
);

447 
îrcode
 = 
	`ext2fs_badblocks_li°_ôî©e_begö
(
bb_li°
,&
bb_ôî
);

448 i‡(
îrcode
) {

449 
	`com_îr
 (
¥ogøm_«me
, 
îrcode
,

450 
	`_
("while beginning bad blockÜist iteration"));

451 
	`exô
 (1);

454 
	`ext2fs_badblocks_li°_ôî©e
 (
bb_ôî
, &
√xt_bad
);

455 } 
√xt_bad
 &&Çext_bad < 
fú°_block
);

457 i‡(
t_Êag
) {

458 
blkbuf
 = 
	`Æloˇã_buf„r
((
blocks_©_⁄˚
 + 1Ë* 
block_size
);

460 
blkbuf
 = 
	`Æloˇã_buf„r
(
blocks_©_⁄˚
 * 
block_size
);

462 i‡(!
blkbuf
)

464 
	`com_îr
 (
¥ogøm_«me
, 
ENOMEM
, 
	`_
("whileállocating buffers"));

465 
	`exô
 (1);

467 i‡(
v_Êag
) {

468 
	`Ârötf
 (
°dîr
, 
	`_
("Checking blocks %luÅo %lu\n"),

469 (Ë
fú°_block
,

470 (Ë
œ°_block
 - 1);

472 i‡(
t_Êag
) {

473 
	`Âuts
(
	`_
("Checkög f‹ bad block†öÑód-⁄ly mode\n"), 
°dîr
);

474 
	`∑âîn_fûl
(
blkbuf
 + 
blocks_©_⁄˚
 * 
block_size
,

475 
t_∑âs
[0], 
block_size
);

477 
	`Êush_bufs
();

478 
åy
 = 
blocks_©_⁄˚
;

479 
cuºíéy_ã°ög
 = 
fú°_block
;

480 
num_blocks
 = 
œ°_block
 - 1;

481 i‡(!
t_Êag
 && (
s_Êag
 || 
v_Êag
)) {

482 
	`Âuts
(
	`_
("Checkög f‹ bad block†‘ód-⁄lyÅe°): "), 
°dîr
);

483 i‡(
v_Êag
 <= 1)

484 
	`Æ¨m_öå
(
SIGALRM
);

486 
cuºíéy_ã°ög
 < 
œ°_block
)

488 i‡(
max_bb
 && 
bb_cou¡
 >= max_bb) {

489 i‡(
s_Êag
 || 
v_Êag
) {

490 
	`Âuts
(
	`_
("Toÿm™y bad blocks,áb‹tögÅe°\n"), 
°dîr
);

494 i‡(
√xt_bad
) {

495 i‡(
cuºíéy_ã°ög
 =
√xt_bad
) {

497 
	`ext2fs_badblocks_li°_ôî©e
 (
bb_ôî
, &
√xt_bad
);

498 
cuºíéy_ã°ög
++;

501 i‡(
cuºíéy_ã°ög
 + 
åy
 > 
√xt_bad
)

502 
åy
 = 
√xt_bad
 - 
cuºíéy_ã°ög
;

504 i‡(
cuºíéy_ã°ög
 + 
åy
 > 
œ°_block
)

505 
åy
 = 
œ°_block
 - 
cuºíéy_ã°ög
;

506 
gŸ
 = 
	`do_ªad
 (
dev
, 
blkbuf
, 
åy
, 
block_size
, 
cuºíéy_ã°ög
);

507 i‡(
t_Êag
) {

510 
i
;

511 
i
 = 0; i < 
gŸ
; ++i)

512 i‡(
	`memcmp
 (
blkbuf
+
i
*
block_size
,

513 
blkbuf
+
blocks_©_⁄˚
*
block_size
,

514 
block_size
))

515 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
 + 
i
);

517 
cuºíéy_ã°ög
 +
gŸ
;

518 i‡(
gŸ
 =
åy
) {

519 
åy
 = 
blocks_©_⁄˚
;

521 i‡–(
blocks_©_⁄˚
 >
sys_∑ge_size
 >> 9)

522 && (
cuºíéy_ã°ög
 % (
sys_∑ge_size
 >> 9)!= 0))

523 
åy
 -(
sys_∑ge_size
 >> 9)

524 - (
cuºíéy_ã°ög


525 % (
sys_∑ge_size
 >> 9));

529 
åy
 = 1;

530 i‡(
gŸ
 == 0) {

531 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
++);

534 
num_blocks
 = 0;

535 
	`Æ¨m
(0);

536 i‡(
s_Êag
 || 
v_Êag
)

537 
	`Âuts
(
	`_
(
d⁄e_°rög
), 
°dîr
);

539 
	`fÊush
 (
°dîr
);

540 
	`‰ì
 (
blkbuf
);

542 
	`ext2fs_badblocks_li°_ôî©e_íd
(
bb_ôî
);

544 
	`unˇ±uª_ãrmö©e
();

546  
bb_cou¡
;

547 
	}
}

549 
	$ã°_rw
 (
dev
, 
blk_t
 
œ°_block
,

550 
block_size
, 
blk_t
 
fú°_block
,

551 
blocks_©_⁄˚
)

553 *
buf„r
, *
ªad_buf„r
;

554 c⁄° 
∑âîns
[] = {0xaa, 0x55, 0xff, 0x00};

555 c⁄° *
∑âîn
;

556 
i
, 
åy
, 
gŸ
, 
ƒ_∑âîn
, 
∑t_idx
;

557 
bb_cou¡
 = 0;

560 
	`ˇ±uª_ãrmö©e
(
NULL
);

562 
buf„r
 = 
	`Æloˇã_buf„r
(2 * 
blocks_©_⁄˚
 * 
block_size
);

563 
ªad_buf„r
 = 
buf„r
 + 
blocks_©_⁄˚
 * 
block_size
;

565 i‡(!
buf„r
) {

566 
	`com_îr
 (
¥ogøm_«me
, 
ENOMEM
, 
	`_
("whileállocating buffers"));

567 
	`exô
 (1);

570 
	`Êush_bufs
();

572 i‡(
v_Êag
) {

573 
	`Âuts
(
	`_
("Checking for bad blocks inÑead-write mode\n"),

574 
°dîr
);

575 
	`Ârötf
(
°dîr
, 
	`_
("From block %luÅo %lu\n"),

576 (Ë
fú°_block
,

577 (Ë
œ°_block
 - 1);

579 i‡(
t_Êag
) {

580 
∑âîn
 = 
t_∑âs
;

581 
ƒ_∑âîn
 = 
t_Êag
;

583 
∑âîn
 = 
∑âîns
;

584 
ƒ_∑âîn
 = (
∑âîns
) / (patterns[0]);

586 
∑t_idx
 = 0;Ö©_idx < 
ƒ_∑âîn
;Öat_idx++) {

587 
	`∑âîn_fûl
(
buf„r
, 
∑âîn
[
∑t_idx
],

588 
blocks_©_⁄˚
 * 
block_size
);

589 
num_blocks
 = 
œ°_block
 - 1;

590 
cuºíéy_ã°ög
 = 
fú°_block
;

591 i‡(
s_Êag
 && 
v_Êag
 <= 1)

592 
	`Æ¨m_öå
(
SIGALRM
);

594 
åy
 = 
blocks_©_⁄˚
;

595 
cuºíéy_ã°ög
 < 
œ°_block
) {

596 i‡(
max_bb
 && 
bb_cou¡
 >= max_bb) {

597 i‡(
s_Êag
 || 
v_Êag
) {

598 
	`Âuts
(
	`_
("Toÿm™y bad blocks,áb‹tögÅe°\n"), 
°dîr
);

602 i‡(
cuºíéy_ã°ög
 + 
åy
 > 
œ°_block
)

603 
åy
 = 
œ°_block
 - 
cuºíéy_ã°ög
;

604 
gŸ
 = 
	`do_wrôe
(
dev
, 
buf„r
, 
åy
, 
block_size
,

605 
cuºíéy_ã°ög
);

606 i‡(
v_Êag
 > 1)

607 
	`¥öt_°©us
();

609 
cuºíéy_ã°ög
 +
gŸ
;

610 i‡(
gŸ
 =
åy
) {

611 
åy
 = 
blocks_©_⁄˚
;

613 i‡–(
blocks_©_⁄˚
 >
sys_∑ge_size
 >> 9)

614 && (
cuºíéy_ã°ög
 %

615 (
sys_∑ge_size
 >> 9)!= 0))

616 
åy
 -(
sys_∑ge_size
 >> 9)

617 - (
cuºíéy_ã°ög


618 % (
sys_∑ge_size
 >> 9));

621 
åy
 = 1;

622 i‡(
gŸ
 == 0) {

623 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
++);

627 
num_blocks
 = 0;

628 
	`Æ¨m
 (0);

629 i‡(
s_Êag
 | 
v_Êag
)

630 
	`Âuts
(
	`_
(
d⁄e_°rög
), 
°dîr
);

631 
	`Êush_bufs
();

632 i‡(
s_Êag
 | 
v_Êag
)

633 
	`Âuts
(
	`_
("Ródögánd com∑rög: "), 
°dîr
);

634 
num_blocks
 = 
œ°_block
;

635 
cuºíéy_ã°ög
 = 
fú°_block
;

636 i‡(
s_Êag
 && 
v_Êag
 <= 1)

637 
	`Æ¨m_öå
(
SIGALRM
);

639 
åy
 = 
blocks_©_⁄˚
;

640 
cuºíéy_ã°ög
 < 
œ°_block
) {

641 i‡(
max_bb
 && 
bb_cou¡
 >= max_bb) {

642 i‡(
s_Êag
 || 
v_Êag
) {

643 
	`Âuts
(
	`_
("Toÿm™y bad blocks,áb‹tögÅe°\n"), 
°dîr
);

647 i‡(
cuºíéy_ã°ög
 + 
åy
 > 
œ°_block
)

648 
åy
 = 
œ°_block
 - 
cuºíéy_ã°ög
;

649 
gŸ
 = 
	`do_ªad
 (
dev
, 
ªad_buf„r
, 
åy
, 
block_size
,

650 
cuºíéy_ã°ög
);

651 i‡(
gŸ
 == 0) {

652 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
++);

655 
i
=0; i < 
gŸ
; i++) {

656 i‡(
	`memcmp
(
ªad_buf„r
 + 
i
 * 
block_size
,

657 
buf„r
 + 
i
 * 
block_size
,

658 
block_size
))

659 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
+
i
);

661 
cuºíéy_ã°ög
 +
gŸ
;

663 i‡–(
blocks_©_⁄˚
 >
sys_∑ge_size
 >> 9)

664 && (
cuºíéy_ã°ög
 % (
sys_∑ge_size
 >> 9)!= 0))

665 
åy
 = 
blocks_©_⁄˚
 - (
sys_∑ge_size
 >> 9)

666 - (
cuºíéy_ã°ög


667 % (
sys_∑ge_size
 >> 9));

669 
åy
 = 
blocks_©_⁄˚
;

670 i‡(
v_Êag
 > 1)

671 
	`¥öt_°©us
();

674 
num_blocks
 = 0;

675 
	`Æ¨m
 (0);

676 i‡(
s_Êag
 | 
v_Êag
)

677 
	`Âuts
(
	`_
(
d⁄e_°rög
), 
°dîr
);

678 
	`Êush_bufs
();

680 
	`unˇ±uª_ãrmö©e
();

681 
	`‰ì
(
buf„r
);

682  
bb_cou¡
;

683 
	}
}

685 
	sßved_blk_ªc‹d
 {

686 
blk_t
 
	mblock
;

687 
	mnum
;

690 
	$ã°_nd
 (
dev
, 
blk_t
 
œ°_block
,

691 
block_size
, 
blk_t
 
fú°_block
,

692 
blocks_©_⁄˚
)

694 *
blkbuf
, *
ßve_±r
, *
ã°_±r
, *
ªad_±r
;

695 *
ã°_ba£
, *
ßve_ba£
, *
ªad_ba£
;

696 
åy
, 
i
;

697 c⁄° 
∑âîns
[] = { ~0 };

698 c⁄° *
∑âîn
;

699 
ƒ_∑âîn
, 
∑t_idx
;

700 
gŸ
, 
u£d2
, 
wrôãn
;

701 
blk_t
 
ßve_cuºíéy_ã°ög
;

702 
ßved_blk_ªc‹d
 *
ã°_ªc‹d
;

704 
num_ßved
;

705 
jmp_buf
 
ãrmö©e_ív
;

706 
îrcode_t
 
îrcode
;

707 
buf_u£d
;

708 
bb_cou¡
;

710 
bb_cou¡
 = 0;

711 
îrcode
 = 
	`ext2fs_badblocks_li°_ôî©e_begö
(
bb_li°
,&
bb_ôî
);

712 i‡(
îrcode
) {

713 
	`com_îr
 (
¥ogøm_«me
, 
îrcode
,

714 
	`_
("while beginning bad blockÜist iteration"));

715 
	`exô
 (1);

718 
	`ext2fs_badblocks_li°_ôî©e
 (
bb_ôî
, &
√xt_bad
);

719 } 
√xt_bad
 &&Çext_bad < 
fú°_block
);

721 
blkbuf
 = 
	`Æloˇã_buf„r
(3 * 
blocks_©_⁄˚
 * 
block_size
);

722 
ã°_ªc‹d
 = 
	`mÆloc
 (
blocks_©_⁄˚
*(
ßved_blk_ªc‹d
));

723 i‡(!
blkbuf
 || !
ã°_ªc‹d
) {

724 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, 
	`_
("whileállocating buffers"));

725 
	`exô
 (1);

728 
ßve_ba£
 = 
blkbuf
;

729 
ã°_ba£
 = 
blkbuf
 + (
blocks_©_⁄˚
 * 
block_size
);

730 
ªad_ba£
 = 
blkbuf
 + (2 * 
blocks_©_⁄˚
 * 
block_size
);

732 
num_ßved
 = 0;

734 
	`Êush_bufs
();

735 i‡(
v_Êag
) {

736 
	`Âuts
(
	`_
("Checkög f‹ bad block†öÇ⁄-de°ru˘ivêªad-wrôêmode\n"), 
°dîr
);

737 
	`Ârötf
 (
°dîr
, 
	`_
("From block %luÅo %lu\n"),

738 (Ë
fú°_block
,

739 (Ë
œ°_block
 - 1);

741 i‡(
s_Êag
 || 
v_Êag
 > 1) {

742 
	`Âuts
(
	`_
("Checkög f‹ bad block†“⁄-de°ru˘ivêªad-wrôêã°)\n"), 
°dîr
);

744 i‡(
	`£tjmp
(
ãrmö©e_ív
)) {

748 
	`sig«l
 (
SIGALRM
, 
SIG_IGN
);

749 
	`Âuts
(
	`_
("\nI¡îru± caught, cÀ™ög up\n"), 
°dîr
);

751 
ßve_±r
 = 
ßve_ba£
;

752 
i
=0; i < 
num_ßved
; i++) {

753 
	`do_wrôe
(
dev
, 
ßve_±r
, 
ã°_ªc‹d
[
i
].
num
,

754 
block_size
, 
ã°_ªc‹d
[
i
].
block
);

755 
ßve_±r
 +
ã°_ªc‹d
[
i
].
num
 * 
block_size
;

757 
	`fÊush
 (
out
);

758 
	`exô
(1);

762 
	`ˇ±uª_ãrmö©e
(
ãrmö©e_ív
);

764 i‡(
t_Êag
) {

765 
∑âîn
 = 
t_∑âs
;

766 
ƒ_∑âîn
 = 
t_Êag
;

768 
∑âîn
 = 
∑âîns
;

769 
ƒ_∑âîn
 = (
∑âîns
) / (patterns[0]);

771 
∑t_idx
 = 0;Ö©_idx < 
ƒ_∑âîn
;Öat_idx++) {

772 
	`∑âîn_fûl
(
ã°_ba£
, 
∑âîn
[
∑t_idx
],

773 
blocks_©_⁄˚
 * 
block_size
);

775 
buf_u£d
 = 0;

776 
bb_cou¡
 = 0;

777 
ßve_±r
 = 
ßve_ba£
;

778 
ã°_±r
 = 
ã°_ba£
;

779 
cuºíéy_ã°ög
 = 
fú°_block
;

780 
num_blocks
 = 
œ°_block
 - 1;

781 i‡(
s_Êag
 && 
v_Êag
 <= 1)

782 
	`Æ¨m_öå
(
SIGALRM
);

784 
cuºíéy_ã°ög
 < 
œ°_block
) {

785 i‡(
max_bb
 && 
bb_cou¡
 >= max_bb) {

786 i‡(
s_Êag
 || 
v_Êag
) {

787 
	`Âuts
(
	`_
("Toÿm™y bad blocks,áb‹tögÅe°\n"), 
°dîr
);

791 
gŸ
 = 
åy
 = 
blocks_©_⁄˚
 - 
buf_u£d
;

792 i‡(
√xt_bad
) {

793 i‡(
cuºíéy_ã°ög
 =
√xt_bad
) {

795 
	`ext2fs_badblocks_li°_ôî©e
 (
bb_ôî
, &
√xt_bad
);

796 
cuºíéy_ã°ög
++;

797 
check_f‹_m‹e
;

799 i‡(
cuºíéy_ã°ög
 + 
åy
 > 
√xt_bad
)

800 
åy
 = 
√xt_bad
 - 
cuºíéy_ã°ög
;

802 i‡(
cuºíéy_ã°ög
 + 
åy
 > 
œ°_block
)

803 
åy
 = 
œ°_block
 - 
cuºíéy_ã°ög
;

804 
gŸ
 = 
	`do_ªad
 (
dev
, 
ßve_±r
, 
åy
, 
block_size
,

805 
cuºíéy_ã°ög
);

806 i‡(
gŸ
 == 0) {

808 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
++);

809 
check_f‹_m‹e
;

816 
ã°_ªc‹d
[
num_ßved
].
block
 = 
cuºíéy_ã°ög
;

817 
ã°_ªc‹d
[
num_ßved
].
num
 = 
gŸ
;

818 
num_ßved
++;

821 
wrôãn
 = 
	`do_wrôe
 (
dev
, 
ã°_±r
, 
gŸ
, 
block_size
,

822 
cuºíéy_ã°ög
);

823 i‡(
wrôãn
 !
gŸ
)

824 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
,

825 
	`_
("duringÅest data write, block %lu"),

826 (Ë
cuºíéy_ã°ög
 +

827 
wrôãn
);

829 
buf_u£d
 +
gŸ
;

830 
ßve_±r
 +
gŸ
 * 
block_size
;

831 
ã°_±r
 +
gŸ
 * 
block_size
;

832 
cuºíéy_ã°ög
 +
gŸ
;

833 i‡(
gŸ
 !
åy
)

834 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
++);

836 
check_f‹_m‹e
:

842 i‡((
buf_u£d
 !
blocks_©_⁄˚
) &&

843 (
cuºíéy_ã°ög
 < 
œ°_block
))

846 
	`Êush_bufs
();

847 
ßve_cuºíéy_ã°ög
 = 
cuºíéy_ã°ög
;

859 
u£d2
 = 0;

860 
ßve_±r
 = 
ßve_ba£
;

861 
ã°_±r
 = 
ã°_ba£
;

862 
ªad_±r
 = 
ªad_ba£
;

863 
åy
 = 0;

866 i‡(
åy
 == 0) {

867 i‡(
u£d2
 >
num_ßved
)

869 
cuºíéy_ã°ög
 = 
ã°_ªc‹d
[
u£d2
].
block
;

870 
åy
 = 
ã°_ªc‹d
[
u£d2
].
num
;

871 
u£d2
++;

874 
gŸ
 = 
	`do_ªad
 (
dev
, 
ªad_±r
, 
åy
,

875 
block_size
, 
cuºíéy_ã°ög
);

879 
i
 = 0; i < 
gŸ
; ++i)

880 i‡(
	`memcmp
 (
ã°_±r
+
i
*
block_size
,

881 
ªad_±r
+
i
*
block_size
, block_size))

882 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
 + 
i
);

883 i‡(
gŸ
 < 
åy
) {

884 
bb_cou¡
 +
	`bb_ouçut
(
cuºíéy_ã°ög
 + 
gŸ
);

885 
gŸ
++;

889 
	`do_wrôe
 (
dev
, 
ßve_±r
, 
gŸ
,

890 
block_size
, 
cuºíéy_ã°ög
);

891 
ßve_±r
 +
gŸ
 * 
block_size
;

893 
cuºíéy_ã°ög
 +
gŸ
;

894 
ã°_±r
 +
gŸ
 * 
block_size
;

895 
ªad_±r
 +
gŸ
 * 
block_size
;

896 
åy
 -
gŸ
;

900 
num_ßved
 = 0;

901 
buf_u£d
 = 0;

902 
ßve_±r
 = 
ßve_ba£
;

903 
ã°_±r
 = 
ã°_ba£
;

904 
cuºíéy_ã°ög
 = 
ßve_cuºíéy_ã°ög
;

906 
num_blocks
 = 0;

907 
	`Æ¨m
(0);

908 i‡(
s_Êag
 || 
v_Êag
 > 1)

909 
	`Âuts
(
	`_
(
d⁄e_°rög
), 
°dîr
);

911 
	`Êush_bufs
();

913 
	`unˇ±uª_ãrmö©e
();

914 
	`fÊush
(
°dîr
);

915 
	`‰ì
(
blkbuf
);

916 
	`‰ì
(
ã°_ªc‹d
);

918 
	`ext2fs_badblocks_li°_ôî©e_íd
(
bb_ôî
);

920  
bb_cou¡
;

921 
	}
}

923 
	$check_mou¡
(*
devi˚_«me
)

925 
îrcode_t
 
ªtvÆ
;

926 
mou¡_Êags
;

928 
ªtvÆ
 = 
	`ext2fs_check_if_mou¡ed
(
devi˚_«me
, &
mou¡_Êags
);

929 i‡(
ªtvÆ
) {

930 
	`com_îr
("ext2fs_check_if_mou¡", 
ªtvÆ
,

931 
	`_
("while determining whether %s is mounted."),

932 
devi˚_«me
);

935 i‡(
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) {

936 
	`Ârötf
(
°dîr
, 
	`_
("%†i†mou¡ed; "), 
devi˚_«me
);

937 i‡(
f‹˚
) {

938 
	`Âuts
(
	`_
("badblocks forcedányway. "

939 "H›ê/ëc/mèb i†öc‹ª˘.\n"), 
°dîr
);

942 
ab‹t_badblocks
:

943 
	`Âuts
(
	`_
("ô'†nŸ sa„Åÿru¿badblocks!\n"), 
°dîr
);

944 
	`exô
(1);

947 i‡((
mou¡_Êags
 & 
EXT2_MF_BUSY
Ë&& !
ex˛usive_ok
) {

948 
	`Ârötf
(
°dîr
, 
	`_
("%s isápparently in use byÅhe system; "),

949 
devi˚_«me
);

950 i‡(
f‹˚
)

951 
	`Âuts
(
	`_
("badblock†f‹˚dányway.\n"), 
°dîr
);

953 
ab‹t_badblocks
;

956 
	}
}

962 
	$∑r£_uöt
(c⁄° *
°r
, c⁄° *
des¸
)

964 *
tmp
;

965 
ªt
;

967 
î∫o
 = 0;

968 
ªt
 = 
	`°πoul
(
°r
, &
tmp
, 0);

969 i‡(*
tmp
 || 
î∫o
 || (
ªt
 > 
UINT_MAX
) ||

970 (
ªt
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)) {

971 
	`com_îr
 (
¥ogøm_«me
, 0, 
	`_
("övÆid %†- %s"), 
des¸
, 
°r
);

972 
	`exô
 (1);

974  
ªt
;

975 
	}
}

977 
	$maö
 (
¨gc
, ** 
¨gv
)

979 
c
;

980 * 
devi˚_«me
;

981 * 
ho°_devi˚_«me
 = 
NULL
;

982 * 
öput_fûe
 = 
NULL
;

983 * 
ouçut_fûe
 = 
NULL
;

984 
FILE
 * 
ö
 = 
NULL
;

985 
block_size
 = 1024;

986 
blocks_©_⁄˚
 = 64;

987 
blk_t
 
œ°_block
, 
fú°_block
;

988 
num_∑s£s
 = 0;

989 
∑s£s_˛ón
 = 0;

990 
dev
;

991 
îrcode_t
 
îrcode
;

992 
∑âîn
;

993 (*
ã°_func
)(, 
blk_t
,

994 , 
blk_t
,

996 
›í_Êag
;

997 
sysvÆ
;

999 
	`£tbuf
(
°dout
, 
NULL
);

1000 
	`£tbuf
(
°dîr
, 
NULL
);

1001 #ifde‡
ENABLE_NLS


1002 
	`£éoˇÀ
(
LC_MESSAGES
, "");

1003 
	`£éoˇÀ
(
LC_CTYPE
, "");

1004 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

1005 
	`ãxtdomaö
(
NLS_CAT_NAME
);

1007 
	`§™dom
(()
	`time
(
NULL
));

1008 
ã°_func
 = 
ã°_ro
;

1011 #ifde‡
HAVE_SYSCONF


1012 #i‡(!
	`deföed
(
_SC_PAGESIZE
Ë&& deföed(
_SC_PAGE_SIZE
))

1013 
	#_SC_PAGESIZE
 
_SC_PAGE_SIZE


	)

1015 #ifde‡
_SC_PAGESIZE


1016 
sysvÆ
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1017 i‡(
sysvÆ
 > 0)

1018 
sys_∑ge_size
 = 
sysvÆ
;

1022 i‡(
¨gc
 && *
¨gv
)

1023 
¥ogøm_«me
 = *
¨gv
;

1024 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "b:d:e:fi:o:svwnc:p:h:t:X")Ë!
EOF
) {

1025 
c
) {

1027 
block_size
 = 
	`∑r£_uöt
(
›èrg
, "block size");

1030 
f‹˚
++;

1033 
öput_fûe
 = 
›èrg
;

1036 
ouçut_fûe
 = 
›èrg
;

1039 
s_Êag
 = 1;

1042 
v_Êag
++;

1045 i‡(
w_Êag
)

1046 
	`ex˛usive_ußge
();

1047 
ã°_func
 = 
ã°_rw
;

1048 
w_Êag
 = 1;

1051 i‡(
w_Êag
)

1052 
	`ex˛usive_ußge
();

1053 
ã°_func
 = 
ã°_nd
;

1054 
w_Êag
 = 2;

1057 
blocks_©_⁄˚
 = 
	`∑r£_uöt
(
›èrg
, "blocksát once");

1060 
max_bb
 = 
	`∑r£_uöt
(
›èrg
, "max bad block count");

1063 
d_Êag
 = 
	`∑r£_uöt
(
›èrg
, "read delay factor");

1066 
num_∑s£s
 = 
	`∑r£_uöt
(
›èrg
,

1070 
ho°_devi˚_«me
 = 
›èrg
;

1073 i‡(
t_Êag
 + 1 > 
t_max
) {

1074 *
t_∑âs_√w
;

1076 
t_∑âs_√w
 = 
	`ªÆloc
(
t_∑âs
, () *

1077 (
t_max
 + 
T_INC
));

1078 i‡(!
t_∑âs_√w
) {

1079 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
,

1080 
	`_
("can'tállocate memory for "

1082 
›èrg
);

1083 
	`exô
(1);

1085 
t_∑âs
 = 
t_∑âs_√w
;

1086 
t_max
 +
T_INC
;

1088 i‡(!
	`°rcmp
(
›èrg
, "r") || !strcmp(optarg,"random")) {

1089 
t_∑âs
[
t_Êag
++] = ~0;

1091 
∑âîn
 = 
	`∑r£_uöt
(
›èrg
, "testÖattern");

1092 i‡(
∑âîn
 == () ~0)

1093 
∑âîn
 = 0xffff;

1094 
t_∑âs
[
t_Êag
++] = 
∑âîn
;

1098 
ex˛usive_ok
++;

1101 
	`ußge
();

1104 i‡(!
w_Êag
) {

1105 i‡(
t_Êag
 > 1) {

1106 
	`com_îr
(
¥ogøm_«me
, 0,

1107 
	`_
("Maximum of oneÅest_pattern may be specified "

1109 
	`exô
(1);

1111 i‡(
t_∑âs
 && (t_patts[0] == () ~0)) {

1112 
	`com_îr
(
¥ogøm_«me
, 0,

1113 
	`_
("RandomÅest_pattern isÇotállowed "

1115 
	`exô
(1);

1118 i‡(
›töd
 > 
¨gc
 - 1)

1119 
	`ußge
();

1120 
devi˚_«me
 = 
¨gv
[
›töd
++];

1121 i‡(
›töd
 > 
¨gc
 - 1) {

1122 
îrcode
 = 
	`ext2fs_gë_devi˚_size
(
devi˚_«me
,

1123 
block_size
,

1124 &
œ°_block
);

1125 i‡(
îrcode
 =
EXT2_ET_UNIMPLEMENTED
) {

1126 
	`com_îr
(
¥ogøm_«me
, 0,

1127 
	`_
("Couldn't determine device size; you "

1129 
	`exô
(1);

1131 i‡(
îrcode
) {

1132 
	`com_îr
(
¥ogøm_«me
, 
îrcode
,

1133 
	`_
("whileÅryingÅo determine device size"));

1134 
	`exô
(1);

1137 
î∫o
 = 0;

1138 
œ°_block
 = 
	`∑r£_uöt
(
¨gv
[
›töd
], 
	`_
("last block"));

1139 
œ°_block
++;

1140 
›töd
++;

1142 i‡(
›töd
 <
¨gc
-1) {

1143 
î∫o
 = 0;

1144 
fú°_block
 = 
	`∑r£_uöt
(
¨gv
[
›töd
], 
	`_
("first block"));

1145 } 
fú°_block
 = 0;

1146 i‡(
fú°_block
 >
œ°_block
) {

1147 
	`com_îr
 (
¥ogøm_«me
, 0, 
	`_
("invalid starting block (%lu): must beÜessÅhan %lu"),

1148 (Ë
fú°_block
, (Ë
œ°_block
);

1149 
	`exô
 (1);

1151 i‡(
w_Êag
)

1152 
	`check_mou¡
(
devi˚_«me
);

1154 
	`gëtimeofday
(&
time_°¨t
, 0);

1155 
›í_Êag
 = 
O_LARGEFILE
 | (
w_Êag
 ? 
O_RDWR
 : 
O_RDONLY
);

1156 
dev
 = 
	`›í
 (
devi˚_«me
, 
›í_Êag
);

1157 i‡(
dev
 == -1) {

1158 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
, 
	`_
("whileÅryingÅo open %s"),

1159 
devi˚_«me
);

1160 
	`exô
 (1);

1162 i‡(
ho°_devi˚_«me
) {

1163 
ho°_dev
 = 
	`›í
 (
ho°_devi˚_«me
, 
›í_Êag
);

1164 i‡(
ho°_dev
 == -1) {

1165 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
,

1166 
	`_
("whileÅryingÅo open %s"),

1167 
ho°_devi˚_«me
);

1168 
	`exô
 (1);

1171 
ho°_dev
 = 
dev
;

1172 i‡(
öput_fûe
) {

1173 i‡(
	`°rcmp
 (
öput_fûe
, "-") == 0)

1174 
ö
 = 
°dö
;

1176 
ö
 = 
	`f›í
 (
öput_fûe
, "r");

1177 i‡(
ö
 =
NULL
)

1179 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
,

1180 
	`_
("whileÅryingÅo open %s"),

1181 
öput_fûe
);

1182 
	`exô
 (1);

1186 i‡(
ouçut_fûe
 && 
	`°rcmp
 (output_file, "-") != 0)

1188 
out
 = 
	`f›í
 (
ouçut_fûe
, "w");

1189 i‡(
out
 =
NULL
)

1191 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
,

1192 
	`_
("whileÅryingÅo open %s"),

1193 
ouçut_fûe
);

1194 
	`exô
 (1);

1198 
out
 = 
°dout
;

1200 
îrcode
 = 
	`ext2fs_badblocks_li°_¸óã
(&
bb_li°
,0);

1201 i‡(
îrcode
) {

1202 
	`com_îr
 (
¥ogøm_«me
, 
îrcode
,

1203 
	`_
("while creating in-memory bad blocksÜist"));

1204 
	`exô
 (1);

1207 i‡(
ö
) {

1209 
	`fsˇnf
 (
ö
, "%u\n", &
√xt_bad
)) {

1211 
	`com_îr
 (
¥ogøm_«me
, 0, "input file - bad format");

1212 
	`exô
 (1);

1213 
EOF
:

1216 
îrcode
 = 
	`ext2fs_badblocks_li°_add
(
bb_li°
,
√xt_bad
);

1217 i‡(
îrcode
) {

1218 
	`com_îr
 (
¥ogøm_«me
, 
îrcode
, 
	`_
("whileáddingÅo in-memory bad blockÜist"));

1219 
	`exô
 (1);

1226 i‡(
ö
 !
°dö
)

1227 
	`f˛o£
 (
ö
);

1231 
bb_cou¡
;

1233 
bb_cou¡
 = 
	`ã°_func
(
dev
, 
œ°_block
, 
block_size
,

1234 
fú°_block
, 
blocks_©_⁄˚
);

1235 i‡(
bb_cou¡
)

1236 
∑s£s_˛ón
 = 0;

1238 ++
∑s£s_˛ón
;

1240 i‡(
v_Êag
)

1241 
	`Ârötf
(
°dîr
,

1242 
	`_
("Pass completed, %u bad blocks found.\n"),

1243 
bb_cou¡
);

1245 } 
∑s£s_˛ón
 < 
num_∑s£s
);

1247 
	`˛o£
 (
dev
);

1248 i‡(
out
 !
°dout
)

1249 
	`f˛o£
 (
out
);

1250 
	`‰ì
(
t_∑âs
);

1252 
	}
}

	@base_device.c

21 
	~<°dio.h
>

22 #i‡
HAVE_UNISTD_H


23 
	~<uni°d.h
>

25 #i‡
HAVE_STDLIB_H


26 
	~<°dlib.h
>

28 
	~<˘y≥.h
>

29 
	~<°rög.h
>

31 
	~"fsck.h
"

37 c⁄° *
	gdevfs_hõr
[] = {

41 *
	$ba£_devi˚
(c⁄° *
devi˚
)

43 *
°r
, *
˝
;

44 c⁄° **
hõr
, *
disk
;

45 
Àn
;

47 
°r
 = 
	`mÆloc
(
	`°æí
(
devi˚
)+1);

48 i‡(!
°r
)

49  
NULL
;

50 
	`°r˝y
(
°r
, 
devi˚
);

51 
˝
 = 
°r
;

54 i‡(
	`°∫cmp
(
˝
, "/dev/", 5) != 0)

55 
îrout
;

56 
˝
 += 5;

59 i‡(
	`°∫cmp
(
˝
, "dsk/", 4) == 0)

60 
˝
 += 4;

66 i‡(
˝
[0] == 'm' && cp[1] == 'd') {

67 *(
˝
+2) = 0;

68  
°r
;

72 i‡(
	`°∫cmp
(
˝
, "rd/", 3) == 0) {

73 
˝
 += 3;

74 i‡(
˝
[0] != 'c' || cp[2] != 'd' ||

75 !
	`isdigô
(
˝
[1]) || !isdigit(cp[3]))

76 
îrout
;

77 *(
˝
+4) = 0;

78  
°r
;

82 i‡((
˝
[0] == 'h' || cp[0] == 's') && (cp[1] == 'd')) {

83 
˝
 += 2;

85 i‡(
	`isdigô
(*
˝
))

86 
˝
++;

88 i‡(!
	`ißÕha
(*
˝
))

89 
îrout
;

90 *(
˝
 + 1) = 0;

91  
°r
;

95 
Àn
 = 0;

96 i‡(
	`°∫cmp
(
˝
, "ide/", 4) == 0)

97 
Àn
 = 4;

98 i‡(
	`°∫cmp
(
˝
, "scsi/", 5) == 0)

99 
Àn
 = 5;

100 i‡(
Àn
) {

101 
˝
 +
Àn
;

108 
hõr
 = 
devfs_hõr
; *hier; hier++) {

109 
Àn
 = 
	`°æí
(*
hõr
);

110 i‡(
	`°∫cmp
(
˝
, *
hõr
, 
Àn
) != 0)

111 
îrout
;

112 
˝
 +
Àn
;

113 *
˝
 != '/' && *cp != 0) {

114 i‡(!
	`isdigô
(*
˝
))

115 
îrout
;

116 
˝
++;

118 
˝
++;

120 *(
˝
 - 1) = 0;

121  
°r
;

125 
disk
 = 0;

126 i‡(
	`°∫cmp
(
˝
, "discs/", 6) == 0)

127 
disk
 = "disc";

128 i‡(
	`°∫cmp
(
˝
, "disks/", 6) == 0)

129 
disk
 = "disk";

130 i‡(
disk
) {

131 
˝
 += 6;

132 i‡(
	`°∫cmp
(
˝
, 
disk
, 4) != 0)

133 
îrout
;

134 
˝
 += 4;

135 *
˝
 != '/' && *cp != 0) {

136 i‡(!
	`isdigô
(*
˝
))

137 
îrout
;

138 
˝
++;

140 *
˝
 = 0;

141  
°r
;

144 
îrout
:

145 
	`‰ì
(
°r
);

146  
NULL
;

147 
	}
}

149 #ifde‡
DEBUG


150 
	$maö
(
¨gc
, ** 
¨gv
)

152 c⁄° *
ba£
;

153 
buf
[256], *
˝
;

156 i‡(
	`fgës
(
buf
, (buf), 
°dö
Ë=
NULL
)

158 
˝
 = 
	`°rchr
(
buf
, '\n');

159 i‡(
˝
)

160 *
˝
 = 0;

161 
˝
 = 
	`°rchr
(
buf
, '\t');

162 i‡(
˝
)

163 *
˝
 = 0;

164 
ba£
 = 
	`ba£_devi˚
(
buf
);

165 
	`¥ötf
("%s\t%s\n", 
buf
, 
ba£
 ? base : "NONE");

167 
	`exô
(0);

168 
	}
}

	@blkid.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 #ifde‡
HAVE_TERMIOS_H


17 
	~<ãrmios.h
>

19 #ifde‡
HAVE_TERMIO_H


20 
	~<ãrmio.h
>

22 #ifde‡
HAVE_SYS_IOCTL_H


23 
	~<sys/io˘l.h
>

25 #ifde‡
HAVE_GETOPT_H


26 
	~<gë›t.h
>

28 
gë›t
(
¨gc
, * c⁄° 
¨gv
[], c⁄° *
›t°rög
);

29 *
›èrg
;

30 
›töd
;

33 
	#OUTPUT_VALUE_ONLY
 0x0001

	)

34 
	#OUTPUT_DEVICE_ONLY
 0x0002

	)

35 
	#OUTPUT_PRETTY_LIST
 0x0004

	)

37 
	~"ext2fs/ext2fs.h
"

38 
	~"blkid/blkid.h
"

40 c⁄° *
	g¥og«me
 = "blkid";

42 
	$¥öt_vîsi⁄
(
FILE
 *
out
)

44 
	`Ârötf
(
out
, "%†%†(%s)\n", 
¥og«me
, 
BLKID_VERSION
, 
BLKID_DATE
);

45 
	}
}

47 
	$ußge
(
îr‹
)

49 
FILE
 *
out
 = 
îr‹
 ? 
°dîr
 : 
°dout
;

51 
	`¥öt_vîsi⁄
(
out
);

52 
	`Ârötf
(
out
,

64 
¥og«me
);

65 
	`exô
(
îr‹
);

66 
	}
}

72 
	$ß„_¥öt
(c⁄° *
˝
, 
Àn
)

74 
ch
;

76 i‡(
Àn
 < 0)

77 
Àn
 = 
	`°æí
(
˝
);

79 
Àn
--) {

80 
ch
 = *
˝
++;

81 i‡(
ch
 > 128) {

82 
	`Âuts
("M-", 
°dout
);

83 
ch
 -= 128;

85 i‡((
ch
 < 32) || (ch == 0x7f)) {

86 
	`Âutc
('^', 
°dout
);

87 
ch
 ^= 0x40;

89 
	`Âutc
(
ch
, 
°dout
);

91 
	}
}

93 
	$gë_ãrmöÆ_width
()

95 #ifde‡
TIOCGSIZE


96 
âysize
 
t_wö
;

98 #ifde‡
TIOCGWINSZ


99 
wösize
 
w_wö
;

101 c⁄° *
˝
;

103 #ifde‡
TIOCGSIZE


104 i‡(
	`io˘l
 (0, 
TIOCGSIZE
, &
t_wö
) == 0)

105  (
t_wö
.
ts_cﬁs
);

107 #ifde‡
TIOCGWINSZ


108 i‡(
	`io˘l
 (0, 
TIOCGWINSZ
, &
w_wö
) == 0)

109  (
w_wö
.
ws_cﬁ
);

111 
˝
 = 
	`gëív
("COLUMNS");

112 i‡(
˝
)

113  
	`°πﬁ
(
˝
, 
NULL
, 10);

115 
	}
}

117 
	$¥ëty_¥öt_w‹d
(c⁄° *
°r
, 
max_Àn
,

118 
À·_Àn
, 
ovîÊow_∆
)

120 
Àn
 = 
	`°æí
(
°r
Ë+ 
À·_Àn
;

121 
ªt
 = 0;

123 
	`Âuts
(
°r
, 
°dout
);

124 i‡(
ovîÊow_∆
 && 
Àn
 > 
max_Àn
) {

125 
	`Âutc
('\n', 
°dout
);

126 
Àn
 = 0;

127 } i‡(
Àn
 > 
max_Àn
)

128 
ªt
 = 
Àn
 - 
max_Àn
;

130 
	`Âutc
(' ', 
°dout
);

131 
Àn
++ < 
max_Àn
);

132  
ªt
;

133 
	}
}

135 
	$¥ëty_¥öt_löe
(c⁄° *
devi˚
, c⁄° *
fs_ty≥
,

136 c⁄° *
œbñ
, c⁄° *
mçt
,

137 c⁄° *
uuid
)

139 
devi˚_Àn
 = 10, 
fs_ty≥_Àn
 = 7;

140 
œbñ_Àn
 = 8, 
mçt_Àn
 = 14;

141 
ãrm_width
 = -1;

142 
Àn
, 
w
;

144 i‡(
ãrm_width
 < 0)

145 
ãrm_width
 = 
	`gë_ãrmöÆ_width
();

147 i‡(
ãrm_width
 > 80) {

148 
ãrm_width
 -= 80;

149 
w
 = 
ãrm_width
 / 10;

150 i‡(
w
 > 8)

151 
w
 = 8;

152 
ãrm_width
 -2*
w
;

153 
œbñ_Àn
 +
w
;

154 
fs_ty≥_Àn
 +
w
;

155 
w
 = 
ãrm_width
/2;

156 
devi˚_Àn
 +
w
;

157 
mçt_Àn
 +=
w
;

160 
Àn
 = 
	`¥ëty_¥öt_w‹d
(
devi˚
, 
devi˚_Àn
, 0, 1);

161 
Àn
 = 
	`¥ëty_¥öt_w‹d
(
fs_ty≥
, 
fs_ty≥_Àn
,Üen, 0);

162 
Àn
 = 
	`¥ëty_¥öt_w‹d
(
œbñ
, 
œbñ_Àn
,Üen, 0);

163 
Àn
 = 
	`¥ëty_¥öt_w‹d
(
mçt
, 
mçt_Àn
,Üen, 0);

164 
	`Âuts
(
uuid
, 
°dout
);

165 
	`Âutc
('\n', 
°dout
);

166 
	}
}

168 
	$¥ëty_¥öt_dev
(
blkid_dev
 
dev
)

170 
blkid_èg_ôî©e
 
ôî
;

171 c⁄° *
ty≥
, *
vÆue
, *
dev«me
;

172 c⁄° *
uuid
 = "", *
fs_ty≥
 = "", *
œbñ
 = "";

173 
Àn
, 
mou¡_Êags
;

174 
mçt
[80];

175 
îrcode_t
 
ªtvÆ
;

177 i‡(
dev
 =
NULL
) {

178 
	`¥ëty_¥öt_löe
("device", "fs_type", "label",

180 
Àn
=
	`gë_ãrmöÆ_width
()-1;Üen > 0;Üen--)

181 
	`Âutc
('-', 
°dout
);

182 
	`Âutc
('\n', 
°dout
);

186 
dev«me
 = 
	`blkid_dev_dev«me
(
dev
);

187 i‡(
	`ac˚ss
(
dev«me
, 
F_OK
))

191 
ôî
 = 
	`blkid_èg_ôî©e_begö
(
dev
);

192 
	`blkid_èg_√xt
(
ôî
, &
ty≥
, &
vÆue
) == 0) {

193 i‡(!
	`°rcmp
(
ty≥
, "UUID"))

194 
uuid
 = 
vÆue
;

195 i‡(!
	`°rcmp
(
ty≥
, "TYPE"))

196 
fs_ty≥
 = 
vÆue
;

197 i‡(!
	`°rcmp
(
ty≥
, "LABEL"))

198 
œbñ
 = 
vÆue
;

200 
	`blkid_èg_ôî©e_íd
(
ôî
);

203 
mçt
[0] = 0;

204 
ªtvÆ
 = 
	`ext2fs_check_mou¡_poöt
(
dev«me
, &
mou¡_Êags
,

205 
mçt
, (mtpt));

206 i‡(
ªtvÆ
 == 0) {

207 i‡(
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) {

208 i‡(!
mçt
[0])

209 
	`°r˝y
(
mçt
, "(mounted, mtpt unknown)");

210 } i‡(
mou¡_Êags
 & 
EXT2_MF_BUSY
)

211 
	`°r˝y
(
mçt
, "(in use)");

213 
	`°r˝y
(
mçt
, "(not mounted)");

216 
	`¥ëty_¥öt_löe
(
dev«me
, 
fs_ty≥
, 
œbñ
, 
mçt
, 
uuid
);

217 
	}
}

219 
	$¥öt_ègs
(
blkid_dev
 
dev
, *
show
[], 
numèg
, 
ouçut
)

221 
blkid_èg_ôî©e
 
ôî
;

222 c⁄° *
ty≥
, *
vÆue
;

223 
i
, 
fú°
 = 1;

225 i‡(!
dev
)

228 i‡(
ouçut
 & 
OUTPUT_PRETTY_LIST
) {

229 
	`¥ëty_¥öt_dev
(
dev
);

233 i‡(
ouçut
 & 
OUTPUT_DEVICE_ONLY
) {

234 
	`¥ötf
("%s\n", 
	`blkid_dev_dev«me
(
dev
));

238 
ôî
 = 
	`blkid_èg_ôî©e_begö
(
dev
);

239 
	`blkid_èg_√xt
(
ôî
, &
ty≥
, &
vÆue
) == 0) {

240 i‡(
numèg
 && 
show
) {

241 
i
=0; i < 
numèg
; i++)

242 i‡(!
	`°rcmp
(
ty≥
, 
show
[
i
]))

244 i‡(
i
 >
numèg
)

247 i‡(
ouçut
 & 
OUTPUT_VALUE_ONLY
) {

248 
	`Âuts
(
vÆue
, 
°dout
);

249 
	`Âutc
('\n', 
°dout
);

251 i‡(
fú°
) {

252 
	`¥ötf
("%s: ", 
	`blkid_dev_dev«me
(
dev
));

253 
fú°
 = 0;

255 
	`Âuts
(
ty≥
, 
°dout
);

256 
	`Âuts
("=\"", 
°dout
);

257 
	`ß„_¥öt
(
vÆue
, -1);

258 
	`Âuts
("\" ", 
°dout
);

261 
	`blkid_èg_ôî©e_íd
(
ôî
);

263 i‡(!
fú°
 && !(
ouçut
 & 
OUTPUT_VALUE_ONLY
))

264 
	`¥ötf
("\n");

265 
	}
}

267 
	$maö
(
¨gc
, **
¨gv
)

269 
blkid_ˇche
 
ˇche
 = 
NULL
;

270 *
devi˚s
[128] = { 
NULL
, };

271 *
show
[128] = { 
NULL
, };

272 *
£¨ch_ty≥
 = 
NULL
, *
£¨ch_vÆue
 = NULL;

273 *
ªad
 = 
NULL
;

274 *
wrôe
 = 
NULL
;

275 
numdev
 = 0, 
numèg
 = 0;

276 
vîsi⁄
 = 0;

277 
îr
 = 4;

278 
i
;

279 
ouçut_f‹m©
 = 0;

280 
lookup
 = 0, 
gc
 = 0;

281 
c
;

283 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "c:f:ghlLo:s:t:w:v")Ë!
EOF
)

284 
c
) {

286 i‡(
›èrg
 && !*optarg)

287 
ªad
 = 
NULL
;

289 
ªad
 = 
›èrg
;

290 i‡(!
wrôe
)

291 
wrôe
 = 
ªad
;

294 
lookup
++;

297 
ouçut_f‹m©
 = 
OUTPUT_PRETTY_LIST
;

300 
gc
 = 1;

303 i‡(!
	`°rcmp
(
›èrg
, "value"))

304 
ouçut_f‹m©
 = 
OUTPUT_VALUE_ONLY
;

305 i‡(!
	`°rcmp
(
›èrg
, "device"))

306 
ouçut_f‹m©
 = 
OUTPUT_DEVICE_ONLY
;

307 i‡(!
	`°rcmp
(
›èrg
, "list"))

308 
ouçut_f‹m©
 = 
OUTPUT_PRETTY_LIST
;

309 i‡(!
	`°rcmp
(
›èrg
, "full"))

310 
ouçut_f‹m©
 = 0;

312 
	`Ârötf
(
°dîr
, "Invalid output format %s. "

314 "devi˚,Üi°, o∏fuŒ\n", 
›èrg
);

315 
	`exô
(1);

319 i‡(
numèg
 >(
show
) / (*show)) {

320 
	`Ârötf
(
°dîr
, "Too manyÅags specified\n");

321 
	`ußge
(
îr
);

323 
show
[
numèg
++] = 
›èrg
;

326 i‡(
£¨ch_ty≥
) {

327 
	`Ârötf
(
°dîr
, "Can only search for "

329 
	`ußge
(
îr
);

331 i‡(
	`blkid_∑r£_èg_°rög
(
›èrg
,

332 &
£¨ch_ty≥
,

333 &
£¨ch_vÆue
)) {

334 
	`Ârötf
(
°dîr
, "-tÇeeds NAME=valueÖair\n");

335 
	`ußge
(
îr
);

339 
vîsi⁄
 = 1;

342 i‡(
›èrg
 && !*optarg)

343 
wrôe
 = 
NULL
;

345 
wrôe
 = 
›èrg
;

348 
îr
 = 0;

350 
	`ußge
(
îr
);

353 
›töd
 < 
¨gc
)

354 
devi˚s
[
numdev
++] = 
¨gv
[
›töd
++];

356 i‡(
vîsi⁄
) {

357 
	`¥öt_vîsi⁄
(
°dout
);

358 
exô
;

361 i‡(
	`blkid_gë_ˇche
(&
ˇche
, 
ªad
) < 0)

362 
exô
;

364 
îr
 = 2;

365 i‡(
gc
) {

366 
	`blkid_gc_ˇche
(
ˇche
);

367 
exô
;

369 i‡(
ouçut_f‹m©
 & 
OUTPUT_PRETTY_LIST
)

370 
	`¥ëty_¥öt_dev
(
NULL
);

372 i‡(
lookup
) {

373 
blkid_dev
 
dev
;

375 i‡(!
£¨ch_ty≥
) {

376 
	`Ârötf
(
°dîr
, "TheÜookup optionÑequiresá "

378 
	`exô
(1);

381 
i
 = 0; i < 
numdev
; i++)

382 
	`blkid_gë_dev
(
ˇche
, 
devi˚s
[
i
], 
BLKID_DEV_NORMAL
);

384 i‡((
dev
 = 
	`blkid_föd_dev_wôh_èg
(
ˇche
, 
£¨ch_ty≥
,

385 
£¨ch_vÆue
))) {

386 
	`¥öt_ègs
(
dev
, 
show
, 
numèg
, 
ouçut_f‹m©
);

387 
îr
 = 0;

390 } i‡(!
numdev
) {

391 
blkid_dev_ôî©e
 
ôî
;

392 
blkid_dev
 
dev
;

394 
	`blkid_¥obe_Æl
(
ˇche
);

396 
ôî
 = 
	`blkid_dev_ôî©e_begö
(
ˇche
);

397 
	`blkid_dev_£t_£¨ch
(
ôî
, 
£¨ch_ty≥
, 
£¨ch_vÆue
);

398 
	`blkid_dev_√xt
(
ôî
, &
dev
) == 0) {

399 
dev
 = 
	`blkid_vîify
(
ˇche
, dev);

400 i‡(!
dev
)

402 
	`¥öt_ègs
(
dev
, 
show
, 
numèg
, 
ouçut_f‹m©
);

403 
îr
 = 0;

405 
	`blkid_dev_ôî©e_íd
(
ôî
);

407 } 
i
 = 0; i < 
numdev
; i++) {

408 
blkid_dev
 
dev
 = 
	`blkid_gë_dev
(
ˇche
, 
devi˚s
[
i
],

409 
BLKID_DEV_NORMAL
);

411 i‡(
dev
) {

412 i‡(
£¨ch_ty≥
 &&

413 !
	`blkid_dev_has_èg
(
dev
, 
£¨ch_ty≥
,

414 
£¨ch_vÆue
))

416 
	`¥öt_ègs
(
dev
, 
show
, 
numèg
, 
ouçut_f‹m©
);

417 
îr
 = 0;

421 
exô
:

422 
	`‰ì
(
£¨ch_ty≥
);

423 
	`‰ì
(
£¨ch_vÆue
);

424 
	`blkid_put_ˇche
(
ˇche
);

425  
îr
;

426 
	}
}

	@chattr.c

21 
	#_LARGEFILE64_SOURCE


	)

23 
	~<sys/ty≥s.h
>

24 
	~<dúít.h
>

25 
	~<f˙é.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<uni°d.h
>

29 
	~<°rög.h
>

30 #ifde‡
HAVE_ERRNO_H


31 
	~<î∫o.h
>

33 
	~<sys/∑øm.h
>

34 
	~<sys/°©.h
>

35 
	~"ext2fs/ext2_fs.h
"

37 #ifde‡
__GNUC__


38 
	#EXT2FS_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

40 
	#EXT2FS_ATTR
(
x
)

	)

43 #i‚de‡
S_ISLNK


44 #ifde‡
__S_IFLNK


45 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

47 
	#S_ISLNK
(
mode
Ë0

	)

51 
	~"ë/com_îr.h
"

52 
	~"e2p/e2p.h
"

54 
	~"../vîsi⁄.h
"

55 
	~"∆s-íabÀ.h
"

57 c⁄° * 
	g¥ogøm_«me
 = "chattr";

58 #ifde‡
EXT2FS_SNAPSHOT_CTL


60 
	gch¢≠
;

63 
	gadd
;

64 
	gªm
;

65 
	g£t
;

66 
	g£t_vîsi⁄
;

68 
	gvîsi⁄
;

70 
	gªcursive
;

71 
	gvîbo£
;

72 
	gsûít
;

74 
	gaf
;

75 
	grf
;

76 
	gsf
;

78 #ifde‡
_LFS64_LARGEFILE


79 
	#LSTAT
 
l°©64


	)

80 
	#STRUCT_STAT
 
°©64


	)

82 
	#LSTAT
 
l°©


	)

83 
	#STRUCT_STAT
 
°©


	)

86 
	$ußge
()

88 #ifde‡
EXT2FS_SNAPSHOT_CTL


89 i‡(
ch¢≠
) {

90 
	`Ârötf
(
°dîr
,

91 #ifde‡
EXT2FS_SNAPSHOT_CTL_OLD


92 
	`_
("Usage: %s [-X] [-+=Sn] snapshot files...\n"),

94 
	`_
("Usage: %s [-+=Sn] snapshot files...\n"),

96 
¥ogøm_«me
);

97 
	`exô
(1);

100 
	`Ârötf
(
°dîr
,

101 
	`_
("Usage: %s [-RVf] [-+=AacDdeijsSu] [-v version] files...\n"),

102 
¥ogøm_«me
);

103 
	`exô
(1);

104 
	}
}

106 
	sÊags_ch¨
 {

107 
	mÊag
;

108 
	m›tch¨
;

111 #ifde‡
EXT2FS_SNAPSHOT_CTL


112 c⁄° 
Êags_ch¨
 
	gext2_Êags_¨øy
[] = {

114 c⁄° 
Êags_ch¨
 
Êags_¨øy
[] = {

116 { 
EXT2_NOATIME_FL
, 'A' },

117 { 
EXT2_SYNC_FL
, 'S' },

118 { 
EXT2_DIRSYNC_FL
, 'D' },

119 { 
EXT2_APPEND_FL
, 'a' },

120 { 
EXT2_COMPR_FL
, 'c' },

121 { 
EXT2_NODUMP_FL
, 'd' },

122 { 
EXT4_EXTENTS_FL
, 'e'},

123 { 
EXT2_IMMUTABLE_FL
, 'i' },

124 { 
EXT3_JOURNAL_DATA_FL
, 'j' },

125 { 
EXT2_SECRM_FL
, 's' },

126 { 
EXT2_UNRM_FL
, 'u' },

127 { 
EXT2_NOTAIL_FL
, 't' },

128 { 
EXT2_TOPDIR_FL
, 'T' },

129 #ifde‡
EXT2FS_SNAPSHOT_CTL


130 { 
EXT4_SNAPFILE_FL
, 'x' },

135 #ifde‡
EXT2FS_SNAPSHOT_CTL


136 c⁄° 
Êags_ch¨
 *
	gÊags_¨øy
 = 
ext2_Êags_¨øy
;

139 
Êags_ch¨
 
	g¢≠shŸ_Êags_¨øy
[] = {

140 { 1UL<<
EXT4_SNAPSHOT_LIST
, 'S' },

141 { 1UL<<
EXT4_SNAPSHOT_ENABLED
, 'n' },

145 #ifde‡
EXT2FS_SNAPSHOT_CTL_OLD


147 
Êags_ch¨
 
	g¢≠shŸ_X_Êags_¨øy
[] = {

148 { 
NEXT3_SNAPFILE_LIST_FL
, 'S' },

149 { 
NEXT3_SNAPFILE_ENABLED_FL
, 'n' },

155 
	$gë_Êag
(
c
)

157 c⁄° 
Êags_ch¨
 *
Â
;

159 
Â
 = 
Êags_¨øy
; fp->
Êag
 != 0; fp++) {

160 i‡(
Â
->
›tch¨
 =
c
)

161  
Â
->
Êag
;

164 
	}
}

167 
	$decode_¨g
 (* 
i
, 
¨gc
, ** 
¨gv
)

169 * 
p
;

170 * 
tmp
;

171 
Ê
;

173 
¨gv
[*
i
][0])

176 
p
 = &
¨gv
[*
i
][1]; *p;Ö++) {

177 #ifde‡
EXT2FS_SNAPSHOT_CTL_OLD


178 i‡(*
p
 == 'X') {

179 
Êags_¨øy
 = 
¢≠shŸ_X_Êags_¨øy
;

183 i‡(*
p
 == 'R') {

184 
ªcursive
 = 1;

187 i‡(*
p
 == 'V') {

188 
vîbo£
 = 1;

191 i‡(*
p
 == 'f') {

192 
sûít
 = 1;

195 i‡(*
p
 == 'v') {

196 (*
i
)++;

197 i‡(*
i
 >
¨gc
)

198 
	`ußge
 ();

199 
vîsi⁄
 = 
	`°πﬁ
 (
¨gv
[*
i
], &
tmp
, 0);

200 i‡(*
tmp
) {

201 
	`com_îr
 (
¥ogøm_«me
, 0,

202 
	`_
("bad version - %s\n"),

203 
¨gv
[*
i
]);

204 
	`ußge
 ();

206 
£t_vîsi⁄
 = 1;

209 i‡((
Ê
 = 
	`gë_Êag
(*
p
)) == 0)

210 
	`ußge
();

211 
rf
 |
Ê
;

212 
ªm
 = 1;

216 
add
 = 1;

217 
p
 = &
¨gv
[*
i
][1]; *p;Ö++) {

218 i‡((
Ê
 = 
	`gë_Êag
(*
p
)) == 0)

219 
	`ußge
();

220 
af
 |
Ê
;

224 
£t
 = 1;

225 
p
 = &
¨gv
[*
i
][1]; *p;Ö++) {

226 i‡((
Ê
 = 
	`gë_Êag
(*
p
)) == 0)

227 
	`ußge
();

228 
sf
 |
Ê
;

232  
EOF
;

236 
	}
}

238 
ch©å_dú_¥oc
(c⁄° *, 
dúít
 *, *);

240 
	$ch™ge_©åibuãs
(c⁄° * 
«me
)

242 
Êags
;

243 
STRUCT_STAT
 
°
;

244 
exã¡_fûe
 = 0;

245 #ifde‡
EXT2FS_SNAPSHOT_CTL


246 
ªt
;

249 i‡(
	`LSTAT
 (
«me
, &
°
) == -1) {

250 i‡(!
sûít
)

251 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
,

252 
	`_
("whûêåyögÅÿ°© %s"), 
«me
);

256 #ifde‡
EXT2FS_SNAPSHOT_CTL


257 i‡(
ch¢≠
)

258 
ªt
 = 
	`fgë¢≠Êags
 (
«me
, &
Êags
);

260 
ªt
 = 
	`fgëÊags
 (
«me
, &
Êags
);

261 i‡(
ªt
 == -1) {

263 i‡(
	`fgëÊags
(
«me
, &
Êags
) == -1) {

265 i‡(!
sûít
)

266 
	`com_îr
(
¥ogøm_«me
, 
î∫o
,

267 
	`_
("whûêªadög fœg†⁄ %s"), 
«me
);

270 i‡(
Êags
 & 
EXT4_EXTENTS_FL
)

271 
exã¡_fûe
 = 1;

272 i‡(
£t
) {

273 i‡(
exã¡_fûe
 && !(
sf
 & 
EXT4_EXTENTS_FL
)) {

274 i‡(!
sûít
)

275 
	`com_îr
(
¥ogøm_«me
, 0,

276 
	`_
("ClearingÉxtent flagÇot supported on %s"),

277 
«me
);

280 i‡(
vîbo£
) {

281 
	`¥ötf
 (
	`_
("Fœg†o‡%†£àa†"), 
«me
);

282 
	`¥öt_Êags
 (
°dout
, 
sf
, 0);

283 
	`¥ötf
 ("\n");

285 #ifde‡
EXT2FS_SNAPSHOT_CTL


286 i‡(
ch¢≠
)

287 
ªt
 = 
	`f£t¢≠Êags
 (
«me
, 
sf
);

289 
ªt
 = 
	`f£tÊags
 (
«me
, 
sf
);

290 i‡(
ªt
 == -1)

292 i‡(
	`f£tÊags
 (
«me
, 
sf
) == -1)

294 
	`≥º‹
 (
«me
);

296 i‡(
ªm
)

297 
Êags
 &~
rf
;

298 i‡(
add
)

299 
Êags
 |
af
;

300 i‡(
exã¡_fûe
 && !(
Êags
 & 
EXT4_EXTENTS_FL
)) {

301 i‡(!
sûít
)

302 
	`com_îr
(
¥ogøm_«me
, 0,

303 
	`_
("ClearingÉxtent flagÇot supported on %s"),

304 
«me
);

307 i‡(
vîbo£
) {

308 
	`¥ötf
(
	`_
("Fœg†o‡%†£àa†"), 
«me
);

309 
	`¥öt_Êags
(
°dout
, 
Êags
, 0);

310 
	`¥ötf
("\n");

312 i‡(!
	`S_ISDIR
(
°
.
°_mode
))

313 
Êags
 &~
EXT2_DIRSYNC_FL
;

314 #ifde‡
EXT2FS_SNAPSHOT_CTL


315 i‡(
ch¢≠
)

316 
ªt
 = 
	`f£t¢≠Êags
 (
«me
, 
Êags
);

318 
ªt
 = 
	`f£tÊags
 (
«me
, 
Êags
);

319 i‡(
ªt
 == -1) {

321 i‡(
	`f£tÊags
(
«me
, 
Êags
) == -1) {

323 i‡(!
sûít
) {

324 
	`com_îr
(
¥ogøm_«me
, 
î∫o
,

325 
	`_
("while setting flags on %s"),

326 
«me
);

331 i‡(
£t_vîsi⁄
) {

332 i‡(
vîbo£
)

333 
	`¥ötf
 (
	`_
("Vîsi⁄ o‡%†£àa†%lu\n"), 
«me
, 
vîsi⁄
);

334 i‡(
	`f£tvîsi⁄
 (
«me
, 
vîsi⁄
) == -1) {

335 i‡(!
sûít
)

336 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
,

337 
	`_
("while setting version on %s"),

338 
«me
);

342 i‡(
	`S_ISDIR
(
°
.
°_mode
Ë&& 
ªcursive
)

343  
	`ôî©e_⁄_dú
 (
«me
, 
ch©å_dú_¥oc
, 
NULL
);

345 
	}
}

347 
ch©å_dú_¥oc
 (c⁄° * 
dú_«me
, 
dúít
 * 
de
,

348 * 
¥iv©e
 
EXT2FS_ATTR
((
unu£d
)))

350 
	gªt
 = 0;

352 i‡(
°rcmp
 (
de
->
d_«me
, ".") && strcmp (de->d_name, "..")) {

353 *
	g∑th
;

355 
	g∑th
 = 
mÆloc
(
°æí
 (
dú_«me
Ë+ 1 + såÀ¿(
de
->
d_«me
) + 1);

356 i‡(!
	g∑th
) {

357 
Ârötf
(
°dîr
, 
_
("Couldn'tállocateÖath variable "

361 
•rötf
(
∑th
, "%s/%s", 
dú_«me
, 
de
->
d_«me
);

362 
	gªt
 = 
ch™ge_©åibuãs
(
∑th
);

363 
‰ì
(
∑th
);

365  
	gªt
;

368 
	$maö
 (
¨gc
, ** 
¨gv
)

370 
i
, 
j
;

371 
íd_¨g
 = 0;

372 
îr
, 
ªtvÆ
 = 0;

374 #ifde‡
ENABLE_NLS


375 
	`£éoˇÀ
(
LC_MESSAGES
, "");

376 
	`£éoˇÀ
(
LC_CTYPE
, "");

377 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

378 
	`ãxtdomaö
(
NLS_CAT_NAME
);

380 i‡(
¨gc
 && *
¨gv
)

381 
¥ogøm_«me
 = *
¨gv
;

382 #ifde‡
EXT2FS_SNAPSHOT_CTL


383 
i
 = 
	`°æí
(
¥ogøm_«me
);

384 i‡(
i
 >6 && !
	`°rcmp
(
¥ogøm_«me
 + i - 6, "chsnap")) {

385 
Êags_¨øy
 = 
¢≠shŸ_Êags_¨øy
;

386 
ch¢≠
 = 1;

389 
i
 = 1;

390 
i
 < 
¨gc
 && !
íd_¨g
) {

392 i‡(
	`°rcmp
(
¨gv
[
i
], "--") == 0) {

393 
i
++;

394 
íd_¨g
 = 1;

395 } i‡(
	`decode_¨g
 (&
i
, 
¨gc
, 
¨gv
Ë=
EOF
)

396 
íd_¨g
 = 1;

398 
i
++;

400 i‡(
i
 >
¨gc
)

401 
	`ußge
 ();

402 i‡(
£t
 && (
add
 || 
ªm
)) {

403 
	`Âuts
(
	`_
("i†öcom∑tibÀ wôh -ánd +\n"), 
°dîr
);

404 
	`exô
 (1);

406 i‡((
rf
 & 
af
) != 0) {

407 
	`Âuts
("C™'àbŸh sëánd un£àßmêÊag.\n", 
°dîr
);

408 
	`exô
 (1);

410 i‡(!(
add
 || 
ªm
 || 
£t
 || 
£t_vîsi⁄
)) {

411 
	`Âuts
(
	`_
("Mu° u£ '-v', =, - o∏+\n"), 
°dîr
);

412 
	`exô
 (1);

414 i‡(
vîbo£
)

415 
	`Ârötf
 (
°dîr
, "chattr %s (%s)\n",

416 
E2FSPROGS_VERSION
, 
E2FSPROGS_DATE
);

417 
j
 = 
i
; j < 
¨gc
; j++) {

418 
îr
 = 
	`ch™ge_©åibuãs
 (
¨gv
[
j
]);

419 i‡(
îr
)

420 
ªtvÆ
 = 1;

422 
	`exô
(
ªtvÆ
);

423 
	}
}

	@dumpe2fs.c

23 #ifde‡
HAVE_GETOPT_H


24 
	~<gë›t.h
>

26 *
›èrg
;

27 
›töd
;

29 
	~<f˙é.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<uni°d.h
>

35 
	~"ext2fs/ext2_fs.h
"

37 
	~"ext2fs/ext2fs.h
"

38 
	~"e2p/e2p.h
"

39 
	~"jfs_u£r.h
"

40 
	~<uuid/uuid.h
>

42 
	~"../vîsi⁄.h
"

43 
	~"∆s-íabÀ.h
"

45 
	#ö_u£
(
m
, 
x
Ë(
	`ext2fs_ã°_bô
 ((x), (m)))

	)

47 c⁄° * 
	g¥ogøm_«me
 = "dumpe2fs";

48 * 
	gdevi˚_«me
 = 
NULL
;

49 
	ghex_f‹m©
 = 0;

51 
	$ußge
()

53 
	`Ârötf
 (
°dîr
, 
	`_
("Usage: %s [-bfhixV] [-o superblock=<num>] "

54 "[-ÿblocksize=<num>] devi˚\n"), 
¥ogøm_«me
);

55 
	`exô
 (1);

56 
	}
}

58 
	$¥öt_numbî
(
num
)

60 i‡(
hex_f‹m©
)

61 
	`¥ötf
("0x%04lx", 
num
);

63 
	`¥ötf
("%lu", 
num
);

64 
	}
}

66 
	$¥öt_ønge
(
a
, 
b
)

68 i‡(
hex_f‹m©
)

69 
	`¥ötf
("0x%04lx-0x%04lx", 
a
, 
b
);

71 
	`¥ötf
("%lu-%lu", 
a
, 
b
);

72 
	}
}

74 
	$¥öt_‰ì
 (
group
, * 
bôm≠
,

75 
nbyãs
, 
off£t
)

77 
p
 = 0;

78 
i
;

79 
j
;

81 
off£t
 +
group
 * 
nbyãs
;

82 
i
 = 0; i < 
nbyãs
; i++)

83 i‡(!
	`ö_u£
 (
bôm≠
, 
i
))

85 i‡(
p
)

86 
	`¥ötf
 (", ");

87 
	`¥öt_numbî
(
i
 + 
off£t
);

88 
j
 = 
i
; j < 
nbyãs
 && !
	`ö_u£
 (
bôm≠
, j); j++)

90 i‡(--
j
 !
i
) {

91 
	`Âutc
('-', 
°dout
);

92 
	`¥öt_numbî
(
j
 + 
off£t
);

93 
i
 = 
j
;

95 
p
 = 1;

97 
	}
}

99 
	$¥öt_bg_›t
(
bg_Êags
, 
mask
,

100 c⁄° *
°r
, *
fú°
)

102 i‡(
bg_Êags
 & 
mask
) {

103 i‡(*
fú°
) {

104 
	`Âuts
(" [", 
°dout
);

105 *
fú°
 = 0;

107 
	`Âuts
(", ", 
°dout
);

108 
	`Âuts
(
°r
, 
°dout
);

110 
	}
}

111 
	$¥öt_bg_›ts
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
i
)

113 
fú°
 = 1, 
bg_Êags
 = 0;

115 i‡(
fs
->
su≥r
->
s_„©uª_ro_com∑t
 & 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)

116 
bg_Êags
 = 
fs
->
group_desc
[
i
].bg_flags;

118 
	`¥öt_bg_›t
(
bg_Êags
, 
EXT2_BG_INODE_UNINIT
, "INODE_UNINIT",

119 &
fú°
);

120 
	`¥öt_bg_›t
(
bg_Êags
, 
EXT2_BG_BLOCK_UNINIT
, "BLOCK_UNINIT",

121 &
fú°
);

122 
	`¥öt_bg_›t
(
bg_Êags
, 
EXT2_BG_INODE_ZEROED
, "ITABLE_ZEROED",

123 &
fú°
);

124 i‡(!
fú°
)

125 
	`Âutc
(']', 
°dout
);

126 
	`Âutc
('\n', 
°dout
);

127 
	}
}

129 
	$¥öt_bg_ªl_off£t
(
ext2_fûsys
 
fs
, 
blk64_t
 
block
, 
ôabÀ
,

130 
blk64_t
 
fú°_block
, blk64_à
œ°_block
)

132 i‡((
block
 >
fú°_block
Ë&& (block <
œ°_block
)) {

133 i‡(
ôabÀ
 && 
block
 =
fú°_block
)

135 
	`¥ötf
(" (+%u)", ()(
block
 - 
fú°_block
));

136 } i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

137 
EXT4_FEATURE_INCOMPAT_FLEX_BG
) {

138 
dgΩ_t
 
Êex_gΩ
 = 
	`ext2fs_group_of_blk
(
fs
, 
block
);

139 
	`¥ötf
(" (bg #%u + %u)", 
Êex_gΩ
,

140 ()(
block
-
	`ext2fs_group_fú°_block
(
fs
,
Êex_gΩ
)));

142 
	}
}

144 
	$li°_desc
 (
ext2_fûsys
 
fs
)

146 
i
;

147 
blk_t
 
fú°_block
, 
œ°_block
;

148 
blk_t
 
su≥r_blk
, 
ﬁd_desc_blk
, 
√w_desc_blk
;

149 *
block_bôm≠
=
NULL
, *
öode_bôm≠
=NULL;

150 
öode_blocks_≥r_group
, 
ﬁd_desc_blocks
, 
ª£rved_gdt
;

151 
block_nbyãs
, 
öode_nbyãs
;

152 
has_su≥r
;

153 
blk_t
 
blk_ôr
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

154 
ext2_öo_t
 
öo_ôr
 = 1;

156 
block_nbyãs
 = 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
) / 8;

157 
öode_nbyãs
 = 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
) / 8;

159 i‡(
fs
->
block_m≠
)

160 
block_bôm≠
 = 
	`mÆloc
(
block_nbyãs
);

161 i‡(
fs
->
öode_m≠
)

162 
öode_bôm≠
 = 
	`mÆloc
(
öode_nbyãs
);

164 
öode_blocks_≥r_group
 = ((
fs
->
su≥r
->
s_öodes_≥r_group
 *

165 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
)) +

166 
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
) - 1) /

167 
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
);

168 
ª£rved_gdt
 = 
fs
->
su≥r
->
s_ª£rved_gdt_blocks
;

169 
	`Âutc
('\n', 
°dout
);

170 
fú°_block
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

171 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
)

172 
ﬁd_desc_blocks
 = 
fs
->
su≥r
->
s_fú°_mëa_bg
;

174 
ﬁd_desc_blocks
 = 
fs
->
desc_blocks
;

175 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

176 
fú°_block
 = 
	`ext2fs_group_fú°_block
(
fs
, 
i
);

177 
œ°_block
 = 
	`ext2fs_group_œ°_block
(
fs
, 
i
);

179 
	`ext2fs_su≥r_™d_bgd_loc
(
fs
, 
i
, &
su≥r_blk
,

180 &
ﬁd_desc_blk
, &
√w_desc_blk
, 0);

182 
	`¥ötf
 (
	`_
("Grou∞%lu: (Block†"), 
i
);

183 
	`¥öt_ønge
(
fú°_block
, 
œ°_block
);

184 
	`Âuts
(")", 
°dout
);

185 
	`¥öt_bg_›ts
(
fs
, 
i
);

186 i‡(
fs
->
su≥r
->
s_„©uª_ro_com∑t
 & 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)

187 
	`¥ötf
(
	`_
(" Checksum 0x%04x, unused inodes %d\n"),

188 
fs
->
group_desc
[
i
].
bg_checksum
,

189 
fs
->
group_desc
[
i
].
bg_ôabÀ_unu£d
);

190 
has_su≥r
 = ((
i
==0Ë|| 
su≥r_blk
);

191 i‡(
has_su≥r
) {

192 
	`¥ötf
 (
	`_
(" %s superblockát "),

193 
i
 =0 ? 
	`_
("Primary") : _("Backup"));

194 
	`¥öt_numbî
(
su≥r_blk
);

196 i‡(
ﬁd_desc_blk
) {

197 
	`¥ötf
(
	`_
(", Group descriptorsát "));

198 
	`¥öt_ønge
(
ﬁd_desc_blk
,

199 
ﬁd_desc_blk
 + 
ﬁd_desc_blocks
 - 1);

200 i‡(
ª£rved_gdt
) {

201 
	`¥ötf
(
	`_
("\n Reserved GDT blocksát "));

202 
	`¥öt_ønge
(
ﬁd_desc_blk
 + 
ﬁd_desc_blocks
,

203 
ﬁd_desc_blk
 + 
ﬁd_desc_blocks
 +

204 
ª£rved_gdt
 - 1);

206 } i‡(
√w_desc_blk
) {

207 
	`Âutc
(
has_su≥r
 ? ',' : ' ', 
°dout
);

208 
	`¥ötf
(
	`_
(" Group descriptorát "));

209 
	`¥öt_numbî
(
√w_desc_blk
);

210 
has_su≥r
++;

212 i‡(
has_su≥r
)

213 
	`Âutc
('\n', 
°dout
);

214 
	`Âuts
(
	`_
(" Block bôm≠áà"), 
°dout
);

215 
	`¥öt_numbî
(
fs
->
group_desc
[
i
].
bg_block_bôm≠
);

216 
	`¥öt_bg_ªl_off£t
(
fs
, fs->
group_desc
[
i
].
bg_block_bôm≠
, 0,

217 
fú°_block
, 
œ°_block
);

219 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_BITMAP


220 i‡(
fs
->
su≥r
->
s_„©uª_com∑t
 &

221 
EXT2_FEATURE_COMPAT_EXCLUDE_BITMAP
) {

222 
	`Âuts
(
	`_
(", Ex˛udêbôm≠áà"), 
°dout
);

223 
	`¥öt_numbî
(
fs
->
group_desc
[
i
].
bg_ex˛ude_bôm≠
);

224 
	`¥öt_bg_ªl_off£t
(
fs
,

225 
fs
->
group_desc
[
i
].
bg_ex˛ude_bôm≠
, 0,

226 
fú°_block
, 
œ°_block
);

230 
	`Âuts
(
	`_
(", Inodêbôm≠áà"), 
°dout
);

231 
	`¥öt_numbî
(
fs
->
group_desc
[
i
].
bg_öode_bôm≠
);

232 
	`¥öt_bg_ªl_off£t
(
fs
, fs->
group_desc
[
i
].
bg_öode_bôm≠
, 0,

233 
fú°_block
, 
œ°_block
);

235 
	`Âuts
(
	`_
("\¿ InodêèbÀáà"), 
°dout
);

236 
	`¥öt_ønge
(
fs
->
group_desc
[
i
].
bg_öode_èbÀ
,

237 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
 +

238 
öode_blocks_≥r_group
 - 1);

239 
	`¥öt_bg_ªl_off£t
(
fs
, fs->
group_desc
[
i
].
bg_öode_èbÀ
, 1,

240 
fú°_block
, 
œ°_block
);

242 
	`¥ötf
 (
	`_
("\n %u free blocks, %u free inodes, "

244 
fs
->
group_desc
[
i
].
bg_‰ì_blocks_cou¡
,

245 
fs
->
group_desc
[
i
].
bg_‰ì_öodes_cou¡
,

246 
fs
->
group_desc
[
i
].
bg_u£d_dús_cou¡
,

247 
fs
->
group_desc
[
i
].
bg_ôabÀ_unu£d
 ? "" : "\n");

248 i‡(
fs
->
group_desc
[
i
].
bg_ôabÀ_unu£d
)

249 
	`¥ötf
 (
	`_
(", %u unused inodes\n"),

250 
fs
->
group_desc
[
i
].
bg_ôabÀ_unu£d
);

251 i‡(
block_bôm≠
) {

252 
	`Âuts
(
	`_
(" Fªêblocks: "), 
°dout
);

253 
	`ext2fs_gë_block_bôm≠_ønge
(
fs
->
block_m≠
,

254 
blk_ôr
, 
block_nbyãs
 << 3, 
block_bôm≠
);

255 
	`¥öt_‰ì
 (
i
, 
block_bôm≠
,

256 
fs
->
su≥r
->
s_blocks_≥r_group
,

257 
fs
->
su≥r
->
s_fú°_d©a_block
);

258 
	`Âutc
('\n', 
°dout
);

259 
blk_ôr
 +
fs
->
su≥r
->
s_blocks_≥r_group
;

261 i‡(
öode_bôm≠
) {

262 
	`Âuts
(
	`_
(" Fªêöodes: "), 
°dout
);

263 
	`ext2fs_gë_öode_bôm≠_ønge
(
fs
->
öode_m≠
,

264 
öo_ôr
, 
öode_nbyãs
 << 3, 
öode_bôm≠
);

265 
	`¥öt_‰ì
 (
i
, 
öode_bôm≠
,

266 
fs
->
su≥r
->
s_öodes_≥r_group
, 1);

267 
	`Âutc
('\n', 
°dout
);

268 
öo_ôr
 +
fs
->
su≥r
->
s_öodes_≥r_group
;

271 i‡(
block_bôm≠
)

272 
	`‰ì
(
block_bôm≠
);

273 i‡(
öode_bôm≠
)

274 
	`‰ì
(
öode_bôm≠
);

275 
	}
}

277 
	$li°_bad_blocks
(
ext2_fûsys
 
fs
, 
dump
)

279 
badblocks_li°
 
bb_li°
 = 0;

280 
badblocks_ôî©e
 
bb_ôî
;

281 
blk_t
 
blk
;

282 
îrcode_t
 
ªtvÆ
;

283 c⁄° *
hódî
, *
fmt
;

285 
ªtvÆ
 = 
	`ext2fs_ªad_bb_öode
(
fs
, &
bb_li°
);

286 i‡(
ªtvÆ
) {

287 
	`com_îr
("ext2fs_ªad_bb_öode", 
ªtvÆ
, 0);

290 
ªtvÆ
 = 
	`ext2fs_badblocks_li°_ôî©e_begö
(
bb_li°
, &
bb_ôî
);

291 i‡(
ªtvÆ
) {

292 
	`com_îr
("ext2fs_badblocks_li°_ôî©e_begö", 
ªtvÆ
,

293 
	`_
("whileÖrinting bad blockÜist"));

296 i‡(
dump
) {

297 
hódî
 = 
fmt
 = "%u\n";

299 
hódî
 = 
	`_
("Bad blocks: %u");

300 
fmt
 = ", %u";

302 
	`ext2fs_badblocks_li°_ôî©e
(
bb_ôî
, &
blk
)) {

303 
	`¥ötf
(
hódî
 ? hódî : 
fmt
, 
blk
);

304 
hódî
 = 0;

306 
	`ext2fs_badblocks_li°_ôî©e_íd
(
bb_ôî
);

307 i‡(!
dump
)

308 
	`Âutc
('\n', 
°dout
);

309 
	`ext2fs_badblocks_li°_‰ì
(
bb_li°
);

310 
	}
}

312 
	$¥öt_ölöe_jou∫Æ_öf‹m©i⁄
(
ext2_fûsys
 
fs
)

314 
jou∫Æ_su≥rblock_t
 *
jsb
;

315 
ext2_öode
 
öode
;

316 
ext2_fûe_t
 
jou∫Æ_fûe
;

317 
îrcode_t
 
ªtvÆ
;

318 
öo_t
 
öo
 = 
fs
->
su≥r
->
s_jou∫Æ_öum
;

319 
buf
[1024];

320 
__u32
 *
mask_±r
, 
mask
, 
m
;

321 
i
, 
j
, 
size
, 
¥öãd
 = 0;

323 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

324 i‡(
ªtvÆ
) {

325 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

326 
	`_
("whileÑeading journal inode"));

327 
	`exô
(1);

329 
ªtvÆ
 = 
	`ext2fs_fûe_›í2
(
fs
, 
öo
, &
öode
, 0, &
jou∫Æ_fûe
);

330 i‡(
ªtvÆ
) {

331 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

332 
	`_
("while opening journal inode"));

333 
	`exô
(1);

335 
ªtvÆ
 = 
	`ext2fs_fûe_ªad
(
jou∫Æ_fûe
, 
buf
, (buf), 0);

336 i‡(
ªtvÆ
) {

337 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

338 
	`_
("whileÑeading journal super block"));

339 
	`exô
(1);

341 
	`ext2fs_fûe_˛o£
(
jou∫Æ_fûe
);

342 
jsb
 = (
jou∫Æ_su≥rblock_t
 *Ë
buf
;

343 i‡(
	`be32_to_˝u
(
jsb
->
s_hódî
.
h_magic
Ë!
JFS_MAGIC_NUMBER
) {

344 
	`Ârötf
(
°dîr
,

346 
	`exô
(1);

348 
	`¥ötf
(
	`_
("Journal features: "));

349 
i
=0, 
mask_±r
=&
jsb
->
s_„©uª_com∑t
; i <3; i++,mask_ptr++) {

350 
mask
 = 
	`be32_to_˝u
(*
mask_±r
);

351 
j
=0,
m
=1; j < 32; j++, m<<=1) {

352 i‡(
mask
 & 
m
) {

353 
	`¥ötf
(" %s", 
	`e2p_j∫l_„©uª2°rög
(
i
, 
m
));

354 
¥öãd
++;

358 i‡(
¥öãd
 == 0)

359 
	`¥ötf
(" (none)");

360 
	`¥ötf
("\n");

361 
	`Âuts
(
	`_
("Jou∫Æ size: "), 
°dout
);

362 i‡((
fs
->
su≥r
->
s_„©uª_ro_com∑t
 &

363 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
) &&

364 (
öode
.
i_Êags
 & 
EXT4_HUGE_FILE_FL
))

365 
size
 = 
öode
.
i_blocks
 / (
fs
->
blocksize
 / 1024);

367 
size
 = 
öode
.
i_blocks
 >> 1;

368 i‡(
size
 < 8192)

369 
	`¥ötf
("%uk\n", 
size
);

371 
	`¥ötf
("%uM\n", 
size
 >> 10);

372 
	`¥ötf
(
	`_
("JournalÜength: %u\n"

375 ()
	`¡ohl
(
jsb
->
s_maxÀn
),

376 ()
	`¡ohl
(
jsb
->
s_£quí˚
),

377 ()
	`¡ohl
(
jsb
->
s_°¨t
));

378 
	}
}

380 
	$¥öt_jou∫Æ_öf‹m©i⁄
(
ext2_fûsys
 
fs
)

382 
îrcode_t
 
ªtvÆ
;

383 
buf
[1024];

384 
°r
[80];

385 
i
;

386 
jou∫Æ_su≥rblock_t
 *
jsb
;

389 i‡((
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, fs->
su≥r
->
s_fú°_d©a_block
+1, -1024, 
buf
))) {

390 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

391 
	`_
("whileÑeading journal superblock"));

392 
	`exô
(1);

394 
jsb
 = (
jou∫Æ_su≥rblock_t
 *Ë
buf
;

395 i‡((
jsb
->
s_hódî
.
h_magic
 !(Ë
	`¡ohl
(
JFS_MAGIC_NUMBER
)) ||

396 (
jsb
->
s_hódî
.
h_blockty≥
 !=

397 (Ë
	`¡ohl
(
JFS_SUPERBLOCK_V2
))) {

398 
	`com_îr
(
¥ogøm_«me
, 0,

399 
	`_
("Couldn't find journal superblock magicÇumbers"));

400 
	`exô
(1);

403 
	`¥ötf
(
	`_
("\nJournal block size: %u\n"

409 ()
	`¡ohl
(
jsb
->
s_blocksize
), (Ítohl(jsb->
s_maxÀn
),

410 ()
	`¡ohl
(
jsb
->
s_fú°
), (Ítohl(jsb->
s_£quí˚
),

411 ()
	`¡ohl
(
jsb
->
s_°¨t
), (Ítohl(jsb->
s_ƒ_u£rs
));

413 
i
=0; i < 
	`¡ohl
(
jsb
->
s_ƒ_u£rs
); i++) {

414 
	`uuid_u≈¨£
(&
jsb
->
s_u£rs
[
i
*16], 
°r
);

415 
	`¥ötf
(
i
 ? " %s\n"

416 : 
	`_
("Journal users: %s\n"),

417 
°r
);

419 
	}
}

421 
	$∑r£_exãnded_›ts
(c⁄° *
›ts
, 
blk_t
 *
su≥rblock
,

422 *
blocksize
)

424 *
buf
, *
tokí
, *
√xt
, *
p
, *
¨g
, *
bad›t
 = 0;

425 
Àn
;

426 
do_ußge
 = 0;

428 
Àn
 = 
	`°æí
(
›ts
);

429 
buf
 = 
	`mÆloc
(
Àn
+1);

430 i‡(!
buf
) {

431 
	`Ârötf
(
°dîr
,

432 
	`_
("Couldn'tállocate memoryÅoÖarse options!\n"));

433 
	`exô
(1);

435 
	`°r˝y
(
buf
, 
›ts
);

436 
tokí
 = 
buf
;Åokí && *tokí;Åokí = 
√xt
) {

437 
p
 = 
	`°rchr
(
tokí
, ',');

438 
√xt
 = 0;

439 i‡(
p
) {

440 *
p
 = 0;

441 
√xt
 = 
p
+1;

443 
¨g
 = 
	`°rchr
(
tokí
, '=');

444 i‡(
¨g
) {

445 *
¨g
 = 0;

446 
¨g
++;

448 i‡(
	`°rcmp
(
tokí
, "superblock") == 0 ||

449 
	`°rcmp
(
tokí
, "sb") == 0) {

450 i‡(!
¨g
) {

451 
do_ußge
++;

452 
bad›t
 = 
tokí
;

455 *
su≥rblock
 = 
	`°πoul
(
¨g
, &
p
, 0);

456 i‡(*
p
) {

457 
	`Ârötf
(
°dîr
,

458 
	`_
("Invalid superblockÖarameter: %s\n"),

459 
¨g
);

460 
do_ußge
++;

463 } i‡(
	`°rcmp
(
tokí
, "blocksize") == 0 ||

464 
	`°rcmp
(
tokí
, "bs") == 0) {

465 i‡(!
¨g
) {

466 
do_ußge
++;

467 
bad›t
 = 
tokí
;

470 *
blocksize
 = 
	`°πoul
(
¨g
, &
p
, 0);

471 i‡(*
p
) {

472 
	`Ârötf
(
°dîr
,

473 
	`_
("Invalid blocksizeÖarameter: %s\n"),

474 
¨g
);

475 
do_ußge
++;

479 
do_ußge
++;

480 
bad›t
 = 
tokí
;

483 i‡(
do_ußge
) {

484 
	`Ârötf
(
°dîr
, 
	`_
("\nBadÉxtended option(s) specified: %s\n\n"

491 
bad›t
 ? badopt : "");

492 
	`‰ì
(
buf
);

493 
	`exô
(1);

495 
	`‰ì
(
buf
);

496 
	}
}

498 
	$maö
 (
¨gc
, ** 
¨gv
)

500 
îrcode_t
 
ªtvÆ
;

501 
ext2_fûsys
 
fs
;

502 
¥öt_badblocks
 = 0;

503 
blk_t
 
u£_su≥rblock
 = 0;

504 
u£_blocksize
 = 0;

505 
image_dump
 = 0;

506 
f‹˚
 = 0;

507 
Êags
;

508 
hódî_⁄ly
 = 0;

509 
c
;

511 #ifde‡
ENABLE_NLS


512 
	`£éoˇÀ
(
LC_MESSAGES
, "");

513 
	`£éoˇÀ
(
LC_CTYPE
, "");

514 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

515 
	`ãxtdomaö
(
NLS_CAT_NAME
);

517 
	`add_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

518 
	`Ârötf
 (
°dîr
, "dum≥2f†%†(%s)\n", 
E2FSPROGS_VERSION
,

519 
E2FSPROGS_DATE
);

520 i‡(
¨gc
 && *
¨gv
)

521 
¥ogøm_«me
 = *
¨gv
;

523 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "bfhixVo:")Ë!
EOF
) {

524 
c
) {

526 
¥öt_badblocks
++;

529 
f‹˚
++;

532 
hódî_⁄ly
++;

535 
image_dump
++;

538 
	`∑r£_exãnded_›ts
(
›èrg
, &
u£_su≥rblock
,

539 &
u£_blocksize
);

543 
	`Ârötf
(
°dîr
, 
	`_
("\tUsing %s\n"),

544 
	`îr‹_mesßge
(
EXT2_ET_BASE
));

545 
	`exô
(0);

547 
hex_f‹m©
++;

550 
	`ußge
();

553 i‡(
›töd
 > 
¨gc
 - 1)

554 
	`ußge
();

555 
devi˚_«me
 = 
¨gv
[
›töd
++];

556 
Êags
 = 
EXT2_FLAG_JOURNAL_DEV_OK
 | 
EXT2_FLAG_SOFTSUPP_FEATURES
;

557 i‡(
f‹˚
)

558 
Êags
 |
EXT2_FLAG_FORCE
;

559 i‡(
image_dump
)

560 
Êags
 |
EXT2_FLAG_IMAGE_FILE
;

562 i‡(
u£_su≥rblock
 && !
u£_blocksize
) {

563 
u£_blocksize
 = 
EXT2_MIN_BLOCK_SIZE
;

564 
u£_blocksize
 <
EXT2_MAX_BLOCK_SIZE
;

565 
u£_blocksize
 *= 2) {

566 
ªtvÆ
 = 
	`ext2fs_›í
 (
devi˚_«me
, 
Êags
,

567 
u£_su≥rblock
,

568 
u£_blocksize
, 
unix_io_m™agî
,

569 &
fs
);

570 i‡(!
ªtvÆ
)

574 
ªtvÆ
 = 
	`ext2fs_›í
 (
devi˚_«me
, 
Êags
, 
u£_su≥rblock
,

575 
u£_blocksize
, 
unix_io_m™agî
, &
fs
);

576 i‡(
ªtvÆ
) {

577 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("whileÅryingÅo open %s"),

578 
devi˚_«me
);

579 
	`¥ötf
 (
	`_
("Couldn't find valid filesystem superblock.\n"));

580 
	`exô
 (1);

582 i‡(
¥öt_badblocks
) {

583 
	`li°_bad_blocks
(
fs
, 1);

585 
	`li°_su≥r
 (
fs
->
su≥r
);

586 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

587 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
) {

588 
	`¥öt_jou∫Æ_öf‹m©i⁄
(
fs
);

589 
	`ext2fs_˛o£
(
fs
);

590 
	`exô
(0);

592 i‡((
fs
->
su≥r
->
s_„©uª_com∑t
 &

593 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
) &&

594 (
fs
->
su≥r
->
s_jou∫Æ_öum
 != 0))

595 
	`¥öt_ölöe_jou∫Æ_öf‹m©i⁄
(
fs
);

596 
	`li°_bad_blocks
(
fs
, 0);

597 i‡(
hódî_⁄ly
) {

598 
	`ext2fs_˛o£
 (
fs
);

599 
	`exô
 (0);

601 
ªtvÆ
 = 
	`ext2fs_ªad_bôm≠s
 (
fs
);

602 
	`li°_desc
 (
fs
);

603 i‡(
ªtvÆ
) {

604 
	`¥ötf
(
	`_
("\n%s: %s:ÉrrorÑeading bitmaps: %s\n"),

605 
¥ogøm_«me
, 
devi˚_«me
,

606 
	`îr‹_mesßge
(
ªtvÆ
));

609 
	`ext2fs_˛o£
 (
fs
);

610 
	`ªmove_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

611 
	`exô
 (0);

612 
	}
}

	@e2freefrag.c

14 
	~<°dio.h
>

15 #ifde‡
HAVE_UNISTD_H


16 
	~<uni°d.h
>

18 #ifde‡
HAVE_STDLIB_H


19 
	~<°dlib.h
>

21 #ifde‡
HAVE_GETOPT_H


22 
	~<gë›t.h
>

24 *
›èrg
;

25 
›töd
;

28 
	~"ext2fs/ext2_fs.h
"

29 
	~"ext2fs/ext2fs.h
"

30 
	~"e2‰ì‰ag.h
"

32 
	$ußge
(c⁄° *
¥og
)

34 
	`Ârötf
(
°dîr
, "usage: %s [-c chunksize in kb] [-h] "

35 "devi˚_«me\n", 
¥og
);

36 
	`exô
(1);

37 
	}
}

39 
	$ul_log2
(
¨g
)

41 
l
 = 0;

43 
¨g
 >>= 1;

44 
¨g
) {

45 
l
++;

46 
¨g
 >>= 1;

48  
l
;

49 
	}
}

51 
	$öô_chunk_öfo
(
ext2_fûsys
 
fs
, 
chunk_öfo
 *
öfo
)

53 
i
;

55 
öfo
->
blocksize_bôs
 = 
	`ul_log2
(()
fs
->
blocksize
);

56 i‡(
öfo
->
chunkbyãs
) {

57 
öfo
->
chunkbôs
 = 
	`ul_log2
(öfo->
chunkbyãs
);

58 
öfo
->
blks_ö_chunk
 = info->
chunkbyãs
 >> info->
blocksize_bôs
;

60 
öfo
->
chunkbôs
 = 
	`ul_log2
(
DEFAULT_CHUNKSIZE
);

61 
öfo
->
blks_ö_chunk
 = 
DEFAULT_CHUNKSIZE
 >> info->
blocksize_bôs
;

64 
öfo
->
mö
 = ~0UL;

65 
öfo
->
max
 = info->
avg
 = 0;

66 
öfo
->
ªÆ_‰ì_chunks
 = 0;

68 
i
 = 0; i < 
MAX_HIST
; i++) {

69 
öfo
->
hi°ogøm
.
fc_chunks
[
i
] = 0;

70 
öfo
->
hi°ogøm
.
fc_blocks
[
i
] = 0;

72 
	}
}

74 
	$upd©e_chunk_°©s
(
chunk_öfo
 *
öfo
, 
chunk_size
)

76 
ödex
;

78 
ödex
 = 
	`ul_log2
(
chunk_size
) + 1;

79 i‡(
ödex
 >
MAX_HIST
)

80 
ödex
 = 
MAX_HIST
-1;

81 
öfo
->
hi°ogøm
.
fc_chunks
[
ödex
]++;

82 
öfo
->
hi°ogøm
.
fc_blocks
[
ödex
] +
chunk_size
;

84 i‡(
chunk_size
 > 
öfo
->
max
)

85 
öfo
->
max
 = 
chunk_size
;

86 i‡(
chunk_size
 < 
öfo
->
mö
)

87 
öfo
->
mö
 = 
chunk_size
;

88 
öfo
->
avg
 +
chunk_size
;

89 
öfo
->
ªÆ_‰ì_chunks
++;

90 
	}
}

92 
	$sˇn_block_bôm≠
(
ext2_fûsys
 
fs
, 
chunk_öfo
 *
öfo
)

94 
blocks_cou¡
 = 
fs
->
su≥r
->
s_blocks_cou¡
;

95 
chunks
 = (
blocks_cou¡
 + 
öfo
->
blks_ö_chunk
) >>

96 (
öfo
->
chunkbôs
 - info->
blocksize_bôs
);

97 
chunk_num
;

98 
œ°_chunk_size
 = 0;

99 
chunk_°¨t_blk
 = 0;

100 
u£d
;

102 
chunk_num
 = 0; chunk_num < 
chunks
; chunk_num++) {

103 
blk
, 
num_blks
;

104 
chunk_‰ì
;

107 i‡(
chunk_°¨t_blk
 + 
öfo
->
blks_ö_chunk
 > 
blocks_cou¡
)

108 
num_blks
 = 
blocks_cou¡
 - 
chunk_°¨t_blk
;

110 
num_blks
 = 
öfo
->
blks_ö_chunk
;

112 
chunk_‰ì
 = 0;

117 
blk
 = 0; blk < 
num_blks
; blk++, 
chunk_°¨t_blk
++) {

118 i‡(
chunk_num
 =0 && 
blk
 == 0) {

119 
blk
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

120 
chunk_°¨t_blk
 = 
blk
;

122 
u£d
 = 
	`ext2fs_Á°_ã°_block_bôm≠
(
fs
->
block_m≠
,

123 
chunk_°¨t_blk
);

124 i‡(!
u£d
) {

125 
œ°_chunk_size
++;

126 
chunk_‰ì
++;

129 i‡(
u£d
 && 
œ°_chunk_size
 != 0) {

130 
	`upd©e_chunk_°©s
(
öfo
, 
œ°_chunk_size
);

131 
œ°_chunk_size
 = 0;

135 i‡(
chunk_‰ì
 =
öfo
->
blks_ö_chunk
)

136 
öfo
->
‰ì_chunks
++;

138 i‡(
œ°_chunk_size
 != 0)

139 
	`upd©e_chunk_°©s
(
öfo
, 
œ°_chunk_size
);

140 
	}
}

142 
îrcode_t
 
	$gë_chunk_öfo
(
ext2_fûsys
 
fs
, 
chunk_öfo
 *
öfo
)

144 
tŸÆ_chunks
;

145 *
unôp
 = "KMGTPEZY";

146 
unôs
 = 10;

147 
°¨t
 = 0, 
íd
, 
cum
;

148 
i
, 
ªtvÆ
 = 0;

150 
	`sˇn_block_bôm≠
(
fs
, 
öfo
);

152 
	`¥ötf
("Total blocks: %u\nFree blocks: %u (%0.1f%%)\n",

153 
fs
->
su≥r
->
s_blocks_cou¡
, fs->su≥r->
s_‰ì_blocks_cou¡
,

154 ()
fs
->
su≥r
->
s_‰ì_blocks_cou¡
 * 100 /

155 
fs
->
su≥r
->
s_blocks_cou¡
);

157 i‡(
öfo
->
chunkbyãs
) {

158 
	`¥ötf
("\nChunksize: %lu bytes (%u blocks)\n",

159 
öfo
->
chunkbyãs
, info->
blks_ö_chunk
);

160 
tŸÆ_chunks
 = (
fs
->
su≥r
->
s_blocks_cou¡
 +

161 
öfo
->
blks_ö_chunk
) >>

162 (
öfo
->
chunkbôs
 - info->
blocksize_bôs
);

163 
	`¥ötf
("Total chunks: %lu\nFree chunks: %lu (%0.1f%%)\n",

164 
tŸÆ_chunks
, 
öfo
->
‰ì_chunks
,

165 ()
öfo
->
‰ì_chunks
 * 100 / 
tŸÆ_chunks
);

169 i‡(
öfo
->
ªÆ_‰ì_chunks
) {

170 
öfo
->
mö
 = (öfo->mö * 
fs
->
blocksize
) >> 10;

171 
öfo
->
max
 = (öfo->max * 
fs
->
blocksize
) >> 10;

172 
öfo
->
avg
 = (öfo->avg / info->
ªÆ_‰ì_chunks
 *

173 
fs
->
blocksize
) >> 10;

175 
öfo
->
mö
 = 0;

178 
	`¥ötf
("\nMin. freeÉxtent: %lu KB \nMax. freeÉxtent: %lu KB\n"

179 "Avg. fªêexã¡: %lu KB\n", 
öfo
->
mö
, info->
max
, info->
avg
);

180 
	`¥ötf
("Num. fªêexã¡: %lu\n", 
öfo
->
ªÆ_‰ì_chunks
);

182 
	`¥ötf
("\nHISTOGRAM OF FREE EXTENT SIZES:\n");

183 
	`¥ötf
("%s : %12s %12s %7s\n", "Extent Size Range", "FreeÉxtents",

185 
i
 = 0; i < 
MAX_HIST
; i++) {

186 
íd
 = 1 << (
i
 + 
öfo
->
blocksize_bôs
 - 
unôs
);

187 i‡(
öfo
->
hi°ogøm
.
fc_chunks
[
i
] != 0) {

188 
íd_°r
[32];

190 
	`•rötf
(
íd_°r
, "%5lu%c-", 
íd
, *
unôp
);

191 i‡(
i
 =
MAX_HIST
-1)

192 
	`°r˝y
(
íd_°r
, "max ");

193 
	`¥ötf
("%5lu%c...%7s : %12lu %12lu %6.2f%%\n",

194 
°¨t
, *
unôp
, 
íd_°r
,

195 
öfo
->
hi°ogøm
.
fc_chunks
[
i
],

196 
öfo
->
hi°ogøm
.
fc_blocks
[
i
],

197 ()
öfo
->
hi°ogøm
.
fc_blocks
[
i
] * 100 /

198 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
);

200 
°¨t
 = 
íd
;

201 i‡(
°¨t
 == 1<<10) {

202 
°¨t
 = 1;

203 
unôs
 += 10;

204 
unôp
++;

208  
ªtvÆ
;

209 
	}
}

211 
	$˛o£_devi˚
(*
devi˚_«me
, 
ext2_fûsys
 
fs
)

213 
ªtvÆ
 = 
	`ext2fs_˛o£
(
fs
);

215 i‡(
ªtvÆ
)

216 
	`com_îr
(
devi˚_«me
, 
ªtvÆ
, "while closingÅhe filesystem.\n");

217 
	}
}

219 
	$cﬁÀ˘_öfo
(
ext2_fûsys
 
fs
, 
chunk_öfo
 *chunk_info)

221 
ªtvÆ
 = 0, 
i
, 
‰ì_blks
;

223 
	`¥ötf
("Devi˚: %s\n", 
fs
->
devi˚_«me
);

224 
	`¥ötf
("Blocksize: %u byãs\n", 
fs
->
blocksize
);

226 
ªtvÆ
 = 
	`ext2fs_ªad_block_bôm≠
(
fs
);

227 i‡(
ªtvÆ
) {

228 
	`com_îr
(
fs
->
devi˚_«me
, 
ªtvÆ
, "whileÑeading block bitmap");

229 
	`˛o£_devi˚
(
fs
->
devi˚_«me
, fs);

230 
	`exô
(1);

233 
	`öô_chunk_öfo
(
fs
, 
chunk_öfo
);

235 
ªtvÆ
 = 
	`gë_chunk_öfo
(
fs
, 
chunk_öfo
);

236 i‡(
ªtvÆ
) {

237 
	`com_îr
(
fs
->
devi˚_«me
, 
ªtvÆ
, "while collecting chunk info");

238 
	`˛o£_devi˚
(
fs
->
devi˚_«me
, fs);

239 
	`exô
(1);

241 
	}
}

243 
	$›í_devi˚
(*
devi˚_«me
, 
ext2_fûsys
 *
fs
)

245 
ªtvÆ
;

246 
Êag
 = 
EXT2_FLAG_FORCE
;

248 
ªtvÆ
 = 
	`ext2fs_›í
(
devi˚_«me
, 
Êag
, 0, 0, 
unix_io_m™agî
, 
fs
);

249 i‡(
ªtvÆ
) {

250 
	`com_îr
(
devi˚_«me
, 
ªtvÆ
, "while opening filesystem");

251 
	`exô
(1);

253 
	}
}

255 
	$maö
(
¨gc
, *
¨gv
[])

257 
chunk_öfo
 chunk_info = { };

258 
îrcode_t
 
ªtvÆ
 = 0;

259 
ext2_fûsys
 
fs
 = 
NULL
;

260 *
devi˚_«me
;

261 *
¥og«me
;

262 *
íd
;

263 
c
;

265 
	`add_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

266 
¥og«me
 = 
¨gv
[0];

268 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:h")Ë!
EOF
) {

269 
c
) {

271 
chunk_öfo
.
chunkbyãs
 = 
	`°πouŒ
(
›èrg
, &
íd
, 0);

272 i‡(*
íd
 != '\0') {

273 
	`Ârötf
(
°dîr
, "%s: bad chunk size '%s'\n",

274 
¥og«me
, 
›èrg
);

275 
	`ußge
(
¥og«me
);

277 i‡(
chunk_öfo
.
chunkbyãs
 &

278 (
chunk_öfo
.
chunkbyãs
 - 1)) {

279 
	`Ârötf
(
°dîr
, "%s: chunk size must beá "

280 "powî o‡2.\n", 
¨gv
[0]);

281 
	`ußge
(
¥og«me
);

283 
chunk_öfo
.
chunkbyãs
 *= 1024;

286 
	`Ârötf
(
°dîr
, "%s: bad option '%c'\n",

287 
¥og«me
, 
c
);

289 
	`ußge
(
¥og«me
);

294 i‡(
›töd
 =
¨gc
) {

295 
	`Ârötf
(
°dîr
, "%s: missög devi˚Çame.\n", 
¥og«me
);

296 
	`ußge
(
¥og«me
);

299 
devi˚_«me
 = 
¨gv
[
›töd
];

301 
	`›í_devi˚
(
devi˚_«me
, &
fs
);

303 i‡(
chunk_öfo
.
chunkbyãs
 && (chunk_öfo.chunkbyã†< 
fs
->
blocksize
)) {

304 
	`Ârötf
(
°dîr
, "%s: chunksize must be greaterÅhan orÉqual "

305 "tÿfûesy°em blocksize.\n", 
¥og«me
);

306 
	`exô
(1);

308 
	`cﬁÀ˘_öfo
(
fs
, &
chunk_öfo
);

309 
	`˛o£_devi˚
(
devi˚_«me
, 
fs
);

311  
ªtvÆ
;

312 
	}
}

	@e2freefrag.h

1 
	~<sys/ty≥s.h
>

3 
	#DEFAULT_CHUNKSIZE
 (1024*1024)

	)

5 
	#MAX_HIST
 32

	)

6 
	s‰ì_chunk_hi°ogøm
 {

7 
	mfc_chunks
[
MAX_HIST
];

8 
	mfc_blocks
[
MAX_HIST
];

11 
	schunk_öfo
 {

12 
	mchunkbyãs
;

13 
	mchunkbôs
;

14 
	m‰ì_chunks
;

15 
	mªÆ_‰ì_chunks
;

16 
	mblocksize_bôs
;

17 
	mblks_ö_chunk
;

18 
	mmö
, 
	mmax
, 
	mavg
;

19 
‰ì_chunk_hi°ogøm
 
	mhi°ogøm
;

	@e2image.c

13 
	#_LARGEFILE_SOURCE


	)

14 
	#_LARGEFILE64_SOURCE


	)

16 
	~<f˙é.h
>

17 
	~<gΩ.h
>

18 #ifde‡
HAVE_GETOPT_H


19 
	~<gë›t.h
>

21 *
›èrg
;

22 
›töd
;

24 
	~<pwd.h
>

25 
	~<°dio.h
>

26 #ifde‡
HAVE_STDLIB_H


27 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<time.h
>

31 
	~<uni°d.h
>

32 
	~<f˙é.h
>

33 
	~<î∫o.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/ty≥s.h
>

37 
	~"ext2fs/ext2_fs.h
"

38 
	~"ext2fs/ext2fs.h
"

39 
	~"ë/com_îr.h
"

40 
	~"uuid/uuid.h
"

41 
	~"e2p/e2p.h
"

42 
	~"ext2fs/e2image.h
"

44 
	~"../vîsi⁄.h
"

45 
	~"∆s-íabÀ.h
"

47 c⁄° * 
	g¥ogøm_«me
 = "e2image";

48 * 
	gdevi˚_«me
 = 
NULL
;

50 
	$ußge
()

52 
	`Ârötf
(
°dîr
, 
	`_
("Usage: %s [-rsI] device image_file\n"),

53 
¥ogøm_«me
);

54 
	`exô
 (1);

55 
	}
}

57 
	$wrôe_hódî
(
fd
, 
ext2_image_hdr
 *
hdr
, 
blocksize
)

59 *
hódî_buf
;

60 
a˘uÆ
;

62 
hódî_buf
 = 
	`mÆloc
(
blocksize
);

63 i‡(!
hódî_buf
) {

64 
	`Âuts
(
	`_
("Couldn'àÆloˇã hódî buf„r\n"), 
°dîr
);

65 
	`exô
(1);

68 i‡(
	`l£ek
(
fd
, 0, 
SEEK_SET
) < 0) {

69 
	`≥º‹
("lseek while writing header");

70 
	`exô
(1);

72 
	`mem£t
(
hódî_buf
, 0, 
blocksize
);

74 i‡(
hdr
)

75 
	`mem˝y
(
hódî_buf
, 
hdr
, (
ext2_image_hdr
));

77 
a˘uÆ
 = 
	`wrôe
(
fd
, 
hódî_buf
, 
blocksize
);

78 i‡(
a˘uÆ
 < 0) {

79 
	`≥º‹
("write header");

80 
	`exô
(1);

82 i‡(
a˘uÆ
 !
blocksize
) {

83 
	`Ârötf
(
°dîr
, 
	`_
("short write (only %d bytes) for "

84 "wrôög imagêhódî"), 
a˘uÆ
);

85 
	`exô
(1);

87 
	`‰ì
(
hódî_buf
);

88 
	}
}

90 
	$wrôe_image_fûe
(
ext2_fûsys
 
fs
, 
fd
)

92 
ext2_image_hdr
 
hdr
;

93 
°©
 
°
;

94 
îrcode_t
 
ªtvÆ
;

96 
	`wrôe_hódî
(
fd
, 
NULL
, 
fs
->
blocksize
);

97 
	`mem£t
(&
hdr
, 0, (
ext2_image_hdr
));

99 
hdr
.
off£t_su≥r
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

100 
ªtvÆ
 = 
	`ext2fs_image_su≥r_wrôe
(
fs
, 
fd
, 0);

101 i‡(
ªtvÆ
) {

102 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("while writing superblock"));

103 
	`exô
(1);

106 
hdr
.
off£t_öode
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

107 
ªtvÆ
 = 
	`ext2fs_image_öode_wrôe
(
fs
, 
fd
,

108 (
fd
 !1Ë? 
IMAGER_FLAG_SPARSEWRITE
 : 0);

109 i‡(
ªtvÆ
) {

110 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("while writing inodeÅable"));

111 
	`exô
(1);

114 
hdr
.
off£t_blockm≠
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

115 
ªtvÆ
 = 
	`ext2fs_image_bôm≠_wrôe
(
fs
, 
fd
, 0);

116 i‡(
ªtvÆ
) {

117 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("while writing block bitmap"));

118 
	`exô
(1);

121 
hdr
.
off£t_öodem≠
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
);

122 
ªtvÆ
 = 
	`ext2fs_image_bôm≠_wrôe
(
fs
, 
fd
, 
IMAGER_FLAG_INODEMAP
);

123 i‡(
ªtvÆ
) {

124 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("while writing inode bitmap"));

125 
	`exô
(1);

128 
hdr
.
magic_numbî
 = 
EXT2_ET_MAGIC_E2IMAGE
;

129 
	`°r˝y
(
hdr
.
magic_des¸ùt‹
, "Ext2 Image 1.0");

130 
	`gëho°«me
(
hdr
.
fs_ho°«me
, (hdr.fs_hostname));

131 
	`°∫˝y
(
hdr
.
fs_devi˚_«me
, 
devi˚_«me
, (hdr.fs_device_name)-1);

132 
hdr
.
fs_devi˚_«me
[(hdr.fs_device_name) - 1] = 0;

133 
hdr
.
fs_blocksize
 = 
fs
->
blocksize
;

135 i‡(
	`°©
(
devi˚_«me
, &
°
) == 0)

136 
hdr
.
fs_devi˚
 = 
°
.
°_rdev
;

138 i‡(
	`f°©
(
fd
, &
°
) == 0) {

139 
hdr
.
image_devi˚
 = 
°
.
°_dev
;

140 
hdr
.
image_öode
 = 
°
.
°_öo
;

142 
	`mem˝y
(
hdr
.
fs_uuid
, 
fs
->
su≥r
->
s_uuid
, (hdr.fs_uuid));

144 
hdr
.
image_time
 = 
	`time
(0);

145 
	`wrôe_hódî
(
fd
, &
hdr
, 
fs
->
blocksize
);

146 
	}
}

151 
ext2fs_block_bôm≠
 
	gmëa_block_m≠
;

152 
ext2fs_block_bôm≠
 
	gs¸ambÀ_block_m≠
;

154 
	s¥o˚ss_block_°ru˘
 {

155 
ext2_öo_t
 
	möo
;

156 
	mis_dú
;

165 
öo_t
 
	g°ashed_öo
 = 0;

166 
ext2_öode
 *
	g°ashed_öode
;

168 
îrcode_t
 
mëa_gë_blocks
(
ext2_fûsys
 
fs
 
EXT2FS_ATTR
((
unu£d
)),

169 
ext2_öo_t
 
öo
,

170 
blk_t
 *
blocks
)

172 
	gi
;

174 i‡((
	göo
 !
°ashed_öo
Ë|| !
°ashed_öode
)

175  
EXT2_ET_CALLBACK_NOTHANDLED
;

177 
	gi
=0; i < 
	gEXT2_N_BLOCKS
; i++)

178 
	gblocks
[
i
] = 
°ashed_öode
->
i_block
[i];

182 
îrcode_t
 
mëa_check_dúe˘‹y
(
ext2_fûsys
 
fs
 
EXT2FS_ATTR
((
unu£d
)),

183 
ext2_öo_t
 
öo
)

185 i‡((
	göo
 !
°ashed_öo
Ë|| !
°ashed_öode
)

186  
EXT2_ET_CALLBACK_NOTHANDLED
;

188 i‡(!
LINUX_S_ISDIR
(
°ashed_öode
->
i_mode
))

189  
	gEXT2_ET_NO_DIRECTORY
;

193 
îrcode_t
 
mëa_ªad_öode
(
ext2_fûsys
 
fs
 
EXT2FS_ATTR
((
unu£d
)),

194 
ext2_öo_t
 
öo
,

195 
ext2_öode
 *
öode
)

197 i‡((
	göo
 !
°ashed_öo
Ë|| !
°ashed_öode
)

198  
EXT2_ET_CALLBACK_NOTHANDLED
;

199 *
	göode
 = *
°ashed_öode
;

203 
	$u£_öode_sh‹tcuts
(
ext2_fûsys
 
fs
, 
boﬁ
)

205 i‡(
boﬁ
) {

206 
fs
->
gë_blocks
 = 
mëa_gë_blocks
;

207 
fs
->
check_dúe˘‹y
 = 
mëa_check_dúe˘‹y
;

208 
fs
->
ªad_öode
 = 
mëa_ªad_öode
;

209 
°ashed_öo
 = 0;

211 
fs
->
gë_blocks
 = 0;

212 
fs
->
check_dúe˘‹y
 = 0;

213 
fs
->
ªad_öode
 = 0;

215 
	}
}

217 
¥o˚ss_dú_block
(
ext2_fûsys
 
fs
 
EXT2FS_ATTR
((
unu£d
)),

218 
blk_t
 *
block_ƒ
,

219 
e2_blk˙t_t
 
block˙t
 
EXT2FS_ATTR
((
unu£d
)),

220 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

221 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

222 *
¥iv_d©a
 
EXT2FS_ATTR
((
unu£d
)))

224 
¥o˚ss_block_°ru˘
 *
	gp
;

226 
	gp
 = (
¥o˚ss_block_°ru˘
 *Ë
¥iv_d©a
;

228 
ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
, *
block_ƒ
);

229 i‡(
	gs¸ambÀ_block_m≠
 && 
	gp
->
	gis_dú
 && 
	gblock˙t
 >= 0)

230 
ext2fs_m¨k_block_bôm≠
(
s¸ambÀ_block_m≠
, *
block_ƒ
);

234 
¥o˚ss_fûe_block
(
ext2_fûsys
 
fs
 
EXT2FS_ATTR
((
unu£d
)),

235 
blk_t
 *
block_ƒ
,

236 
e2_blk˙t_t
 
block˙t
,

237 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

238 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

239 *
¥iv_d©a
 
EXT2FS_ATTR
((
unu£d
)))

241 i‡(
	gblock˙t
 < 0) {

242 
ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
, *
block_ƒ
);

247 
	$m¨k_èbÀ_blocks
(
ext2_fûsys
 
fs
)

249 
blk_t
 
fú°_block
, 
b
;

250 
i
,
j
;

252 
fú°_block
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

256 
	`ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
, 
fú°_block
);

261 
j
 = 0; j < 
fs
->
desc_blocks
; j++) {

262 
	`ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
,

263 
	`ext2fs_des¸ùt‹_block_loc
(
fs
, 
fú°_block
, 
j
));

266 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

270 i‡(
fs
->
group_desc
[
i
].
bg_öode_èbÀ
) {

271 
j
 = 0, 
b
 = 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
;

272 
j
 < (Ë
fs
->
öode_blocks_≥r_group
;

273 
j
++, 
b
++)

274 
	`ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
, 
b
);

280 i‡(
fs
->
group_desc
[
i
].
bg_block_bôm≠
) {

281 
	`ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
,

282 
fs
->
group_desc
[
i
].
bg_block_bôm≠
);

288 i‡(
fs
->
group_desc
[
i
].
bg_öode_bôm≠
) {

289 
	`ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
,

290 
fs
->
group_desc
[
i
].
bg_öode_bôm≠
);

293 
	}
}

298 
	$check_zîo_block
(*
buf
, 
blocksize
)

300 *
˝
 = 
buf
;

301 
À·
 = 
blocksize
;

303 
À·
 > 0) {

304 i‡(*
˝
++)

306 
À·
--;

309 
	}
}

311 
	$wrôe_block
(
fd
, *
buf
, 
•¨£_off£t
,

312 
blocksize
, 
blk_t
 
block
)

314 
cou¡
;

315 
îrcode_t
 
îr
;

317 i‡(
•¨£_off£t
) {

318 #ifde‡
HAVE_LSEEK64


319 i‡(
	`l£ek64
(
fd
, 
•¨£_off£t
, 
SEEK_CUR
) < 0)

320 
	`≥º‹
("lseek");

322 i‡(
	`l£ek
(
fd
, 
•¨£_off£t
, 
SEEK_CUR
) < 0)

323 
	`≥º‹
("lseek");

326 i‡(
blocksize
) {

327 
cou¡
 = 
	`wrôe
(
fd
, 
buf
, 
blocksize
);

328 i‡(
cou¡
 !
blocksize
) {

329 i‡(
cou¡
 == -1)

330 
îr
 = 
î∫o
;

332 
îr
 = 0;

333 
	`com_îr
(
¥ogøm_«me
, 
îr
, "error writing block %u",

334 
block
);

335 
	`exô
(1);

338 
	}
}

340 
	g«me_id
[256];

342 
	#EXT4_MAX_REC_LEN
 ((1<<16)-1)

	)

344 
	$s¸ambÀ_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
)

346 *
p
, *
íd
, *
˝
;

347 
ext2_dú_íåy_2
 *
dúít
;

348 
ªc_Àn
;

349 
id
, 
Àn
;

351 
íd
 = 
buf
 + 
fs
->
blocksize
;

352 
p
 = 
buf
;Ö < 
íd
-8;Ö +
ªc_Àn
) {

353 
dúít
 = (
ext2_dú_íåy_2
 *Ë
p
;

354 
ªc_Àn
 = 
dúít
->rec_len;

355 #ifde‡
WORDS_BIGENDIAN


356 
ªc_Àn
 = 
	`ext2fs_swab16
(rec_len);

358 i‡(
ªc_Àn
 =
EXT4_MAX_REC_LEN
 ||Ñec_len == 0)

359 
ªc_Àn
 = 
fs
->
blocksize
;

361 
ªc_Àn
 = (rec_len & 65532) | ((rec_len & 3) << 16);

363 
	`¥ötf
("ªc_À¿%d,Çame_À¿%d\n", 
ªc_Àn
, 
dúít
->
«me_Àn
);

365 i‡(
ªc_Àn
 < 8 || (rec_len % 4) ||

366 (
p
+
ªc_Àn
 > 
íd
)) {

367 
	`¥ötf
("Corrupt directory block %lu: "

368 "badÑec_À¿(%d)\n", (Ë
blk
,

369 
ªc_Àn
);

370 
ªc_Àn
 = 
íd
 - 
p
;

371 (Ë
	`ext2fs_£t_ªc_Àn
(
fs
, 
ªc_Àn
,

372 (
ext2_dú_íåy
 *Ë
dúít
);

373 #ifde‡
WORDS_BIGENDIAN


374 
dúít
->
ªc_Àn
 = 
	`ext2fs_swab16
(dirent->rec_len);

378 i‡(
dúít
->
«me_Àn
 + 8 > 
ªc_Àn
) {

379 
	`¥ötf
("Corrupt directory block %lu: "

380 "badÇame_À¿(%d)\n", (Ë
blk
,

381 
dúít
->
«me_Àn
);

382 
dúít
->
«me_Àn
 = 
ªc_Àn
 - 8;

385 
˝
 = 
p
+8;

386 
Àn
 = 
ªc_Àn
 - 
dúít
->
«me_Àn
 - 8;

387 i‡(
Àn
 > 0)

388 
	`mem£t
(
˝
+
dúít
->
«me_Àn
, 0, 
Àn
);

389 i‡(
dúít
->
«me_Àn
==1 && 
˝
[0] == '.')

391 i‡(
dúít
->
«me_Àn
==2 && 
˝
[0] == '.' && cp[1] == '.')

394 
	`mem£t
(
˝
, 'A', 
dúít
->
«me_Àn
);

395 
Àn
 = 
dúít
->
«me_Àn
;

396 
id
 = 
«me_id
[
Àn
]++;

397 (
Àn
 > 0Ë&& (
id
 > 0)) {

398 *
˝
 +
id
 % 26;

399 
id
 = id / 26;

400 
˝
++;

401 
Àn
--;

404 
	}
}

406 
	$ouçut_mëa_d©a_blocks
(
ext2_fûsys
 
fs
, 
fd
)

408 
îrcode_t
 
ªtvÆ
;

409 
blk_t
 
blk
;

410 *
buf
, *
zîo_buf
;

411 
•¨£
 = 0;

413 
buf
 = 
	`mÆloc
(
fs
->
blocksize
);

414 i‡(!
buf
) {

415 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

416 
	`exô
(1);

418 
zîo_buf
 = 
	`mÆloc
(
fs
->
blocksize
);

419 i‡(!
zîo_buf
) {

420 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

421 
	`exô
(1);

423 
	`mem£t
(
zîo_buf
, 0, 
fs
->
blocksize
);

424 
blk
 = 0; blk < 
fs
->
su≥r
->
s_blocks_cou¡
; blk++) {

425 i‡((
blk
 >
fs
->
su≥r
->
s_fú°_d©a_block
) &&

426 
	`ext2fs_ã°_block_bôm≠
(
mëa_block_m≠
, 
blk
)) {

427 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
, 1, 
buf
);

428 i‡(
ªtvÆ
) {

429 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

430 "îr‹Ñódög block %u", 
blk
);

432 i‡(
s¸ambÀ_block_m≠
 &&

433 
	`ext2fs_ã°_block_bôm≠
(
s¸ambÀ_block_m≠
, 
blk
))

434 
	`s¸ambÀ_dú_block
(
fs
, 
blk
, 
buf
);

435 i‡((
fd
 !1Ë&& 
	`check_zîo_block
(
buf
, 
fs
->
blocksize
))

436 
•¨£_wrôe
;

437 
	`wrôe_block
(
fd
, 
buf
, 
•¨£
, 
fs
->
blocksize
, 
blk
);

438 
•¨£
 = 0;

440 
•¨£_wrôe
:

441 i‡(
fd
 == 1) {

442 
	`wrôe_block
(
fd
, 
zîo_buf
, 0,

443 
fs
->
blocksize
, 
blk
);

446 
•¨£
 +
fs
->
blocksize
;

447 i‡(
•¨£
 >= 1024*1024) {

448 
	`wrôe_block
(
fd
, 0, 
•¨£
, 0, 0);

449 
•¨£
 = 0;

453 i‡(
•¨£
)

454 
	`wrôe_block
(
fd
, 
zîo_buf
, 
•¨£
-1, 1, -1);

455 
	`‰ì
(
zîo_buf
);

456 
	`‰ì
(
buf
);

457 
	}
}

459 
	$wrôe_øw_image_fûe
(
ext2_fûsys
 
fs
, 
fd
, 
s¸ambÀ_Êag
)

461 
¥o˚ss_block_°ru˘
 
pb
;

462 
ext2_öode
 
öode
;

463 
ext2_öode_sˇn
 
sˇn
;

464 
ext2_öo_t
 
öo
;

465 
îrcode_t
 
ªtvÆ
;

466 * 
block_buf
;

468 
ªtvÆ
 = 
	`ext2fs_Æloˇã_block_bôm≠
(
fs
, "in-use block map",

469 &
mëa_block_m≠
);

470 i‡(
ªtvÆ
) {

471 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "whileállocating block bitmap");

472 
	`exô
(1);

475 i‡(
s¸ambÀ_Êag
) {

476 
ªtvÆ
 = 
	`ext2fs_Æloˇã_block_bôm≠
(
fs
, "scramble block map",

477 &
s¸ambÀ_block_m≠
);

478 i‡(
ªtvÆ
) {

479 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

481 
	`exô
(1);

485 
	`m¨k_èbÀ_blocks
(
fs
);

487 
ªtvÆ
 = 
	`ext2fs_›í_öode_sˇn
(
fs
, 0, &
sˇn
);

488 i‡(
ªtvÆ
) {

489 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("while opening inode scan"));

490 
	`exô
(1);

493 
block_buf
 = 
	`mÆloc
(
fs
->
blocksize
 * 3);

494 i‡(!
block_buf
) {

495 
	`com_îr
(
¥ogøm_«me
, 0, "Can'tállocate block buffer");

496 
	`exô
(1);

499 
	`u£_öode_sh‹tcuts
(
fs
, 1);

500 
°ashed_öode
 = &
öode
;

502 
ªtvÆ
 = 
	`ext2fs_gë_√xt_öode
(
sˇn
, &
öo
, &
öode
);

503 i‡(
ªtvÆ
 =
EXT2_ET_BAD_BLOCK_IN_INODE_TABLE
)

505 i‡(
ªtvÆ
) {

506 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

507 
	`_
("while gettingÇext inode"));

508 
	`exô
(1);

510 i‡(
öo
 == 0)

512 i‡(!
öode
.
i_löks_cou¡
)

514 i‡(
öode
.
i_fûe_a˛
) {

515 
	`ext2fs_m¨k_block_bôm≠
(
mëa_block_m≠
,

516 
öode
.
i_fûe_a˛
);

518 i‡(!
	`ext2fs_öode_has_vÆid_blocks
(&
öode
))

521 
°ashed_öo
 = 
öo
;

522 
pb
.
öo
 = ino;

523 
pb
.
is_dú
 = 
	`LINUX_S_ISDIR
(
öode
.
i_mode
);

524 i‡(
	`LINUX_S_ISDIR
(
öode
.
i_mode
) ||

525 (
	`LINUX_S_ISLNK
(
öode
.
i_mode
) &&

526 
	`ext2fs_öode_has_vÆid_blocks
(&
öode
)) ||

527 
öo
 =
fs
->
su≥r
->
s_jou∫Æ_öum
) {

528 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
öo
,

529 
BLOCK_FLAG_READ_ONLY
, 
block_buf
,

530 
¥o˚ss_dú_block
, &
pb
);

531 i‡(
ªtvÆ
) {

532 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

534 
öo
);

535 
	`exô
(1);

538 i‡((
öode
.
i_Êags
 & 
EXT4_EXTENTS_FL
) ||

539 #ifde‡
EXT2FS_SNAPSHOT_HUGE_SNAPSHOT


540 (
öode
.
i_Êags
 & 
EXT4_SNAPFILE_FL
) ||

542 
öode
.
i_block
[
EXT2_IND_BLOCK
] ||

543 
öode
.
i_block
[
EXT2_DIND_BLOCK
] ||

544 
öode
.
i_block
[
EXT2_TIND_BLOCK
]) {

545 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
,

546 
öo
, 
BLOCK_FLAG_READ_ONLY
, 
block_buf
,

547 
¥o˚ss_fûe_block
, &
pb
);

548 i‡(
ªtvÆ
) {

549 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

550 "whûêôî©ög ovî inodê%u", 
öo
);

551 
	`exô
(1);

556 
	`u£_öode_sh‹tcuts
(
fs
, 0);

557 
	`ouçut_mëa_d©a_blocks
(
fs
, 
fd
);

558 
	`‰ì
(
block_buf
);

559 
	}
}

561 
	$ö°Æl_image
(*
devi˚
, *
image_‚
, 
øw_Êag
)

563 
îrcode_t
 
ªtvÆ
;

564 
ext2_fûsys
 
fs
;

565 
›í_Êag
 = 
EXT2_FLAG_IMAGE_FILE
;

566 
fd
 = 0;

567 
io_m™agî
 
io_±r
;

568 
io_ch™√l
 
io
, 
image_io
;

570 i‡(
øw_Êag
) {

571 
	`com_îr
(
¥ogøm_«me
, 0, "Raw images cannot be installed");

572 
	`exô
(1);

575 #ifde‡
CONFIG_TESTIO_DEBUG


576 i‡(
	`gëív
("TEST_IO_FLAGS") || getenv("TEST_IO_BLOCK")) {

577 
io_±r
 = 
ã°_io_m™agî
;

578 
ã°_io_backög_m™agî
 = 
unix_io_m™agî
;

581 
io_±r
 = 
unix_io_m™agî
;

583 
ªtvÆ
 = 
	`ext2fs_›í
 (
image_‚
, 
›í_Êag
, 0, 0,

584 
io_±r
, &
fs
);

585 i‡(
ªtvÆ
) {

586 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("whileÅryingÅo open %s"),

587 
image_‚
);

588 
	`exô
(1);

591 
ªtvÆ
 = 
	`ext2fs_ªad_bôm≠s
 (
fs
);

592 i‡(
ªtvÆ
) {

593 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "errorÑeading bitmaps");

594 
	`exô
(1);

597 #ifde‡
HAVE_OPEN64


598 
fd
 = 
	`›í64
(
image_‚
, 
O_RDONLY
);

600 
fd
 = 
	`›í
(
image_‚
, 
O_RDONLY
);

602 i‡(
fd
 < 0) {

603 
	`≥º‹
(
image_‚
);

604 
	`exô
(1);

607 
ªtvÆ
 = 
io_±r
->
	`›í
(
devi˚
, 
IO_FLAG_RW
, &
io
);

608 i‡(
ªtvÆ
) {

609 
	`com_îr
(
devi˚
, 0, "while opening device file");

610 
	`exô
(1);

613 
image_io
 = 
fs
->
io
;

615 
	`ext2fs_ªwrôe_to_io
(
fs
, 
io
);

617 i‡(
	`l£ek
(
fd
, 
fs
->
image_hódî
->
off£t_öode
, 
SEEK_SET
) < 0) {

618 
	`≥º‹
("lseek");

619 
	`exô
(1);

622 
ªtvÆ
 = 
	`ext2fs_image_öode_ªad
(
fs
, 
fd
, 0);

623 i‡(
ªtvÆ
) {

624 
	`com_îr
(
image_‚
, 0, "whileÑestoringÅhe imageÅable");

625 
	`exô
(1);

628 
	`ext2fs_˛o£
 (
fs
);

629 
	`exô
 (0);

630 
	}
}

632 
	$maö
 (
¨gc
, ** 
¨gv
)

634 
c
;

635 
îrcode_t
 
ªtvÆ
;

636 
ext2_fûsys
 
fs
;

637 *
image_‚
;

638 
›í_Êag
 = 0;

639 
øw_Êag
 = 0;

640 
ö°Æl_Êag
 = 0;

641 
s¸ambÀ_Êag
 = 0;

642 
fd
 = 0;

644 #ifde‡
ENABLE_NLS


645 
	`£éoˇÀ
(
LC_MESSAGES
, "");

646 
	`£éoˇÀ
(
LC_CTYPE
, "");

647 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

648 
	`ãxtdomaö
(
NLS_CAT_NAME
);

650 
	`Ârötf
 (
°dîr
, "e2imagê%†(%s)\n", 
E2FSPROGS_VERSION
,

651 
E2FSPROGS_DATE
);

652 i‡(
¨gc
 && *
¨gv
)

653 
¥ogøm_«me
 = *
¨gv
;

654 
	`add_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

655 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "rsI")Ë!
EOF
)

656 
c
) {

658 
øw_Êag
++;

661 
s¸ambÀ_Êag
++;

664 
ö°Æl_Êag
++;

667 
	`ußge
();

669 i‡(
›töd
 !
¨gc
 - 2 )

670 
	`ußge
();

671 
devi˚_«me
 = 
¨gv
[
›töd
];

672 
image_‚
 = 
¨gv
[
›töd
+1];

674 i‡(
ö°Æl_Êag
) {

675 
	`ö°Æl_image
(
devi˚_«me
, 
image_‚
, 
øw_Êag
);

676 
	`exô
 (0);

679 
ªtvÆ
 = 
	`ext2fs_›í
 (
devi˚_«me
, 
›í_Êag
, 0, 0,

680 
unix_io_m™agî
, &
fs
);

681 i‡(
ªtvÆ
) {

682 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("whileÅryingÅo open %s"),

683 
devi˚_«me
);

684 
	`Âuts
(
	`_
("Couldn'àföd vÆid fûesy°em su≥rblock.\n"), 
°dout
);

685 
	`exô
(1);

688 i‡(
	`°rcmp
(
image_‚
, "-") == 0)

689 
fd
 = 1;

691 #ifde‡
HAVE_OPEN64


692 
fd
 = 
	`›í64
(
image_‚
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0600);

694 
fd
 = 
	`›í
(
image_‚
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0600);

696 i‡(
fd
 < 0) {

697 
	`com_îr
(
¥ogøm_«me
, 
î∫o
,

698 
	`_
("whûêåyögÅÿ›í %s"), 
¨gv
[
›töd
+1]);

699 
	`exô
(1);

703 i‡(
øw_Êag
)

704 
	`wrôe_øw_image_fûe
(
fs
, 
fd
, 
s¸ambÀ_Êag
);

706 
	`wrôe_image_fûe
(
fs
, 
fd
);

708 
	`ext2fs_˛o£
 (
fs
);

709 
	`ªmove_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

710 
	`exô
 (0);

711 
	}
}

	@e2initrd_helper.c

12 
	~<°dio.h
>

13 
	~<uni°d.h
>

14 #ifde‡
HAVE_STDLIB_H


15 
	~<°dlib.h
>

17 
	~<˘y≥.h
>

18 
	~<°rög.h
>

19 
	~<time.h
>

20 #ifde‡
HAVE_ERRNO_H


21 
	~<î∫o.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/°©.h
>

25 
	~<f˙é.h
>

26 
	~<utime.h
>

27 #ifde‡
HAVE_GETOPT_H


28 
	~<gë›t.h
>

30 
›töd
;

31 *
›èrg
;

34 
	~"ext2fs/ext2_fs.h
"

35 
	~"ext2fs/ext2fs.h
"

36 
	~"blkid/blkid.h
"

38 
	~"../vîsi⁄.h
"

39 
	~"∆s-íabÀ.h
"

41 c⁄° * 
	g¥ogøm_«me
 = "get_fstab";

42 * 
	gdevi˚_«me
;

43 
	g›í_Êag
;

44 
	groŸ_ty≥
;

45 
blkid_ˇche
 
	gˇche
 = 
NULL
;

47 
	smem_fûe
 {

48 *
	mbuf
;

49 
	msize
;

50 
	m±r
;

53 
	sfs_öfo
 {

54 *
	mdevi˚
;

55 *
	mmou¡±
;

56 *
	mty≥
;

57 *
	m›ts
;

58 
	m‰eq
;

59 
	m∑s¢o
;

60 
	mÊags
;

61 
fs_öfo
 *
	m√xt
;

64 
	$ußge
()

66 
	`Ârötf
(
°dîr
,

67 
	`_
("Ußge: %†-∏devi˚\n"), 
¥ogøm_«me
);

68 
	`exô
 (1);

69 
	}
}

71 
îrcode_t
 
	$gë_fûe
(
ext2_fûsys
 
fs
, c⁄° * 
fûíame
,

72 
mem_fûe
 *
ªt_fûe
)

74 
îrcode_t
 
ªtvÆ
;

75 *
buf
;

76 
ext2_fûe_t
 
e2_fûe
;

77 
gŸ
;

78 
ext2_öode
 
öode
;

79 
ext2_öo_t
 
öo
;

81 
ªt_fûe
->
buf
 = 0;

82 
ªt_fûe
->
size
 = 0;

83 
ªt_fûe
->
±r
 = 0;

85 
ªtvÆ
 = 
	`ext2fs_«mei
(
fs
, 
EXT2_ROOT_INO
, EXT2_ROOT_INO,

86 
fûíame
, &
öo
);

87 i‡(
ªtvÆ
)

88  
ªtvÆ
;

90 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

91 i‡(
ªtvÆ
)

92  
ªtvÆ
;

94 i‡(
öode
.
i_size_high
 || (öode.
i_size
 > 65536))

95  
EFBIG
;

97 
buf
 = 
	`mÆloc
(
öode
.
i_size
 + 1);

98 i‡(!
buf
)

99  
ENOMEM
;

100 
	`mem£t
(
buf
, 0, 
öode
.
i_size
+1);

102 
ªtvÆ
 = 
	`ext2fs_fûe_›í
(
fs
, 
öo
, 0, &
e2_fûe
);

103 i‡(
ªtvÆ
)

104  
ªtvÆ
;

106 
ªtvÆ
 = 
	`ext2fs_fûe_ªad
(
e2_fûe
, 
buf
, 
öode
.
i_size
, &
gŸ
);

107 i‡(
ªtvÆ
)

108 
îrout
;

110 
ªtvÆ
 = 
	`ext2fs_fûe_˛o£
(
e2_fûe
);

111 i‡(
ªtvÆ
)

112  
ªtvÆ
;

114 
ªt_fûe
->
buf
 = buf;

115 
ªt_fûe
->
size
 = (Ë
gŸ
;

117 
îrout
:

118 
	`ext2fs_fûe_˛o£
(
e2_fûe
);

119  
ªtvÆ
;

120 
	}
}

122 *
	$gë_löe
(
mem_fûe
 *
fûe
)

124 *
˝
, *
ªt
;

125 
s
 = 0;

127 
˝
 = 
fûe
->
buf
 + fûe->
±r
;

128 *
˝
 && *cp != '\n') {

129 
˝
++;

130 
s
++;

132 
ªt
 = 
	`mÆloc
(
s
+1);

133 i‡(!
ªt
)

135 
ªt
[
s
]=0;

136 
	`mem˝y
(
ªt
, 
fûe
->
buf
 + fûe->
±r
, 
s
);

137 *
˝
 && (*cp == '\n' || *cp == '\r')) {

138 
˝
++;

139 
s
++;

141 
fûe
->
±r
 +
s
;

142  
ªt
;

143 
	}
}

145 
	$mem_fûe_eof
(
mem_fûe
 *
fûe
)

147  (
fûe
->
±r
 >fûe->
size
);

148 
	}
}

153 *
	$°rög_c›y
(c⁄° *
s
)

155 *
ªt
;

157 i‡(!
s
)

159 
ªt
 = 
	`mÆloc
(
	`°æí
(
s
)+1);

160 i‡(
ªt
)

161 
	`°r˝y
(
ªt
, 
s
);

162  
ªt
;

163 
	}
}

165 *
	$skù_ovî_bœnk
(*
˝
)

167 *
˝
 && 
	`is•a˚
(*cp))

168 
˝
++;

169  
˝
;

170 
	}
}

172 *
	$skù_ovî_w‹d
(*
˝
)

174 *
˝
 && !
	`is•a˚
(*cp))

175 
˝
++;

176  
˝
;

177 
	}
}

179 *
	$∑r£_w‹d
(**
buf
)

181 *
w‹d
, *
√xt
;

183 
w‹d
 = *
buf
;

184 i‡(*
w‹d
 == 0)

187 
w‹d
 = 
	`skù_ovî_bœnk
(word);

188 
√xt
 = 
	`skù_ovî_w‹d
(
w‹d
);

189 i‡(*
√xt
)

190 *
√xt
++ = 0;

191 *
buf
 = 
√xt
;

192  
w‹d
;

193 
	}
}

195 
	$∑r£_esˇ≥
(*
w‹d
)

197 *
p
, *
q
;

198 
ac
, 
i
;

200 i‡(!
w‹d
)

203 
p
 = 
w‹d
, 
q
 = word; *p;Ö++, q++) {

204 *
q
 = *
p
;

205 i‡(*
p
 != '\\')

207 i‡(*++
p
 == 0)

209 i‡(*
p
 == 't') {

210 *
q
 = '\t';

213 i‡(*
p
 == 'n') {

214 *
q
 = '\n';

217 i‡(!
	`isdigô
(*
p
)) {

218 *
q
 = *
p
;

221 
ac
 = 0;

222 
i
 = 0; i < 3; i++, 
p
++) {

223 i‡(!
	`isdigô
(*
p
))

225 
ac
 = (a¯* 8Ë+ (*
p
 - '0');

227 *
q
 = 
ac
;

228 
p
--;

230 *
q
 = 0;

231 
	}
}

233 
	$∑r£_f°ab_löe
(*
löe
, 
fs_öfo
 *
fs
)

235 *
dev
, *
devi˚
, *
m¡≤t
, *
ty≥
, *
›ts
, *
‰eq
, *
∑s¢o
, *
˝
;

237 i‡((
˝
 = 
	`°rchr
(
löe
, '#')))

238 *
˝
 = 0;

239 
˝
 = 
löe
;

241 
devi˚
 = 
	`∑r£_w‹d
(&
˝
);

242 
m¡≤t
 = 
	`∑r£_w‹d
(&
˝
);

243 
ty≥
 = 
	`∑r£_w‹d
(&
˝
);

244 
›ts
 = 
	`∑r£_w‹d
(&
˝
);

245 
‰eq
 = 
	`∑r£_w‹d
(&
˝
);

246 
∑s¢o
 = 
	`∑r£_w‹d
(&
˝
);

248 i‡(!
devi˚
)

251 i‡(!
m¡≤t
 || !
ty≥
)

254 
	`∑r£_esˇ≥
(
devi˚
);

255 
	`∑r£_esˇ≥
(
m¡≤t
);

256 
	`∑r£_esˇ≥
(
ty≥
);

257 
	`∑r£_esˇ≥
(
›ts
);

258 
	`∑r£_esˇ≥
(
‰eq
);

259 
	`∑r£_esˇ≥
(
∑s¢o
);

261 
dev
 = 
	`blkid_gë_dev«me
(
ˇche
, 
devi˚
, 
NULL
);

262 i‡(
dev
)

263 
devi˚
 = 
dev
;

265 i‡(
	`°rchr
(
ty≥
, ','))

266 
ty≥
 = 0;

268 
fs
->
devi˚
 = 
	`°rög_c›y
(device);

269 
fs
->
mou¡±
 = 
	`°rög_c›y
(
m¡≤t
);

270 
fs
->
ty≥
 = 
	`°rög_c›y
(type);

271 
fs
->
›ts
 = 
	`°rög_c›y
(opts ? opts : "");

272 
fs
->
‰eq
 = fªq ? 
	`©oi
(freq) : -1;

273 
fs
->
∑s¢o
 =Öas¢ÿ? 
	`©oi
(passno) : -1;

274 
fs
->
Êags
 = 0;

275 
fs
->
√xt
 = 
NULL
;

277 
	`‰ì
(
dev
);

280 
	}
}

282 
	$‰ì_f°ab_löe
(
fs_öfo
 *
fs
)

284 i‡(
fs
->
devi˚
)

285 
fs
->
devi˚
 = 0;

286 i‡(
fs
->
mou¡±
)

287 
fs
->
mou¡±
 = 0;

288 i‡(
fs
->
ty≥
)

289 
fs
->
ty≥
 = 0;

290 i‡(
fs
->
›ts
)

291 
fs
->
›ts
 = 0;

292 
	`mem£t
(
fs
, 0, (
fs_öfo
));

293 
	}
}

296 
	$PRS
(
¨gc
, **
¨gv
)

298 
c
;

300 #ifde‡
ENABLE_NLS


301 
	`£éoˇÀ
(
LC_MESSAGES
, "");

302 
	`£éoˇÀ
(
LC_CTYPE
, "");

303 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

304 
	`ãxtdomaö
(
NLS_CAT_NAME
);

307 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "rv")Ë!
EOF
) {

308 
c
) {

310 
roŸ_ty≥
++;

314 
	`¥ötf
("%†%†(%s)\n", 
¥ogøm_«me
,

315 
E2FSPROGS_VERSION
, 
E2FSPROGS_DATE
);

318 
	`ußge
();

321 i‡(
›töd
 < 
¨gc
 - 1 || optind ==árgc)

322 
	`ußge
();

323 
devi˚_«me
 = 
	`blkid_gë_dev«me
(
NULL
, 
¨gv
[
›töd
], NULL);

324 i‡(!
devi˚_«me
) {

325 
	`com_îr
("tu√2fs", 0, 
	`_
("UnableÅoÑesolve '%s'"),

326 
¨gv
[
›töd
]);

327 
	`exô
(1);

329 
	}
}

331 
	$gë_roŸ_ty≥
(
ext2_fûsys
 
fs
)

333 
îrcode_t
 
ªtvÆ
;

334 
mem_fûe
 
fûe
;

335 *
buf
;

336 
fs_öfo
 fs_info;

337 
ªt
;

339 
ªtvÆ
 = 
	`gë_fûe
(
fs
, "/ëc/f°ab", &
fûe
);

341 !
	`mem_fûe_eof
(&
fûe
)) {

342 
buf
 = 
	`gë_löe
(&
fûe
);

343 i‡(!
buf
)

346 
ªt
 = 
	`∑r£_f°ab_löe
(
buf
, &
fs_öfo
);

347 i‡(
ªt
 < 0)

348 
√xt_löe
;

350 i‡(!
	`°rcmp
(
fs_öfo
.
mou¡±
, "/"))

351 
	`¥ötf
("%s\n", 
fs_öfo
.
ty≥
);

353 
	`‰ì_f°ab_löe
(&
fs_öfo
);

355 
√xt_löe
:

356 
	`‰ì
(
buf
);

358 
	}
}

361 
	$maö
 (
¨gc
, ** 
¨gv
)

363 
îrcode_t
 
ªtvÆ
;

364 
ext2_fûsys
 
fs
;

365 
io_m™agî
 
io_±r
;

367 
	`add_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

369 
	`blkid_gë_ˇche
(&
ˇche
, 
NULL
);

370 
	`PRS
(
¨gc
, 
¨gv
);

372 #ifde‡
CONFIG_TESTIO_DEBUG


373 i‡(
	`gëív
("TEST_IO_FLAGS") || getenv("TEST_IO_BLOCK")) {

374 
io_±r
 = 
ã°_io_m™agî
;

375 
ã°_io_backög_m™agî
 = 
unix_io_m™agî
;

378 
io_±r
 = 
unix_io_m™agî
;

379 
ªtvÆ
 = 
	`ext2fs_›í
 (
devi˚_«me
, 
›í_Êag
, 0, 0, 
io_±r
, &
fs
);

380 i‡(
ªtvÆ
)

381 
	`exô
(1);

383 i‡(
roŸ_ty≥
)

384 
	`gë_roŸ_ty≥
(
fs
);

386 
	`ªmove_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

387  (
	`ext2fs_˛o£
 (
fs
) ? 1 : 0);

388 
	}
}

	@e2label.c

14 
	~<°dio.h
>

15 
	~<°rög.h
>

16 
	~<f˙é.h
>

17 
	~<˘y≥.h
>

18 
	~<ãrmios.h
>

19 
	~<time.h
>

20 #ifde‡
HAVE_GETOPT_H


21 
	~<gë›t.h
>

23 *
›èrg
;

24 
›töd
;

26 #ifde‡
HAVE_UNISTD_H


27 
	~<uni°d.h
>

29 #ifde‡
HAVE_STDLIB_H


30 
	~<°dlib.h
>

32 #ifde‡
HAVE_ERRNO_H


33 
	~<î∫o.h
>

35 
	~"∆s-íabÀ.h
"

37 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

39 
	#VOLNAMSZ
 16

	)

41 
	sext2_su≥r_block
 {

42 
	ms_dummy0
[56];

43 
	ms_magic
[2];

44 
	ms_dummy1
[62];

45 
	ms_vﬁume_«me
[
VOLNAMSZ
];

46 
	ms_œ°_mou¡ed
[64];

47 
	ms_dummy2
[824];

48 } 
	gsb
;

50 
	$›í_e2fs
 (*
dev
, 
mode
)

52 
fd
;

54 
fd
 = 
	`›í
(
dev
, 
mode
);

55 i‡(
fd
 < 0) {

56 
	`≥º‹
(
dev
);

57 
	`Ârötf
 (
°dîr
, 
	`_
("e2œbñ: c™nŸ o≥¿%s\n"), 
dev
);

58 
	`exô
(1);

60 i‡(
	`l£ek
(
fd
, 1024, 
SEEK_SET
) != 1024) {

61 
	`≥º‹
(
dev
);

62 
	`Ârötf
 (
°dîr
, 
	`_
("e2label: cannot seekÅo superblock\n"));

63 
	`exô
(1);

65 i‡(
	`ªad
(
fd
, (*Ë&
sb
, (sb)) != (sb)) {

66 
	`≥º‹
(
dev
);

67 
	`Ârötf
 (
°dîr
, 
	`_
("e2label:ÉrrorÑeading superblock\n"));

68 
	`exô
(1);

70 i‡(
sb
.
s_magic
[0] + 256*sb.s_magic[1] !
EXT2_SUPER_MAGIC
) {

71 
	`Ârötf
 (
°dîr
, 
	`_
("e2label:ÇotánÉxt2 filesystem\n"));

72 
	`exô
(1);

75  
fd
;

76 
	}
}

78 
	$¥öt_œbñ
 (*
dev
)

80 
œbñ
[
VOLNAMSZ
+1];

82 
	`›í_e2fs
 (
dev
, 
O_RDONLY
);

83 
	`°∫˝y
(
œbñ
, 
sb
.
s_vﬁume_«me
, 
VOLNAMSZ
);

84 
œbñ
[
VOLNAMSZ
] = 0;

85 
	`¥ötf
("%s\n", 
œbñ
);

86 
	}
}

88 
	$ch™ge_œbñ
 (*
dev
, *
œbñ
)

90 
fd
;

92 
fd
 = 
	`›í_e2fs
(
dev
, 
O_RDWR
);

93 
	`mem£t
(
sb
.
s_vﬁume_«me
, 0, 
VOLNAMSZ
);

94 
	`°∫˝y
(
sb
.
s_vﬁume_«me
, 
œbñ
, 
VOLNAMSZ
);

95 i‡(
	`°æí
(
œbñ
Ë> 
VOLNAMSZ
)

96 
	`Ârötf
(
°dîr
, 
	`_
("Warning:ÜabelÅooÜong,Åruncating.\n"));

97 i‡(
	`l£ek
(
fd
, 1024, 
SEEK_SET
) != 1024) {

98 
	`≥º‹
(
dev
);

99 
	`Ârötf
 (
°dîr
, 
	`_
("e2label: cannot seekÅo superblockágain\n"));

100 
	`exô
(1);

102 i‡(
	`wrôe
(
fd
, (*Ë&
sb
, (sb)) != (sb)) {

103 
	`≥º‹
(
dev
);

104 
	`Ârötf
 (
°dîr
, 
	`_
("e2label:Érror writing superblock\n"));

105 
	`exô
(1);

107 
	}
}

109 
	$maö
 (
¨gc
, ** 
¨gv
)

111 i‡(
¨gc
 == 2)

112 
	`¥öt_œbñ
(
¨gv
[1]);

113 i‡(
¨gc
 == 3)

114 
	`ch™ge_œbñ
(
¨gv
[1],árgv[2]);

116 
	`Ârötf
(
°dîr
, 
	`_
("Usage:É2label device [newlabel]\n"));

117 
	`exô
(1);

120 
	}
}

	@e2undo.c

13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 #ifde‡
HAVE_GETOPT_H


16 
	~<gë›t.h
>

18 
	~<f˙é.h
>

19 #i‡
HAVE_ERRNO_H


20 
	~<î∫o.h
>

22 
	~"ext2fs/tdb.h
"

23 
	~"ext2fs/ext2fs.h
"

24 
	~"∆s-íabÀ.h
"

26 
	gmtime_key
[] = "filesystem MTIME";

27 
	guuid_key
[] = "filesystem UUID";

28 
	gblksize_key
[] = "filesystem BLKSIZE";

30 *
	g¥g_«me
;

32 
	$ußge
(*
¥g_«me
)

34 
	`Ârötf
(
°dîr
,

35 
	`_
("Ußge: %†<å™ß˘i⁄ fûe> <fûesy°em>\n"), 
¥g_«me
);

36 
	`exô
(1);

38 
	}
}

40 
	$check_fûesy°em
(
TDB_CONTEXT
 *
tdb
, 
io_ch™√l
 
ch™√l
)

42 
__u32
 
s_mtime
;

43 
__u8
 
s_uuid
[16];

44 
îrcode_t
 
ªtvÆ
;

45 
TDB_DATA
 
tdb_key
, 
tdb_d©a
;

46 
ext2_su≥r_block
 
su≥r
;

48 
	`io_ch™√l_£t_blksize
(
ch™√l
, 
SUPERBLOCK_OFFSET
);

49 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
ch™√l
, 1, -
SUPERBLOCK_SIZE
, &
su≥r
);

50 i‡(
ªtvÆ
) {

51 
	`com_îr
(
¥g_«me
,

52 
ªtvÆ
, 
	`_
("FailedÅoÑeadÅhe file system data \n"));

53  
ªtvÆ
;

56 
tdb_key
.
d±r
 = 
mtime_key
;

57 
tdb_key
.
dsize
 = (
mtime_key
);

58 
tdb_d©a
 = 
	`tdb_„tch
(
tdb
, 
tdb_key
);

59 i‡(!
tdb_d©a
.
d±r
) {

60 
ªtvÆ
 = 
EXT2_ET_TDB_SUCCESS
 + 
	`tdb_îr‹
(
tdb
);

61 
	`com_îr
(
¥g_«me
, 
ªtvÆ
,

62 
	`_
("FaûedÅdb_„tch %s\n"), 
	`tdb_îr‹°r
(
tdb
));

63  
ªtvÆ
;

66 
s_mtime
 = *(
__u32
 *)
tdb_d©a
.
d±r
;

67 i‡(
su≥r
.
s_mtime
 != s_mtime) {

69 
	`com_îr
(
¥g_«me
, 0,

70 
	`_
("The file system MountÅime didn't match %u\n"),

71 
s_mtime
);

77 
tdb_key
.
d±r
 = 
uuid_key
;

78 
tdb_key
.
dsize
 = (
uuid_key
);

79 
tdb_d©a
 = 
	`tdb_„tch
(
tdb
, 
tdb_key
);

80 i‡(!
tdb_d©a
.
d±r
) {

81 
ªtvÆ
 = 
EXT2_ET_TDB_SUCCESS
 + 
	`tdb_îr‹
(
tdb
);

82 
	`com_îr
(
¥g_«me
, 
ªtvÆ
,

83 
	`_
("FaûedÅdb_„tch %s\n"), 
	`tdb_îr‹°r
(
tdb
));

84  
ªtvÆ
;

86 
	`mem˝y
(
s_uuid
, 
tdb_d©a
.
d±r
, (s_uuid));

87 i‡(
	`memcmp
(
s_uuid
, 
su≥r
.s_uuid, (s_uuid))) {

88 
	`com_îr
(
¥g_«me
, 0,

89 
	`_
("The file system UUID didn't match \n"));

94 
	}
}

96 
	$£t_blk_size
(
TDB_CONTEXT
 *
tdb
, 
io_ch™√l
 
ch™√l
)

98 
block_size
;

99 
îrcode_t
 
ªtvÆ
;

100 
TDB_DATA
 
tdb_key
, 
tdb_d©a
;

102 
tdb_key
.
d±r
 = 
blksize_key
;

103 
tdb_key
.
dsize
 = (
blksize_key
);

104 
tdb_d©a
 = 
	`tdb_„tch
(
tdb
, 
tdb_key
);

105 i‡(!
tdb_d©a
.
d±r
) {

106 
ªtvÆ
 = 
EXT2_ET_TDB_SUCCESS
 + 
	`tdb_îr‹
(
tdb
);

107 
	`com_îr
(
¥g_«me
, 
ªtvÆ
,

108 
	`_
("FaûedÅdb_„tch %s\n"), 
	`tdb_îr‹°r
(
tdb
));

109  
ªtvÆ
;

112 
block_size
 = *(*)
tdb_d©a
.
d±r
;

113 #ifde‡
DEBUG


114 
	`¥ötf
("Block sizê%d\n", 
block_size
);

116 
	`io_ch™√l_£t_blksize
(
ch™√l
, 
block_size
);

119 
	}
}

121 
	$maö
(
¨gc
, *
¨gv
[])

123 
c
,
f‹˚
 = 0;

124 
TDB_CONTEXT
 *
tdb
;

125 
TDB_DATA
 
key
, 
d©a
;

126 
io_ch™√l
 
ch™√l
;

127 
îrcode_t
 
ªtvÆ
;

128 
mou¡_Êags
;

129 
blk_num
;

130 *
devi˚_«me
, *
tdb_fûe
;

131 
io_m™agî
 
m™agî
 = 
unix_io_m™agî
;

133 #ifde‡
ENABLE_NLS


134 
	`£éoˇÀ
(
LC_MESSAGES
, "");

135 
	`£éoˇÀ
(
LC_CTYPE
, "");

136 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

137 
	`ãxtdomaö
(
NLS_CAT_NAME
);

139 
	`add_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

141 
¥g_«me
 = 
¨gv
[0];

142 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f")Ë!
EOF
) {

143 
c
) {

145 
f‹˚
 = 1;

148 
	`ußge
(
¥g_«me
);

152 i‡(
¨gc
 !
›töd
+2)

153 
	`ußge
(
¥g_«me
);

155 
tdb_fûe
 = 
¨gv
[
›töd
];

156 
devi˚_«me
 = 
¨gv
[
›töd
+1];

158 
tdb
 = 
	`tdb_›í
(
tdb_fûe
, 0, 0, 
O_RDONLY
, 0600);

160 i‡(!
tdb
) {

161 
	`com_îr
(
¥g_«me
, 
î∫o
,

162 
	`_
("FaûedÅdb_›í %s\n"), 
tdb_fûe
);

163 
	`exô
(1);

166 
ªtvÆ
 = 
	`ext2fs_check_if_mou¡ed
(
devi˚_«me
, &
mou¡_Êags
);

167 i‡(
ªtvÆ
) {

168 
	`com_îr
(
¥g_«me
, 
ªtvÆ
, 
	`_
("Error while determining whether "

169 "%†i†mou¡ed.\n"), 
devi˚_«me
);

170 
	`exô
(1);

173 i‡(
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) {

174 
	`com_îr
(
¥g_«me
, 
ªtvÆ
, 
	`_
("e2undo should only beÑun on "

176 
	`exô
(1);

179 
ªtvÆ
 = 
m™agî
->
	`›í
(
devi˚_«me
,

180 
IO_FLAG_EXCLUSIVE
 | 
IO_FLAG_RW
, &
ch™√l
);

181 i‡(
ªtvÆ
) {

182 
	`com_îr
(
¥g_«me
, 
ªtvÆ
,

183 
	`_
("FaûedÅÿ›í %s\n"), 
devi˚_«me
);

184 
	`exô
(1);

187 i‡(!
f‹˚
 && 
	`check_fûesy°em
(
tdb
, 
ch™√l
)) {

188 
	`exô
(1);

191 i‡(
	`£t_blk_size
(
tdb
, 
ch™√l
)) {

192 
	`exô
(1);

195 
key
 = 
	`tdb_fú°key
(
tdb
); key.
d±r
; key = 
	`tdb_√xtkey
(tdb, key)) {

196 i‡(!
	`°rcmp
((*Ë
key
.
d±r
, (*Ë
mtime_key
) ||

197 !
	`°rcmp
((*Ë
key
.
d±r
, (*Ë
uuid_key
) ||

198 !
	`°rcmp
((*Ë
key
.
d±r
, (*Ë
blksize_key
)) {

202 
d©a
 = 
	`tdb_„tch
(
tdb
, 
key
);

203 i‡(!
d©a
.
d±r
) {

204 
	`com_îr
(
¥g_«me
, 0,

205 
	`_
("FaûedÅdb_„tch %s\n"), 
	`tdb_îr‹°r
(
tdb
));

206 
	`exô
(1);

208 
blk_num
 = *(*)
key
.
d±r
;

209 
	`¥ötf
(
	`_
("ReplayedÅransaction of size %zdátÜocation %ld\n"),

210 
d©a
.
dsize
, 
blk_num
);

211 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
ch™√l
, 
blk_num
,

212 -
d©a
.
dsize
, d©a.
d±r
);

213 i‡(
ªtvÆ
 == -1) {

214 
	`com_îr
(
¥g_«me
, 
ªtvÆ
,

215 
	`_
("Failed write %s\n"),

216 
	`°ªº‹
(
î∫o
));

217 
	`exô
(1);

220 
	`io_ch™√l_˛o£
(
ch™√l
);

221 
	`tdb_˛o£
(
tdb
);

224 
	}
}

	@e4receive.c

12 
	#_LARGEFILE_SOURCE


	)

13 
	#_LARGEFILE64_SOURCE


	)

14 
	#_FILE_OFFSET_BITS
 64

	)

16 
	~<f˙é.h
>

17 
	~<gΩ.h
>

18 
	~<pwd.h
>

19 
	~<°dio.h
>

20 #ifde‡
HAVE_STDLIB_H


21 
	~<°dlib.h
>

23 #ifde‡
HAVE_GETOPT_H


24 
	~<gë›t.h
>

26 *
›èrg
;

27 
›töd
;

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<î∫o.h
>

33 
	~<sys/°©.h
>

34 
	~<sys/ty≥s.h
>

36 
	~"ext2fs/ext2_fs.h
"

37 
	~"ext2fs/ext2fs.h
"

38 
	~"ë/com_îr.h
"

39 
	~"uuid/uuid.h
"

40 
	~"e2p/e2p.h
"

41 
	~"ext2fs/e2image.h
"

42 
	~"../vîsi⁄.h
"

43 
	~"∆s-íabÀ.h
"

45 
	#MAX
 150

	)

46 
	#MNT
 "/m¡/sour˚"

	)

47 
	#SNAPSHOT_SHIFT
 0

	)

49 
	#CHUNK_BLOCK_SIZE
 4096

	)

50 
	#CHUNK_BLOCKS_COUNT
 
CHUNK_BLOCK_SIZE
/(
blk_t
)

	)

52 c⁄° * 
	g¥ogøm_«me
 = "e4receive";

54 
	$ußge
()

56 
	`Ârötf
(
°dîr
, 
	`_
("Usage: %s <target_device>\n"),

57 
¥ogøm_«me
);

58 
	`exô
 (1);

59 
	}
}

62 
	$check_zîo_block
(*
buf
, 
blocksize
)

64 *
˝
 = 
buf
;

65 
À·
 = 
blocksize
;

67 
À·
 > 0) {

68 i‡(*
˝
++)

70 
À·
--;

73 
	}
}

77 
	$¥öt_ouçut_èbÀ
(* 
buff
)

79 
i
;

80 
f
=0;

81 
ªt
;

82 
blk_t
 *
èrgë_off
;

83 
blk_t
 
blk
=0;

84 
d©a1
[
CHUNK_BLOCK_SIZE
];

85 
	`mem£t
(
d©a1
,0,
CHUNK_BLOCK_SIZE
);

86 
i
=0; i<((
CHUNK_BLOCK_SIZE
)/(
blk_t
)); i++)

88 
èrgë_off
=(
blk_t
*)(
buff
 + 
i
*((blk_t)));

89 
blk
=*
èrgë_off
;

91 
	`Ârötf
(
°dout
,"\n%d\t%d\à%u\t",
f
++,
i
,
blk
);

94 
	}
}

100 
	$ª˚ive_fuŒ_image
(
fd
)

102 
blk_t
 *
èrgë
;

103 
fö
=0;

104 *
£˘‹
,*
buff
, 
d©a
[
CHUNK_BLOCK_SIZE
], *
ãrmö©e
;

105 
îrcode_t
 
ªtvÆ
;

106 
i
;

107 
ext2_fûsys
 
fs
;

108 
ã°
[
MAX
]="0";

109 
off_t
 
off£t
;

110 
ªt
;

112 
buff
 = 
	`mÆloc
(
CHUNK_BLOCK_SIZE
*(
CHUNK_BLOCKS_COUNT
+1));

113 i‡(!
buff
) {

114 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

115 
	`exô
(1);

117 
£˘‹
 = 
	`mÆloc
(
CHUNK_BLOCK_SIZE
);

118 i‡(!
£˘‹
) {

119 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

120 
	`exô
(1);

122 
ãrmö©e
 = 
	`mÆloc
(
CHUNK_BLOCK_SIZE
*(
CHUNK_BLOCKS_COUNT
+1));

123 i‡(!
ãrmö©e
) {

124 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

125 
	`exô
(1);

127 
	`mem£t
(
ãrmö©e
, -1, 
CHUNK_BLOCK_SIZE
*(
CHUNK_BLOCKS_COUNT
+1));

128 
	`mem£t
(
£˘‹
, 0, 
CHUNK_BLOCK_SIZE
);

132 
	`mem£t
(
buff
, 0, 
CHUNK_BLOCK_SIZE
*(
CHUNK_BLOCKS_COUNT
+1));

134 
i
=0;i<
CHUNK_BLOCKS_COUNT
+1;i++)

136 
ªt
=
	`ªad
(
fö
, 
£˘‹
, 
CHUNK_BLOCK_SIZE
);

137 if(
ªt
<0)

139 
ªtvÆ
=
î∫o
;

140 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

141 
	`exô
(1);

143 
	`mem˝y
(
buff
 + 
i
*
CHUNK_BLOCK_SIZE
, 
£˘‹
, CHUNK_BLOCK_SIZE);

146 if(!
	`°rcmp
(
buff
,
ãrmö©e
))

148 
i
=0; i<
CHUNK_BLOCKS_COUNT
; i++)

149 { 
èrgë
=(
blk_t
 *)(
buff
 + (
i
*(blk_t)));

150 
off£t
=()(* 
èrgë
);

151 
	`mem˝y
(
d©a
, 
buff
 + 
CHUNK_BLOCK_SIZE
*(
i
+1), CHUNK_BLOCK_SIZE);

152 #ifde‡
HAVE_LSEEK64


153 i‡(
	`l£ek64
(
fd
, 
off£t
, 
SEEK_CUR
) < 0){

154 
	`≥º‹
("lseek");

157 i‡(
	`l£ek
(
fd
,
off£t
, 
SEEK_CUR
) < 0){

158 
	`≥º‹
("lseek");

161 
ªt

	`wrôe
(
fd
, 
d©a
, 
CHUNK_BLOCK_SIZE
);

162 if(
ªt
<0)

164 
ªtvÆ
=
î∫o
;

165 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

166 
	`exô
(1);

172 
	`‰ì
(
£˘‹
);

173 
	`‰ì
(
buff
);

174 
	`‰ì
(
ãrmö©e
);

176 
	}
}

178 
	$check
(
ext2_fûsys
 
fs
, 
__u32
 
id
)

180 
i
;

181 if((
fs
->
su≥r
->
s_Êags
 & 
EXT2_FLAGS_IS_SNAPSHOT
)==1)

182 { 
	`Ârötf
(
°dîr
,"\nError: Destination isÇotá Snapshot\n");

185 if(
fs
->
su≥r
->
s_¢≠shŸ_id
!=
id
)

186 { 
	`Ârötf
(
°dîr
,"\nError: Destination Snapshot state doesnot match withÅhe specified state.\n");

190 
	}
}

192 
	$ª˚ive_ö¸emíèl
(*
devi˚
)

194 *
ªad_d©a
;

195 
__u64
 
d©a
,
Àngth
,
logiˇl_off
;

196 
exã¡s
;

197 
i
,
fd
;

198 *
buf
;

199 
blk_t
 
blk
;

200 
__u32
 *
m≠≥d
,
m≠≥d_buf
,
id_buf
;

201 
ªt
;

202 
›í_Êag
=0;

203 
îrcode_t
 
ªtvÆ
;

204 
ext2_fûsys
 
fs
;

207 
ªtvÆ
 = 
	`ext2fs_›í
 (
devi˚
, 
EXT2_FLAG_RW
, 0, 0,

208 
unix_io_m™agî
, &
fs
);

209 i‡(
ªtvÆ
) {

210 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("whileÅryingÅo open %s"),

211 
devi˚
);

212 
	`Âuts
(
	`_
("Couldn't find valid filesystem superblock.\n"),

213 
°dout
);

214 
	`exô
(1);

217 
fd
 = 
	`›í
(
devi˚
, 
O_WRONLY
, 0600);

218 if(
fd
<0)

219 
	`Ârötf
(
°dîr
,"Error openingÅarget device");

221 
ªad_d©a
=
	`mÆloc
((
d©a
));

222 
ªad_d©a
=
	`mÆloc
((
d©a
));

224 
ªt
=
	`ªad
(0,
ªad_d©a
,(
id_buf
));

225 
id_buf
=*(
__u32
 *)
ªad_d©a
;

226 if(
	`check
(
fs
, 
id_buf
)==0)

227 
	`exô
(1);

229 
ªt
=
	`ªad
(0,
ªad_d©a
,(
m≠≥d_buf
));

230 
m≠≥d_buf
=*(
__u32
 *)
ªad_d©a
;

233 
exã¡s
=
m≠≥d_buf
;

234 
i
=0;i<
exã¡s
;i++)

237 
ªt
=
	`ªad
(0,
ªad_d©a
,(
d©a
));

238 
logiˇl_off
=*(
__u64
*)
ªad_d©a
;

241 
ªt
=
	`ªad
(0,
ªad_d©a
,(
d©a
));

242 
Àngth
=*(
__u64
*)
ªad_d©a
;

244 
buf
 = (*)
	`mÆloc
(
Àngth
);

245 
ªt
=
	`ªad
(0,
buf
,
Àngth
);

248 
	`l£ek
(
fd
, 
logiˇl_off
 - 
SNAPSHOT_SHIFT
, 
SEEK_SET
);

249 
ªt
=
	`wrôe
(
fd
, 
buf
, 
Àngth
);

250 
	`‰ì
(
buf
);

253 
	`˛o£
(
fd
);

269 
buf
=
	`mÆloc
(
fs
->
blocksize
);

272 
ªt
=
	`ªad
(0, 
ªad_d©a
, (
blk_t
));

273 
blk
=*(
blk_t
 *)
ªad_d©a
;

274 if(
blk
==-1)

276 
ªt
=
	`ªad
(0, 
buf
, 
fs
->
blocksize
);

278 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
, 1, 
buf
);

279 i‡(
ªtvÆ
) {

280 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

281 "îr‹Ñódög block %u", 
blk
);

286 
	`‰ì
(
buf
);

287 
	`ext2fs_˛o£
 (
fs
);

288 
	}
}

290 
	$maö
 (
¨gc
, ** 
¨gv
)

292 
îrcode_t
 
ªtvÆ
;

293 
ext2_fûsys
 
fs
;

294 
devi˚_«me
[
MAX
];

295 
comm™d
[
MAX
];

296 
ãmp
[
CHUNK_BLOCK_SIZE
];

297 
fd
=0,
ªt
;

298 
off_t
 
block_cou¡
,
block_size
;

299 
ö¸emíèl_Êag
=0;

300 *
vÆues
, 
c
;

301 
vÆues
=
	`mÆloc
((
off_t
));

302 
	`Ârötf
 (
°dîr
, "e4ª˚ivê%†(%s)", 
E2FSPROGS_VERSION
,

303 
E2FSPROGS_DATE
);

305 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "i")Ë!
EOF
)

306 
c
) {

308 
ö¸emíèl_Êag
++;

312 
	`ußge
();

314 i‡(
¨gc
 !
›töd
 + 1 )

315 
	`ußge
();

318 
	`°r˝y
(
devi˚_«me
 ,
¨gv
[
›töd
]);

321 
ªt
=
	`ªad
(0, 
ãmp
, 
CHUNK_BLOCK_SIZE
);

322 if(
ªt
<0)

324 
ªtvÆ
=
î∫o
;

325 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

326 
	`exô
(1);

329 if(!
ö¸emíèl_Êag
){

331 #ifde‡
HAVE_OPEN64


332 
fd
 = 
	`›í64
(
devi˚_«me
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0600);

334 
fd
 = 
	`›í
(
devi˚_«me
, 
O_CREAT
|
O_TRUNC
|
O_WRONLY
, 0600);

336 i‡(
fd
 < 0) {

337 
	`com_îr
(
¥ogøm_«me
, 
î∫o
,

338 
	`_
(" whûêåyögÅÿ›í %s"), 
devi˚_«me
);

339 
	`exô
(1);

344 
ªt
=
	`ªad
(0,
vÆues
,(
off_t
));

345 if(
ªt
<0)

347 
ªtvÆ
=
î∫o
;

348 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

349 
	`exô
(1);

351 
block_cou¡
=*(
off_t
 *)
vÆues
;

353 
ªt
=
	`ªad
(0,
vÆues
,(
off_t
));

354 if(
ªt
<0)

356 
ªtvÆ
=
î∫o
;

357 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

358 
	`exô
(1);

360 
block_size
=*(
off_t
 *)
vÆues
;

361 
	`ª˚ive_fuŒ_image
(
fd
);

362 #ifde‡
HAVE_OPEN64


363 
ªt
=
	`·runˇã64
(
fd
,
block_cou¡
*
block_size
);

365 
ªt
=
	`·runˇã
(
fd
,
block_cou¡
*
block_size
);

367 
	`˛o£
(
fd
);

368 
	`¥ötf
("\nSuccess: Full Backup completed\n\n");

373 
ªt
=
	`ªad
(0, 
ãmp
, 
CHUNK_BLOCK_SIZE
);

374 if(
ªt
<0)

376 
ªtvÆ
=
î∫o
;

377 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

378 
	`exô
(1);

382 
	`ª˚ive_ö¸emíèl
(
devi˚_«me
);

383 
	`¥ötf
("\nSuccess: Incremental Backup completed\n\n");

387 
	`exô
 (0);

388 
	}
}

	@e4send.c

12 
	#_LARGEFILE_SOURCE


	)

13 
	#_LARGEFILE64_SOURCE


	)

14 
	#_FILE_OFFSET_BITS
 64

	)

16 
	~<f˙é.h
>

17 
	~<gΩ.h
>

18 
	~<pwd.h
>

19 
	~<°dio.h
>

20 #ifde‡
HAVE_STDLIB_H


21 
	~<°dlib.h
>

23 #ifde‡
HAVE_GETOPT_H


24 
	~<gë›t.h
>

26 *
›èrg
;

27 
›töd
;

29 
	~<°rög.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<î∫o.h
>

33 
	~<sys/°©.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/io˘l.h
>

36 
	~<löux/fõm≠.h
>

37 
	~<löux/fs.h
>

39 
	~"ext2fs/ext2_fs.h
"

40 
	~"ext2fs/ext2fs.h
"

41 
	~"ë/com_îr.h
"

42 
	~"uuid/uuid.h
"

43 
	~"e2p/e2p.h
"

44 
	~"ext2fs/e2image.h
"

45 
	~"../vîsi⁄.h
"

46 
	~"∆s-íabÀ.h
"

48 
	#MAX
 150

	)

49 
	#MNT
 "/m¡/sour˚"

	)

50 
	#SNAPSHOT_SHIFT
 0

	)

52 
	#CHUNK_BLOCK_SIZE
 4096

	)

53 
	#CHUNK_BLOCKS_COUNT
 
CHUNK_BLOCK_SIZE
/(
blk_t
)

	)

54 
	#CHUNK_SIZE
 
CHUNK_BLOCK_SIZE
*(
CHUNK_BLOCKS_COUNT
 + 1)

	)

56 
	#BLOCK_GROUP_OFFSET
(
fs
Ë
	`EXT2_BLOCKS_PER_GROUP
(fs->
su≥r
)*fs->
blocksize


	)

57 c⁄° * 
	g¥ogøm_«me
 = "e4send";

59 
	$ußge
()

61 
	`Ârötf
(
°dîr
,"Ußge:\¿%†devi˚@¢≠shŸ_«mê\t\t\t\à : FuŒ backu∞tÿªmŸêdevi˚\¿%†-ò devi˚@¢≠shŸ2 devi˚@¢≠shŸ1 : In¸emíè»backu∞\n\t\t\t\t\t\t\à Síd dñè†ovî s«pshŸ 2Åÿ¢≠shŸ1 \n\n", 
¥ogøm_«me
,program_name);

62 
	`exô
 (1);

63 
	}
}

67 
	$check_zîo_block
(*
buf
, 
blocksize
)

69 *
˝
 = 
buf
;

70 
À·
 = 
blocksize
;

72 
À·
 > 0) {

73 i‡(*
˝
++)

75 
À·
--;

78 
	}
}

83 
	$gë_mou¡_poöt
(*
devi˚
, *
mou¡_poöt
)

85 
FILE
 *
Â
;

86 *
löe
=
NULL
;

87 *
èrgë
=
NULL
,*
ãmp
;

88 
size_t
 
Àn
 =0;

89 
îrcode_t
 
îr
;

91 
Â
=
	`f›í
("/proc/mounts","r");

92 i‡(!
Â
) {

93 
	`com_îr
(
¥ogøm_«me
, 
î∫o
,

94 
	`_
("whileÅryingÅo open /proc/mounts"));

95 
	`exô
(1);

97 
èrgë
==
NULL
 && 
	`gëlöe
(&
löe
, &
Àn
, 
Â
)!=-1)

98 
èrgë
=
	`°r°r
(
löe
, 
devi˚
);

99 if(
èrgë
){

100 
èrgë
+=
	`°æí
(
devi˚
)+1;

101 
ãmp
=
	`°rchr
(
èrgë
,' ');

102 *
ãmp
=0;

103 
	`°r˝y
(
mou¡_poöt
,
èrgë
);

106 if(
	`mkdú
(
MNT
,
S_IRWXU
 | 
S_IRWXG
 | 
S_IROTH
 | 
S_IXOTH
) != 0) {

107 if(
î∫o
!=
EEXIST
){

108 
	`com_îr
(
¥ogøm_«me
, 
î∫o
,

109 
	`_
("whileÅryingÅo create /mnt/source"));

110 
	`exô
(1);

114 
	`°r˝y
(
mou¡_poöt
,
MNT
);

115 if(
	`mou¡
(
devi˚
, 
mou¡_poöt
, "ext4dev", 0, 
NULL
)){

116 
	`com_îr
(
¥ogøm_«me
, 
î∫o
,

117 
	`_
("whileÅryingÅo mount device"));

118 
	`exô
(1);

121 
	`f˛o£
(
Â
);

123 
	}
}

127 
	$¥öt_ouçut_èbÀ
(* 
buff
)

129 
i
=0;

130 
f
=0;

131 
ªt
;

132 
blk_t
 *
èrgë_off
;

133 
blk_t
 
blk
=0;

134 
d©a1
[
CHUNK_BLOCK_SIZE
];

135 
	`mem£t
(
d©a1
,0,
CHUNK_BLOCK_SIZE
);

136 ; 
i
<((
CHUNK_BLOCK_SIZE
)/(
blk_t
)); i++)

138 
èrgë_off
=(
blk_t
*)(
buff
 + 
i
*((blk_t)));

139 
blk
=*
èrgë_off
;

141 
	`Ârötf
(
°dout
,"\n%d\t%d\à%u\t",
f
++,
i
,
blk
);

144 
	}
}

153 
	$wrôe_fuŒ_image
(
ext2_fûsys
 
fs
)

155 
blk_t
 
blk
;

156 
group
 = 0;

157 
blk_t
 
blocks
 = 0;

158 
bôm≠
;

159 *
buf
;

160 
•¨£
 = 0;

161 
îrcode_t
 
ªtvÆ
;

162 
blk_t
 
off£t
=0;

163 
cou¡
;

164 
fout
=1;

165 *
ouçut_buf
,*
blk_buf
;

168 
buf
 = 
	`mÆloc
(
CHUNK_BLOCK_SIZE
);

169 i‡(!
buf
) {

170 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

171 
	`exô
(1);

173 
ouçut_buf
 = 
	`mÆloc
(
CHUNK_SIZE
);

174 i‡(!
ouçut_buf
) {

175 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

176 
	`exô
(1);

178 
f
=0;

179 
blk
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

180 
blk
 < (
fs
->
su≥r
->
s_blocks_cou¡
); blk++) {

182 if(
fs
->
group_desc
[
group
].
bg_Êags
 & 
EXT2_BG_BLOCK_UNINIT
){

183 
group
++;

184 
blk
+=
	`BLOCK_GROUP_OFFSET
(
fs
);

185 
•¨£
+=
	`BLOCK_GROUP_OFFSET
(
fs
);

189 
bôm≠
 = 
	`ext2fs_Á°_ã°_block_bôm≠
(
fs
->
block_m≠
, 
blk
);

190 if(
bôm≠
) {

191 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
, 1, 
buf
);

192 i‡(
ªtvÆ
) {

193 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

194 "îr‹Ñódög block %u", 
blk
);

197 i‡(!
	`check_zîo_block
(
buf
, 
fs
->
blocksize
)){

198 
blk_buf
=(*Ë&
•¨£
;

200 
	`mem˝y
(
ouçut_buf
 + (
blk_t
)*(
off£t
), 
blk_buf
, (blk_t));

201 
•¨£
=0;

203 
	`mem˝y
(
ouçut_buf
 + 
CHUNK_BLOCK_SIZE
*(
off£t
+1), 
buf
, CHUNK_BLOCK_SIZE);

204 
off£t
++;

205 if(
off£t
 =
CHUNK_BLOCKS_COUNT
){

208 
cou¡
=
	`wrôe
(
fout
, 
ouçut_buf
, 
CHUNK_SIZE
);

209 if(
cou¡
<0)

211 
ªtvÆ
=
î∫o
;

212 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

213 
	`exô
(1);

215 
off£t
=0;

221 
•¨£
+=
fs
->
blocksize
;

224 
•¨£
+=
fs
->
blocksize
;

227 if(
off£t
<
CHUNK_BLOCKS_COUNT
)

228 ;
off£t
<
CHUNK_BLOCKS_COUNT
;offset++)

229 { 
	`mem˝y
(
ouçut_buf
 + (
blk_t
)*(
off£t
), output_buf, (blk_t));

230 
	`mem˝y
(
ouçut_buf
 + 
CHUNK_BLOCK_SIZE
*(
off£t
+1), output_buf + CHUNK_BLOCK_SIZE, CHUNK_BLOCK_SIZE);

232 
cou¡
=
	`wrôe
(
fout
, 
ouçut_buf
, 
CHUNK_SIZE
);

234 
	`mem£t
(
ouçut_buf
, -1, 
CHUNK_SIZE
);

235 
cou¡
=
	`wrôe
(
fout
, 
ouçut_buf
, 
CHUNK_SIZE
);

236 if(
cou¡
<0)

238 
ªtvÆ
=
î∫o
;

239 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

240 
	`exô
(1);

242 
cou¡
=
	`wrôe
(
fout
, 
ouçut_buf
, 
CHUNK_SIZE
);

243 if(
cou¡
<0)

245 
ªtvÆ
=
î∫o
;

246 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
, "error writing chunk");

247 
	`exô
(1);

249 
	`‰ì
(
ouçut_buf
);

250 
	`‰ì
(
buf
);

251 
	}
}

258 
fõm≠
 *
	$ªad_fõm≠
(
fd
)

260 
fõm≠
 *fiemap;

261 
exã¡s_size
;

262 
£ek
;

264 i‡((
fõm≠
 = (fõm≠*)
	`mÆloc
((fõm≠))Ë=
NULL
) {

265 
	`Ârötf
(
°dîr
, "Out of memoryállocating fiemap\n");

266  
NULL
;

268 
	`mem£t
(
fõm≠
, 0, (fiemap));

270 
fõm≠
->
fm_°¨t
 = 0;

271 
fõm≠
->
fm_Àngth
 = ~0;

272 
fõm≠
->
fm_Êags
 = 0;

273 
fõm≠
->
fm_exã¡_cou¡
 = 0;

274 
fõm≠
->
fm_m≠≥d_exã¡s
 = 0;

276 i‡(
	`io˘l
(
fd
, 
FS_IOC_FIEMAP
, 
fõm≠
) < 0) {

277 
	`Ârötf
(
°dîr
, "fiemap ioctl() failed\n");

278  
NULL
;

282 
exã¡s_size
 = (
fõm≠_exã¡
) *

283 (
fõm≠
->
fm_m≠≥d_exã¡s
);

285 i‡((
fõm≠
 = (fõm≠*)
	`ªÆloc
(fiemap,(fiemap) +

286 
exã¡s_size
)Ë=
NULL
) {

287 
	`Ârötf
(
°dîr
, "Out of memoryállocating fiemap\n");

288  
NULL
;

291 
	`mem£t
(
fõm≠
->
fm_exã¡s
, 0, 
exã¡s_size
);

292 
fõm≠
->
fm_exã¡_cou¡
 = fõm≠->
fm_m≠≥d_exã¡s
;

293 
fõm≠
->
fm_m≠≥d_exã¡s
 = 0;

295 i‡(
	`io˘l
(
fd
, 
FS_IOC_FIEMAP
, 
fõm≠
) < 0) {

296 
	`Ârötf
(
°dîr
, "fiemap ioctl() failed\n");

297  
NULL
;

300  
fõm≠
;

301 
	}
}

309 
	$dump_fõm≠
(
fõm≠
 *
fõm≠2
, 
¢≠shŸ_fûe
, 
disk_image
)

311 
i
,
j
,
k
;

312 *
buf
;

313 
fuŒ
=0;

314 
off£t
=0;

315 
__u64
 
m≠≥d
=0;

316 
exã¡s
[(
fõm≠2
->
fm_m≠≥d_exã¡s
)];

317 
ªt
;

319 
i
=0;i<
fõm≠2
->
fm_m≠≥d_exã¡s
;i++) {

320 if(
fõm≠2
->
fm_exã¡s
[
i
].
„_logiˇl
 - 
SNAPSHOT_SHIFT
 !=

321 
fõm≠2
->
fm_exã¡s
[
i
].
„_physiˇl
) {

322 
m≠≥d
++;

327 
ªt
=
	`wrôe
(1,(*)&
m≠≥d
,(
fõm≠2
->
fm_m≠≥d_exã¡s
));

329 
i
=0;i<
fõm≠2
->
fm_m≠≥d_exã¡s
;i++) {

330 if(
fõm≠2
->
fm_exã¡s
[
i
].
„_logiˇl
 - 
SNAPSHOT_SHIFT
 !=

331 
fõm≠2
->
fm_exã¡s
[
i
].
„_physiˇl
) {

332 
buf
 = (*)
	`mÆloc
(
fõm≠2
->
fm_exã¡s
[
i
].
„_Àngth
);

335 
	`l£ek
(
¢≠shŸ_fûe
, 
fõm≠2
->
fm_exã¡s
[
i
].
„_logiˇl
 - 
SNAPSHOT_SHIFT
, 
SEEK_SET
);

336 
ªt
=
	`ªad
(
¢≠shŸ_fûe
, 
buf
, 
fõm≠2
->
fm_exã¡s
[
i
].
„_Àngth
);

337 
ªt
=
	`wrôe
(1, &
fõm≠2
->
fm_exã¡s
[
i
].
„_logiˇl
 - 
SNAPSHOT_SHIFT
, (fiemap2->fm_extents[i].fe_logical));

338 
ªt
=
	`wrôe
(1, &
fõm≠2
->
fm_exã¡s
[
i
].
„_Àngth
, (fiemap2->fm_extents[i].fe_length));

339 
ªt
=
	`wrôe
(1, 
buf
, 
fõm≠2
->
fm_exã¡s
[
i
].
„_Àngth
);

345 
	}
}

351 
	$wrôe_ö¸emíèl
(
ext2_fûsys
 
fs1
,Éxt2_fûsy†
fs2
)

353 
blk_t
 
blk
;

354 
group
 = 0;

355 
blk_t
 
blocks
 = 0;

356 
bôm≠1
,
bôm≠2
;

357 *
buf
,*
zîo_buf
;

358 
off_t
 
•¨£
 = 0;

359 
îrcode_t
 
ªtvÆ
;

360 
blk_t
 
off£t
=0;

361 
cou¡
;

362 *
ouçut_buf
,*
blk_buf
;

363 
ªt
;

365 
buf
 = 
	`mÆloc
(
fs1
->
blocksize
);

366 i‡(!
buf
) {

367 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

368 
	`exô
(1);

370 
blk_buf
 = 
	`mÆloc
((
blk_t
));

371 i‡(!
blk_buf
) {

372 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

373 
	`exô
(1);

376 
zîo_buf
 = 
	`mÆloc
(
fs1
->
blocksize
);

377 i‡(!
zîo_buf
) {

378 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
, "whileállocating buffer");

379 
	`exô
(1);

381 
	`mem£t
(
zîo_buf
, 0, 
fs1
->
blocksize
);

382 
blk
 = 
fs1
->
su≥r
->
s_fú°_d©a_block
;

383 
blk
 < (
fs1
->
su≥r
->
s_blocks_cou¡
); blk++) {

384 if(
fs1
->
group_desc
[
group
].
bg_Êags
 & 
EXT2_BG_BLOCK_UNINIT
){

385 
group
++;

386 
blk
+=
	`BLOCK_GROUP_OFFSET
(
fs1
);

387 
•¨£
+=
	`BLOCK_GROUP_OFFSET
(
fs1
);

390 
bôm≠1
 = 
	`ext2fs_Á°_ã°_block_bôm≠
(
fs1
->
block_m≠
, 
blk
);

391 
bôm≠2
 = 
	`ext2fs_Á°_ã°_block_bôm≠
(
fs2
->
block_m≠
, 
blk
);

393 if(
bôm≠1
 && !
bôm≠2
) {

395 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs1
->
io
, 
blk
, 1, 
buf
);

396 i‡(
ªtvÆ
) {

397 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

398 "îr‹Ñódög block %u", 
blk
);

400 i‡(
	`check_zîo_block
(
buf
, 
fs1
->
blocksize
))

403 
	`mem˝y
(
blk_buf
,(*)&
blk
, (
blk_t
));

404 
blk
=*(
blk_t
 *)
blk_buf
;

405 
ªt
=
	`wrôe
(1,
blk_buf
,(
blk_t
));

406 
ªt
=
	`wrôe
(1,
buf
,
fs1
->
blocksize
);

410 
	`mem£t
(
blk_buf
,-1,(
blk_t
));

411 
ªt
=
	`wrôe
(1,
blk_buf
,(
blk_t
));

412 
ªt
=
	`wrôe
(1,
blk_buf
,(
blk_t
));

414 
	}
}

419 
	$gë_¢≠shŸ_fûíame
(*
devi˚
, *
¢≠shŸ_«me
,

420 *
¢≠shŸ
)

421 { 
i
=0,
j
=0,
ãmp
;

422 
îrcode_t
 
ªtvÆ
;

423 
comm™d
[
MAX
];

424 
devi˚
[
i
++]!='@');

425 
ãmp
=
i
;

426 
devi˚
[
i
]!=0)

427 
¢≠shŸ_«me
[
j
++]=
devi˚
[
i
++];

428 
¢≠shŸ_«me
[
j
]=
devi˚
[
i
];

429 
devi˚
[
ãmp
-1]=0;

430 
	`gë_mou¡_poöt
(
devi˚
,
¢≠shŸ
);

431 
	`•rötf
(
comm™d
, "¢≠shŸ.ext4dev c⁄fig %†%s", 
devi˚
, 
¢≠shŸ
);

432 
ªtvÆ
=
	`sy°em
(
comm™d
);

433 
	`•rötf
(
comm™d
, "¢≠shŸ.ext4devÉ«bÀ %s@%s", 
¢≠shŸ
, 
¢≠shŸ_«me
);

434 
ªtvÆ
=
	`sy°em
(
comm™d
);

435 
	`°rˇt
(
¢≠shŸ
,"/.snapshots/");

436 
	`°rˇt
(
¢≠shŸ
,
¢≠shŸ_«me
);

438 
	}
}

440 
	$maö
 (
¨gc
, ** 
¨gv
)

442 
c
;

443 
îrcode_t
 
ªtvÆ
;

444 
ext2_fûsys
 
fs
,
fs2
,
fs3
;

445 *
image_‚
,*
devi˚_«me
,*
devi˚_«me2
,*
åunc_vÆ
;

446 
comm™d
[
MAX
],
¢≠shŸ_fûe
[MAX],
¢≠shŸ_«me
[MAX],
mou¡_poöt
[MAX];

447 
¢≠shŸ_fûe2
[
MAX
],
¢≠shŸ_«me2
[MAX],
mou¡_poöt2
[MAX];

448 
›í_Êag
 = 0,
ö¸emíèl_Êag
=0,
id
;

449 
ªt
,
›ts
=1;

450 
fsd1
,
fsd2
,
fsd3
;

451 
fõm≠
 *fiemap;

452 
off_t
 
block_cou¡
,
block_size
;

454 
	`Ârötf
 (
°dîr
, "e4£nd %†(%s)\n", 
E2FSPROGS_VERSION
,

455 
E2FSPROGS_DATE
);

457 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "ûF")Ë!
EOF
)

458 
c
) {

460 
ö¸emíèl_Êag
++;

461 
›ts
+=1;

465 
	`ußge
();

467 i‡(
›töd
 !
¨gc
 - 
›ts
 )

468 
	`ußge
();

471 
devi˚_«me
 = 
¨gv
[
›töd
];

472 
image_‚
 = 
¨gv
[
›töd
+1];

474 
	`gë_¢≠shŸ_fûíame
(
devi˚_«me
,
¢≠shŸ_«me
,
¢≠shŸ_fûe
);

477 
ªtvÆ
 = 
	`ext2fs_›í
 (
¢≠shŸ_fûe
, 
›í_Êag
, 0, 0,

478 
unix_io_m™agî
, &
fs
);

479 i‡(
ªtvÆ
) {

480 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("whileÅryingÅo open %s"),

481 
¢≠shŸ_fûe
);

482 
	`Âuts
(
	`_
("Couldn't find valid filesystem superblock.\n"),

483 
°dout
);

484 
	`exô
(1);

487 
ªtvÆ

	`ext2fs_ªad_bôm≠s
(
fs
);

488 i‡(
ªtvÆ
) {

489 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, "whileÅryingÅoÑead bitmap");

490 
	`exô
(1);

492 
block_cou¡
=
fs
->
su≥r
->
s_blocks_cou¡
;

493 
block_size
=
fs
->
blocksize
;

495 
	`Ârötf
(
°dîr
, "%d",
fs
->
su≥r
->
s_¢≠shŸ_id
);

496 if(!
ö¸emíèl_Êag
)

498 
åunc_vÆ
=(*)&
block_cou¡
;

499 
ªt
=
	`wrôe
(1,
åunc_vÆ
,(
off_t
));

500 if(
ªt
<0){

501 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, "whileÅryingÅo writeÅo destination");

504 
åunc_vÆ
=(*)&
block_size
;

505 
ªt
=
	`wrôe
(1,
åunc_vÆ
, (
off_t
));

506 if(
ªt
<0){

507 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, "whileÅryingÅo writeÅo destination");

509 
	`wrôe_fuŒ_image
(
fs
);

515 
devi˚_«me2
 =
¨gv
[
›töd
+1];

516 
	`gë_¢≠shŸ_fûíame
(
devi˚_«me2
,
¢≠shŸ_«me2
,
¢≠shŸ_fûe2
);

517 
	`¥ötf
("\nDevi˚:%s\nS«pshŸ:%s\nS«pshŸ fûê∑th:%s\n",
devi˚_«me2
,
¢≠shŸ_«me2
,
¢≠shŸ_fûe2
);

519 
id
=
fs
->
su≥r
->
s_¢≠shŸ_id
;

521 
	`wrôe
(1,(*)&
id
, (
__u32
));

523 
ªtvÆ
 = 
	`ext2fs_›í
 (
¢≠shŸ_fûe2
, 
›í_Êag
, 0, 0,

524 
unix_io_m™agî
, &
fs2
);

525 i‡(
ªtvÆ
) {

526 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, 
	`_
("whileÅryingÅo open %s"),

527 
¢≠shŸ_fûe2
);

528 
	`Âuts
(
	`_
("Couldn't find valid filesystem superblock.\n"),

529 
°dout
);

530 
	`exô
(1);

532 
ªtvÆ

	`ext2fs_ªad_bôm≠s
(
fs2
);

533 i‡(
ªtvÆ
) {

534 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
, "whileÅryingÅoÑead bitmap");

535 
	`exô
(1);

538 
fsd1
 = 
	`›í
(
¢≠shŸ_fûe
, 
O_RDONLY
, 0600);

539 if(
fsd1
<0)

540 
	`Ârötf
(
°dîr
,"Error opening snapshot file");

541 
fsd2
 = 
	`›í
(
¢≠shŸ_fûe2
, 
O_RDONLY
, 0600);

542 if(
fsd2
<0)

543 
	`Ârötf
(
°dîr
,"Error opening snapshot file");

544 
fõm≠
=
	`ªad_fõm≠
(
fsd1
);

546 
	`dump_fõm≠
(
fõm≠
,
fsd2
,0);

549 
	`˛o£
(
fsd1
);

550 
	`˛o£
(
fsd2
);

552 
	`wrôe_ö¸emíèl
(
fs2
,
fs
);

553 
	`ext2fs_˛o£
 (
fs2
);

556 
	`ext2fs_˛o£
 (
fs
);

557 
	`exô
 (0);

558 
	}
}

	@filefrag.c

12 #i‚de‡
__löux__


13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<uni°d.h
>

17 
	$maö
() {

18 
	`Âuts
("Thi†¥ogøm i†⁄ly suµ‹ãd o¿Löux!\n", 
°dîr
);

19 
	`exô
(
EXIT_FAILURE
);

20 
	}
}

22 
	#_LARGEFILE64_SOURCE


	)

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<uni°d.h
>

27 
	~<°rög.h
>

28 
	~<time.h
>

29 
	~<f˙é.h
>

30 
	~<î∫o.h
>

31 #ifde‡
HAVE_GETOPT_H


32 
	~<gë›t.h
>

34 *
›èrg
;

35 
›töd
;

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

39 
	~<sys/vfs.h
>

40 
	~<sys/io˘l.h
>

41 
	~<löux/fd.h
>

42 
	~<ext2fs/ext2_ty≥s.h
>

43 
	~<ext2fs/fõm≠.h
>

45 
	gvîbo£
 = 0;

46 
	gno_bs
 = 0;

47 
	gsync_fûe
 = 0;

48 
	gx©å_m≠
 = 0;

49 
	gf‹˚_bm≠
 = 0;

50 
	glogiˇl_width
 = 12;

51 
	gphysiˇl_width
 = 14;

52 
	gfûesize
;

54 
	#FILEFRAG_FIEMAP_FLAGS_COMPAT
 (
FIEMAP_FLAG_SYNC
 | 
FIEMAP_FLAG_XATTR
)

	)

56 
	#FIBMAP
 
	`_IO
(0x00, 1Ë

	)

57 
	#FIGETBSZ
 
	`_IO
(0x00, 2Ë

	)

58 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

60 
	#EXT4_EXTENTS_FL
 0x00080000

	)

61 
	#EXT3_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

63 
	$öt_log2
(
¨g
)

65 
l
 = 0;

67 
¨g
 >>= 1;

68 
¨g
) {

69 
l
++;

70 
¨g
 >>= 1;

72  
l
;

73 
	}
}

75 
	$öt_log10
(
¨g
)

77 
l
 = 0;

79 
¨g
 =árg / 10;

80 
¨g
) {

81 
l
++;

82 
¨g
 =árg / 10;

84  
l
;

85 
	}
}

87 
	$div_˚û
(
a
, 
b
)

89 i‡(!
a
)

91  ((
a
 - 1Ë/ 
b
) + 1;

92 
	}
}

94 
	$gë_bm≠
(
fd
, 
block
, *
phy_blk
)

96 
ªt
;

97 
b
;

99 
b
 = 
block
;

100 
ªt
 = 
	`io˘l
(
fd
, 
FIBMAP
, &
b
);

101 i‡(
ªt
 < 0) {

102 i‡(
î∫o
 =
EPERM
) {

103 
	`Ârötf
(
°dîr
, "NoÖermissionÅo use FIBMAP ioctl; "

105 
	`exô
(1);

107 
	`≥º‹
("FIBMAP");

109 *
phy_blk
 = 
b
;

111  
ªt
;

112 
	}
}

114 
	$¥öt_exã¡_öfo
(
fõm≠_exã¡
 *
fm_exã¡
, 
cur_ex
,

115 
ex≥˘ed
, 
blk_shi·
)

117 
__u64
 
phy_blk
;

118 
logiˇl_blk
;

119 
ext_Àn
;

120 
Êags
[256] = "";

123 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_DATA_INLINE
)

124 
blk_shi·
 = 0;

126 
ext_Àn
 = 
fm_exã¡
->
„_Àngth
 >> 
blk_shi·
;

127 
logiˇl_blk
 = 
fm_exã¡
->
„_logiˇl
 >> 
blk_shi·
;

128 
phy_blk
 = 
fm_exã¡
->
„_physiˇl
 >> 
blk_shi·
;

130 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_UNKNOWN
)

131 
	`°rˇt
(
Êags
, "unknown,");

132 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_DELALLOC
)

133 
	`°rˇt
(
Êags
, "delalloc,");

134 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_DATA_ENCRYPTED
)

135 
	`°rˇt
(
Êags
, "encrypted,");

136 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_NOT_ALIGNED
)

137 
	`°rˇt
(
Êags
, "not_aligned,");

138 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_DATA_INLINE
)

139 
	`°rˇt
(
Êags
, "inline,");

140 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_DATA_TAIL
)

141 
	`°rˇt
(
Êags
, "tail_packed,");

142 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_UNWRITTEN
)

143 
	`°rˇt
(
Êags
, "unwritten,");

144 i‡(
fm_exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_MERGED
)

145 
	`°rˇt
(
Êags
, "merged,");

147 i‡(
fm_exã¡
->
„_logiˇl
 + fm_exã¡->
„_Àngth
 >
fûesize
)

148 
	`°rˇt
(
Êags
, "eof,");

151 i‡(
Êags
[0])

152 
Êags
[
	`°æí
(flags) - 1] = '\0';

154 i‡(
ex≥˘ed
)

155 
	`¥ötf
("%4d %*llu %*llu %*llu %6lu %s\n",

156 
cur_ex
, 
logiˇl_width
, 
logiˇl_blk
,

157 
physiˇl_width
, 
phy_blk
,Öhysiˇl_width, 
ex≥˘ed
,

158 
ext_Àn
, 
Êags
);

160 
	`¥ötf
("%4d %*llu %*llu %*s %6lu %s\n",

161 
cur_ex
, 
logiˇl_width
, 
logiˇl_blk
,

162 
physiˇl_width
, 
phy_blk
,Öhysical_width, "",

163 
ext_Àn
, 
Êags
);

164 
	}
}

166 
	$fûe‰ag_fõm≠
(
fd
, 
blk_shi·
, *
num_exã¡s
)

168 
buf
[4096] = "";

169 
fõm≠
 *fõm≠ = (fõm≠ *)
buf
;

170 
fõm≠_exã¡
 *
fm_ext
 = &
fõm≠
->
fm_exã¡s
[0];

171 
cou¡
 = ((
buf
Ë- (*
fõm≠
)) /

172 (
fõm≠_exã¡
);

173 
œ°_blk
 = 0;

174 
Êags
 = 0;

175 
i
;

176 
fõm≠_öcom∑t_¥öãd
;

177 
fõm≠_hódî_¥öãd
 = 0;

178 
tŸ_exã¡s
 = 1, 
n
 = 0;

179 
œ°
 = 0;

180 
rc
;

182 
fõm≠
->
fm_Àngth
 = ~0ULL;

184 
	`mem£t
(
fõm≠
, 0, (fiemap));

186 i‡(!
vîbo£
)

187 
cou¡
 = 0;

189 i‡(
sync_fûe
)

190 
Êags
 |
FIEMAP_FLAG_SYNC
;

192 i‡(
x©å_m≠
)

193 
Êags
 |
FIEMAP_FLAG_XATTR
;

196 
fõm≠
->
fm_Àngth
 = ~0ULL;

197 
fõm≠
->
fm_Êags
 = 
Êags
;

198 
fõm≠
->
fm_exã¡_cou¡
 = 
cou¡
;

199 
rc
 = 
	`io˘l
(
fd
, 
FS_IOC_FIEMAP
, (Ë
fõm≠
);

200 i‡(
rc
 < 0) {

201 i‡(
î∫o
 =
EBADR
 && 
fõm≠_öcom∑t_¥öãd
 == 0) {

202 
	`¥ötf
("FIEMAP failed with unsupported "

203 "Êag†%x\n", 
fõm≠
->
fm_Êags
);

204 
fõm≠_öcom∑t_¥öãd
 = 1;

206  
rc
;

209 i‡(
vîbo£
 && !
fõm≠_hódî_¥öãd
) {

210 
	`¥ötf
("Éxà%*†%*†%*†Àngth fœgs\n", 
logiˇl_width
,

211 "logiˇl", 
physiˇl_width
, "physical",

212 
physiˇl_width
, "expected");

213 
fõm≠_hódî_¥öãd
 = 1;

216 i‡(!
vîbo£
) {

217 *
num_exã¡s
 = 
fõm≠
->
fm_m≠≥d_exã¡s
;

218 
out
;

222 i‡(
fõm≠
->
fm_m≠≥d_exã¡s
 == 0)

225 
i
 = 0; i < 
fõm≠
->
fm_m≠≥d_exã¡s
; i++) {

226 
__u64
 
phy_blk
, 
logiˇl_blk
;

227 
ext_Àn
;

229 
phy_blk
 = 
fm_ext
[
i
].
„_physiˇl
 >> 
blk_shi·
;

230 
ext_Àn
 = 
fm_ext
[
i
].
„_Àngth
 >> 
blk_shi·
;

231 
logiˇl_blk
 = 
fm_ext
[
i
].
„_logiˇl
 >> 
blk_shi·
;

233 i‡(
logiˇl_blk
 && 
phy_blk
 !
œ°_blk
 + 1)

234 
tŸ_exã¡s
++;

236 
œ°_blk
 = 0;

237 
	`¥öt_exã¡_öfo
(&
fm_ext
[
i
], 
n
, 
œ°_blk
, 
blk_shi·
);

239 
œ°_blk
 = 
phy_blk
 + 
ext_Àn
 - 1;

240 i‡(
fm_ext
[
i
].
„_Êags
 & 
FIEMAP_EXTENT_LAST
)

241 
œ°
 = 1;

242 
n
++;

245 
fõm≠
->
fm_°¨t
 = (
fm_ext
[
i
-1].
„_logiˇl
 +

246 
fm_ext
[
i
-1].
„_Àngth
);

247 } 
œ°
 == 0);

249 *
num_exã¡s
 = 
tŸ_exã¡s
;

250 
out
:

252 
	}
}

254 
	#EXT2_DIRECT
 12

	)

256 
	$‰ag_ªp‹t
(c⁄° *
fûíame
)

258 
°©fs
 
fsöfo
;

259 #ifde‡
HAVE_FSTAT64


260 
°©64
 
fûeöfo
;

262 
°©
 
fûeöfo
;

264 
bs
;

265 
fd
;

266 
block
, 
œ°_block
 = 0, 
numblocks
, 
i
, 
cou¡
;

267 
bpib
;

268 
cylgroups
;

269 
num_exã¡s
 = 0, 
ex≥˘ed
;

270 
is_ext2
 = 0;

271 
⁄˚
 = 1;

272 
Êags
;

273 
rc
;

275 #ifde‡
HAVE_OPEN64


276 
fd
 = 
	`›í64
(
fûíame
, 
O_RDONLY
);

278 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

280 i‡(
fd
 < 0) {

281 
	`≥º‹
("open");

285 i‡(
	`°©fs
(
fûíame
, &
fsöfo
) < 0) {

286 
	`≥º‹
("statfs");

289 #ifde‡
HAVE_FSTAT64


290 i‡(
	`°©64
(
fûíame
, &
fûeöfo
) < 0) {

292 i‡(
	`°©
(
fûíame
, &
fûeöfo
) < 0) {

294 
	`≥º‹
("stat");

297 i‡(
	`io˘l
(
fd
, 
EXT3_IOC_GETFLAGS
, &
Êags
) < 0)

298 
Êags
 = 0;

299 i‡(!(
Êags
 & 
EXT4_EXTENTS_FL
) &&

300 ((
fsöfo
.
f_ty≥
 == 0xef51) || (fsinfo.f_type == 0xef52) ||

301 (
fsöfo
.
f_ty≥
 == 0xef53)))

302 
is_ext2
++;

303 i‡(
vîbo£
 && 
⁄˚
)

304 
	`¥ötf
("FilesystemÅype is: %lx\n",

305 (Ë
fsöfo
.
f_ty≥
);

307 
cylgroups
 = 
	`div_˚û
(
fsöfo
.
f_blocks
, fsöfo.
f_bsize
*8);

308 i‡(
vîbo£
 && 
is_ext2
 && 
⁄˚
)

309 
	`¥ötf
("Filesystem cylinder groups isápproximately %ld\n",

310 
cylgroups
);

312 
physiˇl_width
 = 
	`öt_log10
(
fsöfo
.
f_blocks
);

313 i‡(
physiˇl_width
 < 8)

314 
physiˇl_width
 = 8;

316 i‡(
	`io˘l
(
fd
, 
FIGETBSZ
, &
bs
) < 0) {

317 
	`≥º‹
("FIGETBSZ");

318 
	`˛o£
(
fd
);

322 i‡(
no_bs
)

323 
bs
 = 1024;

325 
bpib
 = 
bs
 / 4;

326 
numblocks
 = (
fûeöfo
.
°_size
 + (
bs
-1)) / bs;

327 
logiˇl_width
 = 
	`öt_log10
(
numblocks
);

328 i‡(
logiˇl_width
 < 7)

329 
logiˇl_width
 = 7;

330 
fûesize
 = ()
fûeöfo
.
°_size
;

331 i‡(
vîbo£
)

332 
	`¥ötf
("File size of %s is %lld (%ld block%s, blocksize %d)\n",

333 
fûíame
, (Ë
fûeöfo
.
°_size
, 
numblocks
,

334 
numblocks
 =1 ? "" : "s", 
bs
);

335 i‡(
f‹˚_bm≠
 ||

336 
	`fûe‰ag_fõm≠
(
fd
, 
	`öt_log2
(
bs
), &
num_exã¡s
) != 0) {

337 
i
 = 0, 
cou¡
 = 0; i < 
numblocks
; i++) {

338 i‡(
is_ext2
 && 
œ°_block
) {

339 i‡(((
i
-
EXT2_DIRECT
Ë% 
bpib
) == 0)

340 
œ°_block
++;

341 i‡(((
i
-
EXT2_DIRECT
-
bpib
) % (bpib*bpib)) == 0)

342 
œ°_block
++;

343 i‡(((
i
-
EXT2_DIRECT
-
bpib
-bpib*bpib) %

344 (((
__u64
Ë
bpib
)*bpib*bpib)) == 0)

345 
œ°_block
++;

347 
rc
 = 
	`gë_bm≠
(
fd
, 
i
, &
block
);

348 i‡(
block
 == 0)

350 i‡(!
num_exã¡s
)

351 
num_exã¡s
++;

352 
cou¡
++;

353 i‡(
œ°_block
 && (
block
 !=Üast_block+1) ) {

354 i‡(
vîbo£
)

355 
	`¥ötf
("Discontinuity: Block %ld isát "

357 
i
, 
block
, 
œ°_block
+1);

358 
num_exã¡s
++;

360 
œ°_block
 = 
block
;

363 i‡(
num_exã¡s
 == 1)

364 
	`¥ötf
("%s: 1Éxã¡ found", 
fûíame
);

366 
	`¥ötf
("%s: %dÉxã¡†found", 
fûíame
, 
num_exã¡s
);

367 
ex≥˘ed
 = (
cou¡
/((
bs
*8)-(
fsöfo
.
f_fûes
/8/
cylgroups
)-3))+1;

368 i‡(
is_ext2
 && 
ex≥˘ed
 < 
num_exã¡s
)

369 
	`¥ötf
(",Öî„˘i⁄ would bê%dÉxã¡%s\n", 
ex≥˘ed
,

370 (
ex≥˘ed
>1) ? "s" : "");

372 
	`Âutc
('\n', 
°dout
);

373 
	`˛o£
(
fd
);

374 
⁄˚
 = 0;

375 
	}
}

377 
	$ußge
(c⁄° *
¥og«me
)

379 
	`Ârötf
(
°dîr
, "Ußge: %†[-Bbvsx] fûê...\n", 
¥og«me
);

380 
	`exô
(1);

381 
	}
}

383 
	$maö
(
¨gc
, **
¨gv
)

385 **
˝p
;

386 
c
;

388 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "Bbsvx")Ë!
EOF
)

389 
c
) {

391 
f‹˚_bm≠
++;

394 
no_bs
++;

397 
vîbo£
++;

400 
sync_fûe
++;

403 
x©å_m≠
++;

406 
	`ußge
(
¨gv
[0]);

409 i‡(
›töd
 =
¨gc
)

410 
	`ußge
(
¨gv
[0]);

411 
˝p
=
¨gv
+
›töd
; *cpp; cpp++)

412 
	`‰ag_ªp‹t
(*
˝p
);

414 
	}
}

	@findsuper.c

84 
	#_FILE_OFFSET_BITS
 64

	)

86 
	~<°dio.h
>

87 
	~<°dlib.h
>

88 
	~<°rög.h
>

89 
	~<uni°d.h
>

90 
	~<î∫o.h
>

91 
	~<f˙é.h
>

92 
	~<time.h
>

94 
	~"ext2fs/ext2_fs.h
"

95 
	~"∆s-íabÀ.h
"

97 #unde‡
DEBUG


99 #ifde‡
DEBUG


100 
	#WHY
(
fmt
, 
¨g
...Ë{ 
	`¥ötf
("\r%Ld: " fmt, 
sk
, ##¨gË; ; }

	)

102 
	#WHY
(
fmt
, 
¨g
...Ë{ ; }

	)

105 
	$ußge
()

107 
	`Ârötf
(
°dîr
,

108 
	`_
("Usage: findsuper device [skipbytes [startkb]]\n"));

109 
	`exô
(1);

110 
	}
}

113 
	$maö
(
¨gc
, *
¨gv
[])

115 
skùøã
=512;

116 
loff_t
 
sk
=0, 
skl
=0;

117 
fd
;

118 *
s
;

119 
time_t
 
tm
, 
œ°
 = 
	`time
(0);

120 
loff_t
 
öãrvÆ
 = 1024 * 1024;

121 
c
, 
¥öt_j∆_c›õs
 = 0;

122 c⁄° * 
devi˚_«me
;

123 
ext2_su≥r_block
 
ext2
;

127 #ifde‡
ENABLE_NLS


128 
	`£éoˇÀ
(
LC_MESSAGES
, "");

129 
	`£éoˇÀ
(
LC_CTYPE
, "");

130 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

131 
	`ãxtdomaö
(
NLS_CAT_NAME
);

134 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "j")Ë!
EOF
) {

135 
c
) {

137 
¥öt_j∆_c›õs
++;

140 
	`ußge
();

144 i‡(
›töd
 =
¨gc
)

145 
	`ußge
();

147 
devi˚_«me
 = 
¨gv
[
›töd
++];

149 i‡(
›töd
 < 
¨gc
) {

150 
skùøã
 = 
	`°πﬁ
(
¨gv
[
›töd
], &
s
, 0);

151 i‡(
s
 =
¨gv
[
›töd
]) {

152 
	`Ârötf
(
°dîr
,
	`_
("skùbyã†should bê®numbî,ÇŸ %s\n"), 
s
);

153 
	`exô
(1);

155 
›töd
++;

157 i‡(
skùøã
 & 0x1ff) {

158 
	`Ârötf
(
°dîr
,

159 
	`_
("skipbytes must beá multiple ofÅhe sector size\n"));

160 
	`exô
(2);

162 i‡(
›töd
 < 
¨gc
) {

163 
sk
 = 
skl
 = 
	`°πﬁl
(
¨gv
[
›töd
], &
s
, 0) << 10;

164 i‡(
s
 =
¨gv
[
›töd
]) {

165 
	`Ârötf
(
°dîr
,

166 
	`_
("°¨tkb should bê®numbî,ÇŸ %s\n"), 
s
);

167 
	`exô
(1);

169 
›töd
++;

171 i‡(
sk
 < 0) {

172 
	`Ârötf
(
°dîr
, 
	`_
("°¨tkb should bêposôive,ÇŸ %Lu\n"), 
sk
);

173 
	`exô
(1);

176 
fd
 = 
	`›í
(
devi˚_«me
, 
O_RDONLY
);

177 i‡(
fd
 < 0) {

178 
	`≥º‹
(
devi˚_«me
);

179 
	`exô
(1);

183 
	`¥ötf
(
	`_
("°¨tögáà%Lu, wôh %u byã in¸emíts\n"), 
sk
, 
skùøã
);

184 i‡(
¥öt_j∆_c›õs
)

185 
	`¥ötf
(
	`_
("[*]Örobably superblock written inÅheÉxt3 "

187 
	`¥ötf
(
	`_
("byte_offset byte_start byte_end fs_blocks blksz grpÜast_mount_time sb_uuidÜabel\n"));

188 ; 
	`l£ek64
(
fd
, 
sk
, 
SEEK_SET
) != -1 &&

189 
	`ªad
(
fd
, &
ext2
, 512Ë=512; 
sk
 +
skùøã
) {

190 
œ°_uuid
[16] = "blah";

191 
bsize
, 
gΩsize
;

192 
j∆_c›y
, 
sb_off£t
;

194 i‡(
sk
 && !(sk & (
öãrvÆ
 - 1))) {

195 
time_t
 
now
, 
diff
;

197 
now
 = 
	`time
(0);

198 
diff
 = 
now
 - 
œ°
;

200 i‡(
diff
 > 0) {

201 
s
 = 
	`˘ime
(&
now
);

202 
s
[24] = 0;

203 
	`¥ötf
("\r%11Lu: %8LukB/†@ %s", 
sk
,

204 (((
sk
 - 
skl
)Ë/ 
diff
Ë>> 10, 
s
);

205 
	`fÊush
(
°dout
);

207 i‡(
diff
 < 5)

208 
öãrvÆ
 <<= 1;

209 i‡(
diff
 > 20)

210 
öãrvÆ
 >>= 1;

211 
œ°
 = 
now
;

212 
skl
 = 
sk
;

214 i‡(
ext2
.
s_magic
 !
EXT2_SUPER_MAGIC
)

216 i‡(
ext2
.
s_log_block_size
 > 6)

217 
	`WHY
("log block sizê> 6 (%u)\n", 
ext2
.
s_log_block_size
);

218 i‡(
ext2
.
s_r_blocks_cou¡
 >Éxt2.
s_blocks_cou¡
)

219 
	`WHY
("r_blocks_count > blocks_count (%u > %u)\n",

220 
ext2
.
s_r_blocks_cou¡
,Éxt2.
s_blocks_cou¡
);

221 i‡(
ext2
.
s_‰ì_blocks_cou¡
 >Éxt2.
s_blocks_cou¡
)

222 
	`WHY
("free_blocks_count > blocks_count\n (%u > %u)\n",

223 
ext2
.
s_‰ì_blocks_cou¡
,Éxt2.
s_blocks_cou¡
);

224 i‡(
ext2
.
s_‰ì_öodes_cou¡
 >Éxt2.
s_öodes_cou¡
)

225 
	`WHY
("free_inodes_count > inodes_count (%u > %u)\n",

226 
ext2
.
s_‰ì_öodes_cou¡
,Éxt2.
s_öodes_cou¡
);

228 
tm
 = 
ext2
.
s_mtime
;

229 
s
 = 
	`˘ime
(&
tm
);

230 
s
[24] = 0;

231 
bsize
 = 1 << (
ext2
.
s_log_block_size
 + 10);

232 
gΩsize
 = 
bsize
 * 
ext2
.
s_blocks_≥r_group
;

233 i‡(
	`memcmp
(
ext2
.
s_uuid
, 
œ°_uuid
, (last_uuid)) == 0 &&

234 
ext2
.
s_ªv_Àvñ
 > 0 &&Éxt2.
s_block_group_ƒ
 == 0) {

235 
j∆_c›y
 = 1;

237 
j∆_c›y
 = 0;

238 
	`mem˝y
(
œ°_uuid
, 
ext2
.
s_uuid
, (last_uuid));

240 i‡(
ext2
.
s_block_group_ƒ
 =0 || 
bsize
 == 1024)

241 
sb_off£t
 = 1024;

243 
sb_off£t
 = 0;

244 i‡(
j∆_c›y
 && !
¥öt_j∆_c›õs
)

246 
	`¥ötf
("\r%11Lu %11Lu%s %11Lu%s %9u %5Lu %4u%s %s %02x%02x%02x%02x %s\n",

247 
sk
, sk - 
ext2
.
s_block_group_ƒ
 * 
gΩsize
 - 
sb_off£t
,

248 
j∆_c›y
 ? "*":" ",

249 
sk
 + 
ext2
.
s_blocks_cou¡
 * 
bsize
 -

250 
ext2
.
s_block_group_ƒ
 * 
gΩsize
 - 
sb_off£t
,

251 
j∆_c›y
 ? "*" : " ", 
ext2
.
s_blocks_cou¡
, 
bsize
,

252 
ext2
.
s_block_group_ƒ
, 
j∆_c›y
 ? "*" : " ", 
s
,

253 
ext2
.
s_uuid
[0],Éxt2.s_uuid[1],

254 
ext2
.
s_uuid
[2],Éxt2.s_uuid[3],Éxt2.
s_vﬁume_«me
);

256 
	`¥ötf
(
	`_
("\n%11Lu: föished wôhÉºnÿ%d\n"), 
sk
, 
î∫o
);

257 
	`˛o£
(
fd
);

259  
î∫o
;

260 
	}
}

	@fsck.c

28 
	#_XOPEN_SOURCE
 600

	)

30 
	~<sys/ty≥s.h
>

31 
	~<sys/waô.h
>

32 
	~<sys/sig«l.h
>

33 
	~<sys/°©.h
>

34 
	~<limôs.h
>

35 
	~<°dio.h
>

36 
	~<˘y≥.h
>

37 
	~<°rög.h
>

38 
	~<time.h
>

39 #i‡
HAVE_STDLIB_H


40 
	~<°dlib.h
>

42 #i‡
HAVE_ERRNO_H


43 
	~<î∫o.h
>

45 #i‡
HAVE_PATHS_H


46 
	~<∑ths.h
>

48 #i‡
HAVE_UNISTD_H


49 
	~<uni°d.h
>

51 #i‡
HAVE_ERRNO_H


52 
	~<î∫o.h
>

54 #i‡
HAVE_MALLOC_H


55 
	~<mÆloc.h
>

57 #ifde‡
HAVE_SIGNAL_H


58 
	~<sig«l.h
>

61 
	~"../vîsi⁄.h
"

62 
	~"∆s-íabÀ.h
"

63 
	~"fsck.h
"

64 
	~"blkid/blkid.h
"

66 #i‚de‡
_PATH_MNTTAB


67 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

70 c⁄° *
	gign‹ed_ty≥s
[] = {

79 
NULL


82 c⁄° *
	gªÆly_w™ãd
[] = {

92 
NULL


95 
	#BASE_MD
 "/dev/md"

	)

100 *
	gdevi˚s
[
MAX_DEVICES
];

101 *
	g¨gs
[
MAX_ARGS
];

102 
	gnum_devi˚s
, 
	gnum_¨gs
;

104 
	gvîbo£
 = 0;

105 
	gdﬂŒ
 = 0;

106 
	gn€xecuã
 = 0;

107 
	g£rülize
 = 0;

108 
	gskù_roŸ
 = 0;

109 
	gign‹e_mou¡ed
 = 0;

110 
	gnŸôÀ
 = 0;

111 
	g∑øŒñ_roŸ
 = 0;

112 
	g¥ogªss
 = 0;

113 
	g¥ogªss_fd
 = 0;

114 
	gf‹˚_Æl_∑øŒñ
 = 0;

115 
	gnum_ru¬ög
 = 0;

116 
	gmax_ru¬ög
 = 0;

117 vﬁ©ûê
	gˇn˚l_ªque°ed
 = 0;

118 
	gkûl_£¡
 = 0;

119 *
	g¥og«me
;

120 *
	gf°y≥
 = 
NULL
;

121 
fs_öfo
 *
	gfûesys_öfo
 = 
NULL
, *
	gfûesys_œ°
 = NULL;

122 
fsck_ö°™˚
 *
	gö°™˚_li°
;

123 c⁄° *
	gfsck_¥efix_∑th
 = "/sbin:/sbin/fs.d:/sbin/fs:/etc/fs:/etc";

124 *
	gfsck_∑th
 = 0;

125 
blkid_ˇche
 
	gˇche
 = 
NULL
;

127 *
	$°rög_c›y
(c⁄° *
s
)

129 *
ªt
;

131 i‡(!
s
)

133 
ªt
 = 
	`mÆloc
(
	`°æí
(
s
)+1);

134 i‡(
ªt
)

135 
	`°r˝y
(
ªt
, 
s
);

136  
ªt
;

137 
	}
}

139 
	$°rög_to_öt
(c⁄° *
s
)

141 
l
;

142 *
p
;

144 
l
 = 
	`°πﬁ
(
s
, &
p
, 0);

145 i‡(*
p
 || 
l
 =
LONG_MIN
 ||Ü =
LONG_MAX
 ||Ü < 0 ||Ü > 
INT_MAX
)

148  (Ë
l
;

149 
	}
}

151 
ign‹e
(
fs_öfo
 *);

153 *
	$skù_ovî_bœnk
(*
˝
)

155 *
˝
 && 
	`is•a˚
(*cp))

156 
˝
++;

157  
˝
;

158 
	}
}

160 *
	$skù_ovî_w‹d
(*
˝
)

162 *
˝
 && !
	`is•a˚
(*cp))

163 
˝
++;

164  
˝
;

165 
	}
}

167 
	$°rù_löe
(*
löe
)

169 *
p
;

171 *
löe
) {

172 
p
 = 
löe
 + 
	`°æí
(line) - 1;

173 i‡((*
p
 == '\n') || (*p == '\r'))

174 *
p
 = 0;

178 
	}
}

180 *
	$∑r£_w‹d
(**
buf
)

182 *
w‹d
, *
√xt
;

184 
w‹d
 = *
buf
;

185 i‡(*
w‹d
 == 0)

188 
w‹d
 = 
	`skù_ovî_bœnk
(word);

189 
√xt
 = 
	`skù_ovî_w‹d
(
w‹d
);

190 i‡(*
√xt
)

191 *
√xt
++ = 0;

192 *
buf
 = 
√xt
;

193  
w‹d
;

194 
	}
}

196 
	$∑r£_esˇ≥
(*
w‹d
)

198 *
p
, *
q
;

199 
ac
, 
i
;

201 i‡(!
w‹d
)

204 
p
 = 
w‹d
, 
q
 = word; *p;Ö++, q++) {

205 *
q
 = *
p
;

206 i‡(*
p
 != '\\')

208 i‡(*++
p
 == 0)

210 i‡(*
p
 == 't') {

211 *
q
 = '\t';

214 i‡(*
p
 == 'n') {

215 *
q
 = '\n';

218 i‡(!
	`isdigô
(*
p
)) {

219 *
q
 = *
p
;

222 
ac
 = 0;

223 
i
 = 0; i < 3; i++, 
p
++) {

224 i‡(!
	`isdigô
(*
p
))

226 
ac
 = (a¯* 8Ë+ (*
p
 - '0');

228 *
q
 = 
ac
;

229 
p
--;

231 *
q
 = 0;

232 
	}
}

234 
	$‰ì_ö°™˚
(
fsck_ö°™˚
 *
i
)

236 
	`‰ì
(
i
->
¥og
);

237 
	`‰ì
(
i
->
devi˚
);

238 
	`‰ì
(
i
->
ba£_devi˚
);

239 
	`‰ì
(
i
);

241 
	}
}

243 
fs_öfo
 *
	$¸óã_fs_devi˚
(c⁄° *
devi˚
, c⁄° *
m¡≤t
,

244 c⁄° *
ty≥
, c⁄° *
›ts
,

245 
‰eq
, 
∑s¢o
)

247 
fs_öfo
 *
fs
;

249 i‡(!(
fs
 = 
	`mÆloc
((
fs_öfo
))))

250  
NULL
;

252 
fs
->
devi˚
 = 
	`°rög_c›y
(device);

253 
fs
->
mou¡±
 = 
	`°rög_c›y
(
m¡≤t
);

254 
fs
->
ty≥
 = 
	`°rög_c›y
(type);

255 
fs
->
›ts
 = 
	`°rög_c›y
(opts ? opts : "");

256 
fs
->
‰eq
 = freq;

257 
fs
->
∑s¢o
 =Öassno;

258 
fs
->
Êags
 = 0;

259 
fs
->
√xt
 = 
NULL
;

261 i‡(!
fûesys_öfo
)

262 
fûesys_öfo
 = 
fs
;

264 
fûesys_œ°
->
√xt
 = 
fs
;

265 
fûesys_œ°
 = 
fs
;

267  
fs
;

268 
	}
}

272 
	$∑r£_f°ab_löe
(*
löe
, 
fs_öfo
 **
ªt_fs
)

274 *
dev
, *
devi˚
, *
m¡≤t
, *
ty≥
, *
›ts
, *
‰eq
, *
∑s¢o
, *
˝
;

275 
fs_öfo
 *
fs
;

277 *
ªt_fs
 = 0;

278 
	`°rù_löe
(
löe
);

279 
˝
 = 
löe
;

281 
devi˚
 = 
	`∑r£_w‹d
(&
˝
);

282 i‡(!
devi˚
 || *device == '#')

284 
m¡≤t
 = 
	`∑r£_w‹d
(&
˝
);

285 
ty≥
 = 
	`∑r£_w‹d
(&
˝
);

286 
›ts
 = 
	`∑r£_w‹d
(&
˝
);

287 
‰eq
 = 
	`∑r£_w‹d
(&
˝
);

288 
∑s¢o
 = 
	`∑r£_w‹d
(&
˝
);

290 i‡(!
m¡≤t
 || !
ty≥
)

293 
	`∑r£_esˇ≥
(
devi˚
);

294 
	`∑r£_esˇ≥
(
m¡≤t
);

295 
	`∑r£_esˇ≥
(
ty≥
);

296 
	`∑r£_esˇ≥
(
›ts
);

297 
	`∑r£_esˇ≥
(
‰eq
);

298 
	`∑r£_esˇ≥
(
∑s¢o
);

300 
dev
 = 
	`blkid_gë_dev«me
(
ˇche
, 
devi˚
, 
NULL
);

301 i‡(
dev
)

302 
devi˚
 = 
dev
;

304 i‡(
	`°rchr
(
ty≥
, ','))

305 
ty≥
 = 0;

307 
fs
 = 
	`¸óã_fs_devi˚
(
devi˚
, 
m¡≤t
, 
ty≥
 ?Åy≥ : "auto", 
›ts
,

308 
‰eq
 ? 
	`©oi
(freq) : -1,

309 
∑s¢o
 ? 
	`©oi
(passno) : -1);

310 
	`‰ì
(
dev
);

312 i‡(!
fs
)

314 *
ªt_fs
 = 
fs
;

316 
	}
}

318 
	$öãΩªt_ty≥
(
fs_öfo
 *
fs
)

320 *
t
;

322 i‡(
	`°rcmp
(
fs
->
ty≥
, "auto") != 0)

324 
t
 = 
	`blkid_gë_èg_vÆue
(
ˇche
, "TYPE", 
fs
->
devi˚
);

325 i‡(
t
) {

326 
	`‰ì
(
fs
->
ty≥
);

327 
fs
->
ty≥
 = 
t
;

329 
	}
}

334 
	$lﬂd_fs_öfo
(c⁄° *
fûíame
)

336 
FILE
 *
f
;

337 
buf
[1024];

338 
löío
 = 0;

339 
ﬁd_f°ab
 = 1;

340 
fs_öfo
 *
fs
;

342 i‡((
f
 = 
	`f›í
(
fûíame
, "r")Ë=
NULL
) {

343 
	`Ârötf
(
°dîr
, 
	`_
("WARNING: couldn't open %s: %s\n"),

344 
fûíame
, 
	`°ªº‹
(
î∫o
));

347 !
	`„of
(
f
)) {

348 
löío
++;

349 i‡(!
	`fgës
(
buf
, (buf), 
f
))

351 
buf
[(buf)-1] = 0;

352 i‡(
	`∑r£_f°ab_löe
(
buf
, &
fs
) < 0) {

353 
	`Ârötf
(
°dîr
, 
	`_
("WARNING: bad format "

354 "⁄Üöê%d o‡%s\n"), 
löío
, 
fûíame
);

357 i‡(!
fs
)

359 i‡(
fs
->
∑s¢o
 < 0)

360 
fs
->
∑s¢o
 = 0;

362 
ﬁd_f°ab
 = 0;

365 
	`f˛o£
(
f
);

367 i‡(
ﬁd_f°ab
 && 
fûesys_öfo
) {

368 
	`Âuts
(
	`_
("\007\007\007"

371 " should fix you∏/ëc/f°ab fûêa†so⁄á†you c™.\n\n"), 
°dîr
);

373 
fs
 = 
fûesys_öfo
; fs; f†fs->
√xt
) {

374 
fs
->
∑s¢o
 = 1;

377 
	}
}

380 
fs_öfo
 *
	$lookup
(*
fûesys
)

382 
fs_öfo
 *
fs
;

385 i‡(
fûesys
 =
NULL
)

386  
NULL
;

388 
fs
 = 
fûesys_öfo
; fs; f†fs->
√xt
) {

389 i‡(!
	`°rcmp
(
fûesys
, 
fs
->
devi˚
) ||

390 (
fs
->
mou¡±
 && !
	`°rcmp
(
fûesys
, fs->mountpt)))

394  
fs
;

395 
	}
}

398 *
	$föd_fsck
(*
ty≥
)

400 *
s
;

401 c⁄° *
çl
;

402 
¥og
[256];

403 *
p
 = 
	`°rög_c›y
(
fsck_∑th
);

404 
°©
 
°
;

407 
çl
 = (
	`°∫cmp
(
ty≥
, "fsck.", 5) ? "%s/fsck.%s" : "%s/%s");

409 
s
 = 
	`°πok
(
p
, ":"); s; s = såtok(
NULL
, ":")) {

410 
	`•rötf
(
¥og
, 
çl
, 
s
, 
ty≥
);

411 i‡(
	`°©
(
¥og
, &
°
) == 0) ;

413 
	`‰ì
(
p
);

414 (
s
 ? 
¥og
 : 
NULL
);

415 
	}
}

417 
	$¥ogªss_a˘ive
(
NOARGS
)

419 
fsck_ö°™˚
 *
ö°
;

421 
ö°
 = 
ö°™˚_li°
; in°; in° = in°->
√xt
) {

422 i‡(
ö°
->
Êags
 & 
FLAG_DONE
)

424 i‡(
ö°
->
Êags
 & 
FLAG_PROGRESS
)

428 
	}
}

434 
	$execuã
(c⁄° *
ty≥
, c⁄° *
devi˚
, c⁄° *
m¡±
,

435 
öãø˘ive
)

437 *
s
, *
¨gv
[80], 
¥og
[80];

438 
¨gc
, 
i
;

439 
fsck_ö°™˚
 *
ö°
, *
p
;

440 
pid_t
 
pid
;

442 
ö°
 = 
	`mÆloc
((
fsck_ö°™˚
));

443 i‡(!
ö°
)

444  
ENOMEM
;

445 
	`mem£t
(
ö°
, 0, (
fsck_ö°™˚
));

447 
	`•rötf
(
¥og
, "fsck.%s", 
ty≥
);

448 
¨gv
[0] = 
	`°rög_c›y
(
¥og
);

449 
¨gc
 = 1;

451 
i
=0; i <
num_¨gs
; i++)

452 
¨gv
[
¨gc
++] = 
	`°rög_c›y
(
¨gs
[
i
]);

454 i‡(
¥ogªss
) {

455 i‡((
	`°rcmp
(
ty≥
, "ext2") == 0) ||

456 (
	`°rcmp
(
ty≥
, "ext3") == 0) ||

457 (
	`°rcmp
(
ty≥
, "ext4") == 0) ||

458 (
	`°rcmp
(
ty≥
, "ext4dev") == 0)) {

459 
tmp
[80];

461 
tmp
[0] = 0;

462 i‡(!
	`¥ogªss_a˘ive
()) {

463 
	`¢¥ötf
(
tmp
, 80, "-C%d", 
¥ogªss_fd
);

464 
ö°
->
Êags
 |
FLAG_PROGRESS
;

465 } i‡(
¥ogªss_fd
)

466 
	`¢¥ötf
(
tmp
, 80, "-C%d", 
¥ogªss_fd
 * -1);

467 i‡(
tmp
[0])

468 
¨gv
[
¨gc
++] = 
	`°rög_c›y
(
tmp
);

472 
¨gv
[
¨gc
++] = 
	`°rög_c›y
(
devi˚
);

473 
¨gv
[
¨gc
] = 0;

475 
s
 = 
	`föd_fsck
(
¥og
);

476 i‡(
s
 =
NULL
) {

477 
	`Ârötf
(
°dîr
, 
	`_
("fsck: %s:ÇŸ found\n"), 
¥og
);

478 
	`‰ì
(
ö°
);

479  
ENOENT
;

482 i‡(
vîbo£
 || 
n€xecuã
) {

483 
	`¥ötf
("[%†(%dË-- %s] ", 
s
, 
num_ru¬ög
,

484 
m¡±
 ? m¡± : 
devi˚
);

485 
i
=0; i < 
¨gc
; i++)

486 
	`¥ötf
("%†", 
¨gv
[
i
]);

487 
	`¥ötf
("\n");

491 i‡(
n€xecuã
)

492 
pid
 = -1;

493 i‡((
pid
 = 
	`f‹k
()) < 0) {

494 
	`≥º‹
("fork");

495 
	`‰ì
(
ö°
);

496  
î∫o
;

497 } i‡(
pid
 == 0) {

498 i‡(!
öãø˘ive
)

499 
	`˛o£
(0);

500 (Ë
	`execv
(
s
, 
¨gv
);

501 
	`≥º‹
(
¨gv
[0]);

502 
	`‰ì
(
ö°
);

503 
	`exô
(
EXIT_ERROR
);

506 
i
=0; i < 
¨gc
; i++)

507 
	`‰ì
(
¨gv
[
i
]);

509 
ö°
->
pid
 =Öid;

510 
ö°
->
¥og
 = 
	`°rög_c›y
(prog);

511 
ö°
->
ty≥
 = 
	`°rög_c›y
(type);

512 
ö°
->
devi˚
 = 
	`°rög_c›y
(device);

513 
ö°
->
ba£_devi˚
 = 
	`ba£_devi˚
(
devi˚
);

514 
ö°
->
°¨t_time
 = 
	`time
(0);

515 
ö°
->
√xt
 = 
NULL
;

520 
p
 = 
ö°™˚_li°
;Ö &&Ö->
√xt
;Ö =Ö->next);

522 i‡(
p
)

523 
p
->
√xt
 = 
ö°
;

525 
ö°™˚_li°
 = 
ö°
;

528 
	}
}

533 
	$kûl_Æl
(
signum
)

535 
fsck_ö°™˚
 *
ö°
;

536 
n
 = 0;

538 
ö°
 = 
ö°™˚_li°
; in°; in° = in°->
√xt
) {

539 i‡(
ö°
->
Êags
 & 
FLAG_DONE
)

541 
	`kûl
(
ö°
->
pid
, 
signum
);

542 
n
++;

544  
n
;

545 
	}
}

551 
fsck_ö°™˚
 *
	$waô_⁄e
(
Êags
)

553 
°©us
;

554 
sig
;

555 
fsck_ö°™˚
 *
ö°
, *
ö°2
, *
¥ev
;

556 
pid_t
 
pid
;

558 i‡(!
ö°™˚_li°
)

559  
NULL
;

561 i‡(
n€xecuã
) {

562 
ö°
 = 
ö°™˚_li°
;

563 
¥ev
 = 0;

564 #ifde‡
RANDOM_DEBUG


565 
ö°
->
√xt
 && (
	`øndom
() & 1)) {

566 
¥ev
 = 
ö°
;

567 
ö°
 = in°->
√xt
;

570 
ö°
->
exô_°©us
 = 0;

571 
ªt_ö°
;

578 
ö°
 = 
¥ev
 = 
NULL
;

581 
pid
 = 
	`waôpid
(-1, &
°©us
, 
Êags
);

582 i‡(
ˇn˚l_ªque°ed
 && !
kûl_£¡
) {

583 
	`kûl_Æl
(
SIGTERM
);

584 
kûl_£¡
++;

586 i‡((
pid
 =0Ë&& (
Êags
 & 
WNOHANG
))

587  
NULL
;

588 i‡(
pid
 < 0) {

589 i‡((
î∫o
 =
EINTR
Ë|| (î∫ÿ=
EAGAIN
))

591 i‡(
î∫o
 =
ECHILD
) {

592 
	`Ârötf
(
°dîr
,

593 
	`_
("%s: wait: No more childÖrocess?!?\n"),

594 
¥og«me
);

595  
NULL
;

597 
	`≥º‹
("wait");

600 
¥ev
 = 0, 
ö°
 = 
ö°™˚_li°
;

601 
ö°
;

602 
¥ev
 = 
ö°
, in° = in°->
√xt
) {

603 i‡(
ö°
->
pid
 ==Öid)

606 } !
ö°
);

608 i‡(
	`WIFEXITED
(
°©us
))

609 
°©us
 = 
	`WEXITSTATUS
(status);

610 i‡(
	`WIFSIGNALED
(
°©us
)) {

611 
sig
 = 
	`WTERMSIG
(
°©us
);

612 i‡(
sig
 =
SIGINT
) {

613 
°©us
 = 
EXIT_UNCORRECTED
;

615 
	`¥ötf
(
	`_
("Warning... %s for device %sÉxited "

617 
ö°
->
¥og
, in°->
devi˚
, 
sig
);

618 
°©us
 = 
EXIT_ERROR
;

621 
	`¥ötf
(
	`_
("%s %s: status is %x, shouldÇever happen.\n"),

622 
ö°
->
¥og
, in°->
devi˚
, 
°©us
);

623 
°©us
 = 
EXIT_ERROR
;

625 
ö°
->
exô_°©us
 = 
°©us
;

626 
ö°
->
Êags
 |
FLAG_DONE
;

627 i‡(
¥ogªss
 && (
ö°
->
Êags
 & 
FLAG_PROGRESS
) &&

628 !
	`¥ogªss_a˘ive
()) {

629 
ö°2
 = 
ö°™˚_li°
; in°2; in°2 = in°2->
√xt
) {

630 i‡(
ö°2
->
Êags
 & 
FLAG_DONE
)

632 i‡(
	`°rcmp
(
ö°2
->
ty≥
, "ext2") &&

633 
	`°rcmp
(
ö°2
->
ty≥
, "ext3") &&

634 
	`°rcmp
(
ö°2
->
ty≥
, "ext4") &&

635 
	`°rcmp
(
ö°2
->
ty≥
, "ext4dev"))

642 i‡(
ö°2
->
°¨t_time
 < 
	`time
(0)+2) {

643 i‡(
	`f‹k
() == 0) {

644 
	`¶ìp
(1);

645 
	`kûl
(
ö°2
->
pid
, 
SIGUSR1
);

646 
	`exô
(0);

649 
	`kûl
(
ö°2
->
pid
, 
SIGUSR1
);

650 
ö°2
->
Êags
 |
FLAG_PROGRESS
;

654 
ªt_ö°
:

655 i‡(
¥ev
)

656 
¥ev
->
√xt
 = 
ö°
->next;

658 
ö°™˚_li°
 = 
ö°
->
√xt
;

659 i‡(
vîbo£
 > 1)

660 
	`¥ötf
(
	`_
("Finished with %s (exit status %d)\n"),

661 
ö°
->
devi˚
, in°->
exô_°©us
);

662 
num_ru¬ög
--;

663  
ö°
;

664 
	}
}

666 
	#FLAG_WAIT_ALL
 0

	)

667 
	#FLAG_WAIT_ATLEAST_ONE
 1

	)

672 
	$waô_m™y
(
Êags
)

674 
fsck_ö°™˚
 *
ö°
;

675 
globÆ_°©us
 = 0;

676 
waô_Êags
 = 0;

678 (
ö°
 = 
	`waô_⁄e
(
waô_Êags
))) {

679 
globÆ_°©us
 |
ö°
->
exô_°©us
;

680 
	`‰ì_ö°™˚
(
ö°
);

681 #ifde‡
RANDOM_DEBUG


682 i‡(
n€xecuã
 && (
Êags
 & 
WNOHANG
Ë&& !(
	`øndom
() % 3))

685 i‡(
Êags
 & 
FLAG_WAIT_ATLEAST_ONE
)

686 
waô_Êags
 = 
WNOHANG
;

688  
globÆ_°©us
;

689 
	}
}

701 
	$fsck_devi˚
(
fs_öfo
 *
fs
, 
öãø˘ive
)

703 c⁄° *
ty≥
;

704 
ªtvÆ
;

706 
	`öãΩªt_ty≥
(
fs
);

708 i‡(
	`°rcmp
(
fs
->
ty≥
, "auto") != 0)

709 
ty≥
 = 
fs
->type;

710 i‡(
f°y≥
 && 
	`°∫cmp
(fstype, "no", 2) &&

711 
	`°∫cmp
(
f°y≥
, "opts=", 5) && strncmp(fstype, "loop", 4) &&

712 !
	`°rchr
(
f°y≥
, ','))

713 
ty≥
 = 
f°y≥
;

715 
ty≥
 = 
DEFAULT_FSTYPE
;

717 
num_ru¬ög
++;

718 
ªtvÆ
 = 
	`execuã
(
ty≥
, 
fs
->
devi˚
, fs->
mou¡±
, 
öãø˘ive
);

719 i‡(
ªtvÆ
) {

720 
	`Ârötf
(
°dîr
, 
	`_
("%s: Error %d whileÉxecuting fsck.%s "

721 "f‹ %s\n"), 
¥og«me
, 
ªtvÆ
, 
ty≥
, 
fs
->
devi˚
);

722 
num_ru¬ög
--;

724 
	}
}

730 
	sfs_ty≥_compûe
 {

731 **
	mli°
;

732 *
	mty≥
;

733 
	m√g©e
;

734 } 
	gfs_ty≥_compûed
;

736 
	#FS_TYPE_NORMAL
 0

	)

737 
	#FS_TYPE_OPT
 1

	)

738 
	#FS_TYPE_NEGOPT
 2

	)

740 c⁄° *
	gfs_ty≥_sy¡ax_îr‹
 =

741 
N_
("Eitheráll orÇone ofÅhe filesystemÅypesÖassedÅo -t must beÖrefixed\n"

744 
	$compûe_fs_ty≥
(*
fs_ty≥
, 
fs_ty≥_compûe
 *
cmp
)

746 *
˝
, *
li°
, *
s
;

747 
num
 = 2;

748 
√g©e
, 
fú°_√g©e
 = 1;

750 i‡(
fs_ty≥
) {

751 
˝
=
fs_ty≥
; *cp; cp++) {

752 i‡(*
˝
 == ',')

753 
num
++;

757 
cmp
->
li°
 = 
	`mÆloc
(
num
 * (*));

758 
cmp
->
ty≥
 = 
	`mÆloc
(
num
 * ());

759 i‡(!
cmp
->
li°
 || !cmp->
ty≥
) {

760 
	`Âuts
(
	`_
("Couldn'tállocate memory for filesystemÅypes\n"),

761 
°dîr
);

762 
	`exô
(
EXIT_ERROR
);

764 
	`mem£t
(
cmp
->
li°
, 0, 
num
 * (*));

765 
	`mem£t
(
cmp
->
ty≥
, 0, 
num
 * ());

766 
cmp
->
√g©e
 = 0;

768 i‡(!
fs_ty≥
)

771 
li°
 = 
	`°rög_c›y
(
fs_ty≥
);

772 
num
 = 0;

773 
s
 = 
	`°πok
(
li°
, ",");

774 
s
) {

775 
√g©e
 = 0;

776 i‡(
	`°∫cmp
(
s
, "no", 2) == 0) {

777 
s
 += 2;

778 
√g©e
 = 1;

779 } i‡(*
s
 == '!') {

780 
s
++;

781 
√g©e
 = 1;

783 i‡(
	`°rcmp
(
s
, "loop") == 0)

785 
lo›_•ecül_ˇ£
;

786 i‡(
	`°∫cmp
(
s
, "opts=", 5) == 0) {

787 
s
 += 5;

788 
lo›_•ecül_ˇ£
:

789 
cmp
->
ty≥
[
num
] = 
√g©e
 ? 
FS_TYPE_NEGOPT
 : 
FS_TYPE_OPT
;

791 i‡(
fú°_√g©e
) {

792 
cmp
->
√g©e
 =Çegate;

793 
fú°_√g©e
 = 0;

795 i‡((
√g©e
 && !
cmp
->negate) ||

796 (!
√g©e
 && 
cmp
->negate)) {

797 
	`Âuts
(
	`_
(
fs_ty≥_sy¡ax_îr‹
), 
°dîr
);

798 
	`exô
(
EXIT_USAGE
);

802 
	`¥ötf
("Addög %†tÿli° (ty≥ %d).\n", 
s
, 
cmp
->
ty≥
[
num
]);

804 
cmp
->
li°
[
num
++] = 
	`°rög_c›y
(
s
);

805 
s
 = 
	`°πok
(
NULL
, ",");

807 
	`‰ì
(
li°
);

808 
	}
}

814 
	$›t_ö_li°
(c⁄° *
›t
, *
›éi°
)

816 *
li°
, *
s
;

818 i‡(!
›éi°
)

820 
li°
 = 
	`°rög_c›y
(
›éi°
);

822 
s
 = 
	`°πok
(
li°
, ",");

823 
s
) {

824 i‡(
	`°rcmp
(
s
, 
›t
) == 0) {

825 
	`‰ì
(
li°
);

828 
s
 = 
	`°πok
(
NULL
, ",");

830 
	`‰ì
(
li°
);

832 
	}
}

835 
	$fs_m©ch
(
fs_öfo
 *
fs
, 
fs_ty≥_compûe
 *
cmp
)

837 
n
, 
ªt
 = 0, 
checked_ty≥
 = 0;

838 *
˝
;

840 i‡(
cmp
->
li°
 == 0 || cmp->list[0] == 0)

843 
n
=0; (
˝
 = 
cmp
->
li°
[n]);Ç++) {

844 
cmp
->
ty≥
[
n
]) {

845 
FS_TYPE_NORMAL
:

846 
checked_ty≥
++;

847 i‡(
	`°rcmp
(
˝
, 
fs
->
ty≥
) == 0) {

848 
ªt
 = 1;

851 
FS_TYPE_NEGOPT
:

852 i‡(
	`›t_ö_li°
(
˝
, 
fs
->
›ts
))

855 
FS_TYPE_OPT
:

856 i‡(!
	`›t_ö_li°
(
˝
, 
fs
->
›ts
))

861 i‡(
checked_ty≥
 == 0)

863  (
cmp
->
√g©e
 ? !
ªt
 :Ñet);

864 
	}
}

867 
	$ign‹e
(
fs_öfo
 *
fs
)

869 c⁄° **
ù
;

870 
w™ãd
 = 0;

875 i‡(
fs
->
∑s¢o
 == 0)

881 i‡(
	`›t_ö_li°
("böd", 
fs
->
›ts
)) {

882 
	`Ârötf
(
°dîr
,

883 
	`_
("%s: skipping badÜine in /etc/fstab: bind mount withÇonzero fsckÖassÇumber\n"),

884 
fs
->
mou¡±
);

888 
	`öãΩªt_ty≥
(
fs
);

894 i‡(!
	`fs_m©ch
(
fs
, &
fs_ty≥_compûed
))  1;

897 
ù
 = 
ign‹ed_ty≥s
; *ip; ip++)

898 i‡(
	`°rcmp
(
fs
->
ty≥
, *
ù
) == 0)  1;

901 
ù
 = 
ªÆly_w™ãd
; *ip; ip++)

902 i‡(
	`°rcmp
(
fs
->
ty≥
, *
ù
) == 0) {

903 
w™ãd
 = 1;

908 i‡(
	`föd_fsck
(
fs
->
ty≥
Ë=
NULL
) {

909 i‡(
w™ãd
)

910 
	`Ârötf
(
°dîr
, 
	`_
("fsck: cannot check %s: fsck.%sÇot found\n"),

911 
fs
->
devi˚
, fs->
ty≥
);

917 
	}
}

923 
	$devi˚_Æªady_a˘ive
(*
devi˚
)

925 
fsck_ö°™˚
 *
ö°
;

926 *
ba£
;

928 i‡(
f‹˚_Æl_∑øŒñ
)

931 #ifde‡
BASE_MD


933 i‡(
ö°™˚_li°
 &&

934 (!
	`°∫cmp
(
ö°™˚_li°
->
devi˚
, 
BASE_MD
, (BASE_MD)-1) ||

935 !
	`°∫cmp
(
devi˚
, 
BASE_MD
, (BASE_MD)-1)))

939 
ba£
 = 
	`ba£_devi˚
(
devi˚
);

944 i‡(!
ba£
)

945  (
ö°™˚_li°
 != 0);

946 
ö°
 = 
ö°™˚_li°
; in°; in° = in°->
√xt
) {

947 i‡(!
ö°
->
ba£_devi˚
 || !
	`°rcmp
(
ba£
, inst->base_device)) {

948 
	`‰ì
(
ba£
);

952 
	`‰ì
(
ba£
);

954 
	}
}

957 
	$check_Æl
(
NOARGS
)

959 
fs_öfo
 *
fs
 = 
NULL
;

960 
°©us
 = 
EXIT_OK
;

961 
nŸ_d⁄e_yë
 = 1;

962 
∑s¢o
 = 1;

963 
∑ss_d⁄e
;

965 i‡(
vîbo£
)

966 
	`Âuts
(
	`_
("CheckögáŒ fûêsy°ems.\n"), 
°dout
);

973 
fs
 = 
fûesys_öfo
; fs; f†fs->
√xt
) {

974 i‡(
	`ign‹e
(
fs
))

975 
fs
->
Êags
 |
FLAG_DONE
;

981 i‡(!
∑øŒñ_roŸ
) {

982 
fs
 = 
fûesys_öfo
; fs; f†fs->
√xt
) {

983 i‡(!
	`°rcmp
(
fs
->
mou¡±
, "/"))

986 i‡(
fs
) {

987 i‡(!
skù_roŸ
 && !
	`ign‹e
(
fs
) &&

988 !(
ign‹e_mou¡ed
 && 
	`is_mou¡ed
(
fs
->
devi˚
))) {

989 
	`fsck_devi˚
(
fs
, 1);

990 
°©us
 |
	`waô_m™y
(
FLAG_WAIT_ALL
);

991 i‡(
°©us
 > 
EXIT_NONDESTRUCT
)

992  
°©us
;

994 
fs
->
Êags
 |
FLAG_DONE
;

1001 i‡(
skù_roŸ
)

1002 
fs
 = 
fûesys_öfo
; fs; f†fs->
√xt
)

1003 i‡(!
	`°rcmp
(
fs
->
mou¡±
, "/"))

1004 
fs
->
Êags
 |
FLAG_DONE
;

1006 
nŸ_d⁄e_yë
) {

1007 
nŸ_d⁄e_yë
 = 0;

1008 
∑ss_d⁄e
 = 1;

1010 
fs
 = 
fûesys_öfo
; fs; f†fs->
√xt
) {

1011 i‡(
ˇn˚l_ªque°ed
)

1013 i‡(
fs
->
Êags
 & 
FLAG_DONE
)

1020 i‡(
fs
->
∑s¢o
 >Öassno) {

1021 
nŸ_d⁄e_yë
++;

1024 i‡(
ign‹e_mou¡ed
 && 
	`is_mou¡ed
(
fs
->
devi˚
)) {

1025 
fs
->
Êags
 |
FLAG_DONE
;

1033 i‡(
	`devi˚_Æªady_a˘ive
(
fs
->
devi˚
)) {

1034 
∑ss_d⁄e
 = 0;

1040 
	`fsck_devi˚
(
fs
, 
£rülize
);

1041 
fs
->
Êags
 |
FLAG_DONE
;

1048 i‡(
£rülize
 ||

1049 (
max_ru¬ög
 && (
num_ru¬ög
 >= max_running))) {

1050 
∑ss_d⁄e
 = 0;

1054 i‡(
ˇn˚l_ªque°ed
)

1056 i‡(
vîbo£
 > 1)

1057 
	`¥ötf
(
	`_
("--waôög-- (∑s†%d)\n"), 
∑s¢o
);

1058 
°©us
 |
	`waô_m™y
(
∑ss_d⁄e
 ? 
FLAG_WAIT_ALL
 :

1059 
FLAG_WAIT_ATLEAST_ONE
);

1060 i‡(
∑ss_d⁄e
) {

1061 i‡(
vîbo£
 > 1)

1062 
	`¥ötf
("----------------------------------\n");

1063 
∑s¢o
++;

1065 
nŸ_d⁄e_yë
++;

1067 i‡(
ˇn˚l_ªque°ed
 && !
kûl_£¡
) {

1068 
	`kûl_Æl
(
SIGTERM
);

1069 
kûl_£¡
++;

1071 
°©us
 |
	`waô_m™y
(
FLAG_WAIT_ATLEAST_ONE
);

1072  
°©us
;

1073 
	}
}

1075 
	$ußge
(
NOARGS
)

1077 
	`Âuts
(
	`_
("Ußge: fsck [-AMNPRTV] [ -C [ fd ] ] [-àf°y≥] [fs-›ti⁄s] [fûesy†...]\n"), 
°dîr
);

1078 
	`exô
(
EXIT_USAGE
);

1079 
	}
}

1081 #ifde‡
HAVE_SIGNAL_H


1082 
sig«l_ˇn˚l
(
sig
 
FSCK_ATTR
((
unu£d
)))

1084 
	gˇn˚l_ªque°ed
++;

1088 
	$PRS
(
¨gc
, *
¨gv
[])

1090 
i
, 
j
;

1091 *
¨g
, *
dev
, *
tmp
 = 0;

1092 
›ti⁄s
[128];

1093 
›t
 = 0;

1094 
›ts_f‹_fsck
 = 0;

1095 #ifde‡
HAVE_SIGNAL_H


1096 
siga˘i⁄
 
ß
;

1101 
	`mem£t
(&
ß
, 0, (
siga˘i⁄
));

1102 
ß
.
ß_h™dÀr
 = 
sig«l_ˇn˚l
;

1103 
	`siga˘i⁄
(
SIGINT
, &
ß
, 0);

1104 
	`siga˘i⁄
(
SIGTERM
, &
ß
, 0);

1107 
num_devi˚s
 = 0;

1108 
num_¨gs
 = 0;

1109 
ö°™˚_li°
 = 0;

1111 
¥og«me
 = 
¨gv
[0];

1113 
i
=1; i < 
¨gc
; i++) {

1114 
¨g
 = 
¨gv
[
i
];

1115 i‡(!
¨g
)

1117 i‡((
¨g
[0] ='/' && !
›ts_f‹_fsck
Ë|| 
	`°rchr
(arg, '=')) {

1118 i‡(
num_devi˚s
 >
MAX_DEVICES
) {

1119 
	`Ârötf
(
°dîr
, 
	`_
("%s:Åoo many devices\n"),

1120 
¥og«me
);

1121 
	`exô
(
EXIT_ERROR
);

1123 
dev
 = 
	`blkid_gë_dev«me
(
ˇche
, 
¨g
, 
NULL
);

1124 i‡(!
dev
 && 
	`°rchr
(
¨g
, '=')) {

1129 i‡(
	`ac˚ss
("/¥oc/∑πôi⁄s", 
R_OK
) < 0) {

1130 
	`Ârötf
(
°dîr
, "Couldn't open /proc/partitions: %s\n",

1131 
	`°ªº‹
(
î∫o
));

1132 
	`Ârötf
(
°dîr
, "Is /proc mounted?\n");

1133 
	`exô
(
EXIT_ERROR
);

1139 i‡(
	`gëeuid
())

1140 
	`Ârötf
(
°dîr
,

1141 "Mu° bêroŸÅÿsˇ¿f‹ m©chög fûesy°ems: %s\n", 
¨g
);

1143 
	`Ârötf
(
°dîr
,

1144 "Couldn'àföd m©chög fûesy°em: %s\n", 
¨g
);

1145 
	`exô
(
EXIT_ERROR
);

1147 
devi˚s
[
num_devi˚s
++] = 
dev
 ? dev : 
	`°rög_c›y
(
¨g
);

1150 i‡(
¨g
[0] !'-' || 
›ts_f‹_fsck
) {

1151 i‡(
num_¨gs
 >
MAX_ARGS
) {

1152 
	`Ârötf
(
°dîr
, 
	`_
("%s:Åoo manyárguments\n"),

1153 
¥og«me
);

1154 
	`exô
(
EXIT_ERROR
);

1156 
¨gs
[
num_¨gs
++] = 
	`°rög_c›y
(
¨g
);

1159 
j
=1; 
¨g
[j]; j++) {

1160 i‡(
›ts_f‹_fsck
) {

1161 
›ti⁄s
[++
›t
] = 
¨g
[
j
];

1164 
¨g
[
j
]) {

1166 
dﬂŒ
++;

1169 
¥ogªss
++;

1170 i‡(
¨g
[
j
+1]) {

1171 
¥ogªss_fd
 = 
	`°rög_to_öt
(
¨g
+
j
+1);

1172 i‡(
¥ogªss_fd
 < 0)

1173 
¥ogªss_fd
 = 0;

1175 
√xt_¨g
;

1176 } i‡((
i
+1Ë< 
¨gc
 &&

1177 !
	`°∫cmp
(
¨gv
[
i
+1], "-", 1) == 0) {

1178 
¥ogªss_fd
 = 
	`°rög_to_öt
(
¨gv
[
i
]);

1179 i‡(
¥ogªss_fd
 < 0)

1180 
¥ogªss_fd
 = 0;

1182 
√xt_¨g
;

1183 
i
++;

1188 
vîbo£
++;

1191 
n€xecuã
++;

1194 
skù_roŸ
++;

1197 
nŸôÀ
++;

1200 
ign‹e_mou¡ed
++;

1203 
∑øŒñ_roŸ
++;

1206 
£rülize
++;

1209 
tmp
 = 0;

1210 i‡(
f°y≥
)

1211 
	`ußge
();

1212 i‡(
¨g
[
j
+1])

1213 
tmp
 = 
¨g
+
j
+1;

1214 i‡((
i
+1Ë< 
¨gc
)

1215 
tmp
 = 
¨gv
[++
i
];

1217 
	`ußge
();

1218 
f°y≥
 = 
	`°rög_c›y
(
tmp
);

1219 
	`compûe_fs_ty≥
(
f°y≥
, &
fs_ty≥_compûed
);

1220 
√xt_¨g
;

1222 
›ts_f‹_fsck
++;

1225 
	`ußge
();

1228 
›ti⁄s
[++
›t
] = 
¨g
[
j
];

1232 
√xt_¨g
:

1233 i‡(
›t
) {

1234 
›ti⁄s
[0] = '-';

1235 
›ti⁄s
[++
›t
] = '\0';

1236 i‡(
num_¨gs
 >
MAX_ARGS
) {

1237 
	`Ârötf
(
°dîr
,

1238 
	`_
("%s:Åoo manyárguments\n"),

1239 
¥og«me
);

1240 
	`exô
(
EXIT_ERROR
);

1242 
¨gs
[
num_¨gs
++] = 
	`°rög_c›y
(
›ti⁄s
);

1243 
›t
 = 0;

1246 i‡(
	`gëív
("FSCK_FORCE_ALL_PARALLEL"))

1247 
f‹˚_Æl_∑øŒñ
++;

1248 i‡((
tmp
 = 
	`gëív
("FSCK_MAX_INST")))

1249 
max_ru¬ög
 = 
	`©oi
(
tmp
);

1250 
	}
}

1252 
	$maö
(
¨gc
, *
¨gv
[])

1254 
i
, 
°©us
 = 0;

1255 
öãø˘ive
 = 0;

1256 *
ﬁd∑th
 = 
	`gëív
("PATH");

1257 c⁄° *
f°ab
;

1258 
fs_öfo
 *
fs
;

1260 
	`£tvbuf
(
°dout
, 
NULL
, 
_IONBF
, 
BUFSIZ
);

1261 
	`£tvbuf
(
°dîr
, 
NULL
, 
_IONBF
, 
BUFSIZ
);

1263 #ifde‡
ENABLE_NLS


1264 
	`£éoˇÀ
(
LC_MESSAGES
, "");

1265 
	`£éoˇÀ
(
LC_CTYPE
, "");

1266 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

1267 
	`ãxtdomaö
(
NLS_CAT_NAME
);

1269 
	`blkid_gë_ˇche
(&
ˇche
, 
NULL
);

1270 
	`PRS
(
¨gc
, 
¨gv
);

1272 i‡(!
nŸôÀ
)

1273 
	`¥ötf
("fsck %†(%s)\n", 
E2FSPROGS_VERSION
, 
E2FSPROGS_DATE
);

1275 
f°ab
 = 
	`gëív
("FSTAB_FILE");

1276 i‡(!
f°ab
)

1277 
f°ab
 = 
_PATH_MNTTAB
;

1278 
	`lﬂd_fs_öfo
(
f°ab
);

1281 i‡(
ﬁd∑th
) {

1282 
fsck_∑th
 = 
	`mÆloc
 (
	`°æí
 (
fsck_¥efix_∑th
) + 1 +

1283 
	`°æí
 (
ﬁd∑th
) + 1);

1284 i‡(!
fsck_∑th
) {

1285 
	`Ârötf
(
°dîr
, "%s: U«bÀÅÿÆloˇã mem‹y f‹ fsck_∑th\n", 
¥og«me
);

1286 
	`exô
(
EXIT_ERROR
);

1288 
	`°r˝y
 (
fsck_∑th
, 
fsck_¥efix_∑th
);

1289 
	`°rˇt
 (
fsck_∑th
, ":");

1290 
	`°rˇt
 (
fsck_∑th
, 
ﬁd∑th
);

1292 
fsck_∑th
 = 
	`°rög_c›y
(
fsck_¥efix_∑th
);

1295 i‡((
num_devi˚s
 =1Ë|| (
£rülize
))

1296 
öãø˘ive
 = 1;

1299 i‡(
dﬂŒ
)

1300  
	`check_Æl
();

1302 i‡(
num_devi˚s
 == 0) {

1303 
£rülize
++;

1304 
öãø˘ive
++;

1305  
	`check_Æl
();

1307 
i
 = 0 ; i < 
num_devi˚s
; i++) {

1308 i‡(
ˇn˚l_ªque°ed
) {

1309 i‡(!
kûl_£¡
) {

1310 
	`kûl_Æl
(
SIGTERM
);

1311 
kûl_£¡
++;

1315 
fs
 = 
	`lookup
(
devi˚s
[
i
]);

1316 i‡(!
fs
) {

1317 
fs
 = 
	`¸óã_fs_devi˚
(
devi˚s
[
i
], 0, "auto",

1319 i‡(!
fs
)

1322 i‡(
ign‹e_mou¡ed
 && 
	`is_mou¡ed
(
fs
->
devi˚
))

1324 
	`fsck_devi˚
(
fs
, 
öãø˘ive
);

1325 i‡(
£rülize
 ||

1326 (
max_ru¬ög
 && (
num_ru¬ög
 >= max_running))) {

1327 
fsck_ö°™˚
 *
ö°
;

1329 
ö°
 = 
	`waô_⁄e
(0);

1330 i‡(
ö°
) {

1331 
°©us
 |
ö°
->
exô_°©us
;

1332 
	`‰ì_ö°™˚
(
ö°
);

1334 i‡(
vîbo£
 > 1)

1335 
	`¥ötf
("----------------------------------\n");

1338 
°©us
 |
	`waô_m™y
(
FLAG_WAIT_ALL
);

1339 
	`‰ì
(
fsck_∑th
);

1340 
	`blkid_put_ˇche
(
ˇche
);

1341  
°©us
;

1342 
	}
}

	@fsck.h

5 
	~<time.h
>

7 #ifde‡
__STDC__


8 
	#NOARGS
 

	)

10 
	#NOARGS


	)

11 c⁄°

	)

14 #ifde‡
__GNUC__


15 
	#FSCK_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

17 
	#FSCK_ATTR
(
x
)

	)

21 #i‚de‡
DEFAULT_FSTYPE


22 
	#DEFAULT_FSTYPE
 "ext2"

	)

25 
	#MAX_DEVICES
 32

	)

26 
	#MAX_ARGS
 32

	)

28 
	#EXIT_OK
 0

	)

29 
	#EXIT_NONDESTRUCT
 1

	)

30 
	#EXIT_DESTRUCT
 2

	)

31 
	#EXIT_UNCORRECTED
 4

	)

32 
	#EXIT_ERROR
 8

	)

33 
	#EXIT_USAGE
 16

	)

34 
	#EXIT_LIBRARY
 128

	)

40 
	sfs_öfo
 {

41 *
	mdevi˚
;

42 *
	mmou¡±
;

43 *
	mty≥
;

44 *
	m›ts
;

45 
	m‰eq
;

46 
	m∑s¢o
;

47 
	mÊags
;

48 
fs_öfo
 *
	m√xt
;

51 
	#FLAG_DONE
 1

	)

52 
	#FLAG_PROGRESS
 2

	)

57 
	sfsck_ö°™˚
 {

58 
	mpid
;

59 
	mÊags
;

60 
	mexô_°©us
;

61 
time_t
 
	m°¨t_time
;

62 * 
	m¥og
;

63 * 
	mty≥
;

64 * 
	mdevi˚
;

65 * 
	mba£_devi˚
;

66 
fsck_ö°™˚
 *
	m√xt
;

69 *
ba£_devi˚
(c⁄° *
devi˚
);

70 c⁄° *
idítify_fs
(c⁄° *
fs_«me
, c⁄° *
fs_ty≥s
);

73 
is_mou¡ed
(c⁄° *
fûe
);

	@ismounted.c

12 
	~<°dio.h
>

13 #i‡
HAVE_UNISTD_H


14 
	~<uni°d.h
>

16 #ifde‡
HAVE_STDLIB_H


17 
	~<°dlib.h
>

19 #i‡
HAVE_ERRNO_H


20 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 #ifde‡
HAVE_LINUX_FD_H


24 
	~<löux/fd.h
>

26 #ifde‡
HAVE_MNTENT_H


27 
	~<m¡ít.h
>

29 
	~<°rög.h
>

30 
	~<sys/°©.h
>

31 
	~<˘y≥.h
>

33 
	~"fsck.h
"

38 
	#MF_MOUNTED
 1

	)

40 
	~"ë/com_îr.h
"

42 *
	$skù_ovî_bœnk
(*
˝
)

44 *
˝
 && 
	`is•a˚
(*cp))

45 
˝
++;

46  
˝
;

47 
	}
}

49 *
	$skù_ovî_w‹d
(*
˝
)

51 *
˝
 && !
	`is•a˚
(*cp))

52 
˝
++;

53  
˝
;

54 
	}
}

56 *
	$∑r£_w‹d
(**
buf
)

58 *
w‹d
, *
√xt
;

60 
w‹d
 = *
buf
;

61 i‡(*
w‹d
 == 0)

64 
w‹d
 = 
	`skù_ovî_bœnk
(word);

65 
√xt
 = 
	`skù_ovî_w‹d
(
w‹d
);

66 i‡(*
√xt
)

67 *
√xt
++ = 0;

68 *
buf
 = 
√xt
;

69  
w‹d
;

70 
	}
}

77 
îrcode_t
 
	$check_m¡ít_fûe
(c⁄° *
mèb_fûe
, c⁄° *
fûe
,

78 *
mou¡_Êags
)

80 #ifde‡
HAVE_MNTENT_H


81 
°©
 
°_buf
;

82 
îrcode_t
 
ªtvÆ
 = 0;

83 
dev_t
 
fûe_dev
=0, 
fûe_rdev
=0;

84 
öo_t
 
fûe_öo
=0;

85 
FILE
 *
f
;

86 
buf
[1024], *
devi˚
 = 0, *
m¡_dú
 = 0, *
˝
;

88 *
mou¡_Êags
 = 0;

89 i‡((
f
 = 
	`£tm¡ít
 (
mèb_fûe
, "r")Ë=
NULL
)

90  
î∫o
;

91 i‡(
	`°©
(
fûe
, &
°_buf
) == 0) {

92 i‡(
	`S_ISBLK
(
°_buf
.
°_mode
)) {

93 #i‚de‡
__GNU__


94 
fûe_rdev
 = 
°_buf
.
°_rdev
;

97 
fûe_dev
 = 
°_buf
.
°_dev
;

98 
fûe_öo
 = 
°_buf
.
°_öo
;

102 i‡(!
	`fgës
(
buf
, (buf), 
f
)) {

103 
devi˚
 = 
m¡_dú
 = 0;

106 
buf
[(buf)-1] = 0;

108 
˝
 = 
buf
;

109 
devi˚
 = 
	`∑r£_w‹d
(&
˝
);

110 i‡(!
devi˚
 || *device == '#')

112 
m¡_dú
 = 
	`∑r£_w‹d
(&
˝
);

114 i‡(
devi˚
[0] != '/')

117 i‡(
	`°rcmp
(
fûe
, 
devi˚
) == 0)

119 i‡(
	`°©
(
devi˚
, &
°_buf
) == 0) {

120 i‡(
	`S_ISBLK
(
°_buf
.
°_mode
)) {

121 #i‚de‡
__GNU__


122 i‡(
fûe_rdev
 && (fûe_rdev =
°_buf
.
°_rdev
))

126 i‡(
fûe_dev
 && ((fûe_dev =
°_buf
.
°_dev
) &&

127 (
fûe_öo
 =
°_buf
.
°_öo
)))

133 i‡(
m¡_dú
 == 0) {

134 #i‚de‡
__GNU__


142 i‡(
fûe_rdev
 && (
	`°©
("/", &
°_buf
) == 0) &&

143 (
°_buf
.
°_dev
 =
fûe_rdev
))

144 *
mou¡_Êags
 = 
MF_MOUNTED
;

146 
îrout
;

148 #i‚de‡
__GNU__


155 i‡(
	`°©
(
m¡_dú
, &
°_buf
) < 0) {

156 
ªtvÆ
 = 
î∫o
;

157 i‡(
ªtvÆ
 =
ENOENT
) {

158 #ifde‡
DEBUG


159 
	`¥ötf
("BogusÉntry in %s! (%s doesÇotÉxist)\n",

160 
mèb_fûe
, 
m¡_dú
);

162 
ªtvÆ
 = 0;

164 
îrout
;

166 i‡(
fûe_rdev
 && (
°_buf
.
°_dev
 != file_rdev)) {

167 #ifde‡
DEBUG


168 
	`¥ötf
("BogusÉntry in %s! (%sÇot mounted on %s)\n",

169 
mèb_fûe
, 
fûe
, 
m¡_dú
);

171 
îrout
;

174 *
mou¡_Êags
 = 
MF_MOUNTED
;

176 
ªtvÆ
 = 0;

177 
îrout
:

178 
	`ídm¡ít
 (
f
);

179  
ªtvÆ
;

183 
	}
}

185 
	$is_mou¡ed
(c⁄° *
fûe
)

187 
îrcode_t
 
ªtvÆ
;

188 
mou¡_Êags
 = 0;

190 #ifde‡
__löux__


191 
ªtvÆ
 = 
	`check_m¡ít_fûe
("/¥oc/mou¡s", 
fûe
, &
mou¡_Êags
);

192 i‡(
ªtvÆ
)

194 i‡(
mou¡_Êags
)

197 
ªtvÆ
 = 
	`check_m¡ít_fûe
("/ëc/mèb", 
fûe
, &
mou¡_Êags
);

198 i‡(
ªtvÆ
)

200  (
mou¡_Êags
);

201 
	}
}

203 #ifde‡
DEBUG


204 
	$maö
(
¨gc
, **
¨gv
)

206 i‡(
¨gc
 < 2) {

207 
	`Ârötf
(
°dîr
, "Ußge: %†devi˚\n", 
¨gv
[0]);

208 
	`exô
(1);

211 i‡(
	`is_mou¡ed
(
¨gv
[1]))

212 
	`¥ötf
("\t%†i†mou¡ed.\n", 
¨gv
[1]);

213 
	`exô
(0);

214 
	}
}

	@jfs_user.h

1 #i‚de‡
_JFS_USER_H


2 
	#_JFS_USER_H


	)

4 
	tkdev_t
;

6 
	~<ext2fs/kî√l-jbd.h
>

	@logsave.c

13 
	#_XOPEN_SOURCE
 600

	)

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<uni°d.h
>

18 
	~<°rög.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/waô.h
>

21 
	~<f˙é.h
>

22 
	~<time.h
>

23 
	~<î∫o.h
>

24 #ifde‡
HAVE_SIGNAL_H


25 
	~<sig«l.h
>

27 #ifde‡
HAVE_GETOPT_H


28 
	~<gë›t.h
>

30 *
›èrg
;

31 
›töd
;

34 
	goutfd
 = -1;

35 
	goutbufsize
 = 0;

36 *
	goutbuf
 = 0;

37 
	gvîbo£
 = 0;

38 
	gdo_skù
 = 0;

39 
	gskù_mode
 = 0;

40 
pid_t
 
	gchûd_pid
 = -1;

42 
	$ußge
(*
¥og«me
)

44 
	`¥ötf
("Ußge: %†[-v] [-d dú]Üogfûê¥ogøm\n", 
¥og«me
);

45 
	`exô
(1);

46 
	}
}

48 
	#SEND_LOG
 0x01

	)

49 
	#SEND_CONSOLE
 0x02

	)

50 
	#SEND_BOTH
 0x03

	)

56 
	$wrôe_Æl
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
)

58 
ssize_t
 
ªt
;

59 
c
 = 0;

61 
cou¡
 > 0) {

62 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
cou¡
);

63 i‡(
ªt
 < 0) {

64 i‡((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EINTR
))

68 
cou¡
 -
ªt
;

69 
buf
 +
ªt
;

70 
c
 +
ªt
;

72  
c
;

73 
	}
}

75 
	$£nd_ouçut
(c⁄° *
buf„r
, 
c
, 
Êag
)

77 c⁄° *
˝
;

78 *
n
;

79 
˙t
, 
d
, 
dñ
;

81 i‡(
c
 == 0)

82 
c
 = 
	`°æí
(
buf„r
);

84 i‡(
Êag
 & 
SEND_CONSOLE
) {

85 
˙t
 = 
c
;

86 
˝
 = 
buf„r
;

87 
˙t
) {

88 
dñ
 = 0;

89 
d
=0; d < 
˙t
; d++) {

90 i‡(
skù_mode
 &&

91 (
˝
[
d
] == '\001' || cp[d] == '\002')) {

92 
dñ
 = 1;

96 
	`wrôe_Æl
(1, 
˝
, 
d
);

97 i‡(
dñ
)

98 
d
++;

99 
˙t
 -
d
;

100 
˝
 +
d
;

103 i‡(!(
Êag
 & 
SEND_LOG
))

105 i‡(
outfd
 > 0)

106 
	`wrôe_Æl
(
outfd
, 
buf„r
, 
c
);

108 
n
 = 
	`ªÆloc
(
outbuf
, 
outbufsize
 + 
c
);

109 i‡(
n
) {

110 
outbuf
 = 
n
;

111 
	`mem˝y
(((*)
outbuf
)+
outbufsize
, 
buf„r
, 
c
);

112 
outbufsize
 +
c
;

115 
	}
}

117 
	$do_ªad
(
fd
)

119 
c
;

120 
buf„r
[4096], *
˝
, *
£p
;

122 
c
 = 
	`ªad
(
fd
, 
buf„r
, (buffer)-1);

123 i‡(
c
 <= 0)

124  
c
;

125 i‡(
do_skù
) {

126 
	`£nd_ouçut
(
buf„r
, 
c
, 
SEND_CONSOLE
);

127 
buf„r
[
c
] = 0;

128 
˝
 = 
buf„r
;

129 *
˝
) {

130 i‡(
skù_mode
) {

131 
˝
 = 
	`°rchr
(cp, '\002');

132 i‡(!
˝
)

134 
˝
++;

135 
skù_mode
 = 0;

138 
£p
 = 
	`°rchr
(
˝
, '\001');

139 i‡(
£p
)

140 *
£p
 = 0;

141 
	`£nd_ouçut
(
˝
, 0, 
SEND_LOG
);

142 i‡(
£p
) {

143 
˝
 = 
£p
 + 1;

144 
skù_mode
 = 1;

149 
	`£nd_ouçut
(
buf„r
, 
c
, 
SEND_BOTH
);

150  
c
;

151 
	}
}

153 
	$sig«l_ãrm
(
sig
)

155 i‡(
chûd_pid
 > 0)

156 
	`kûl
(
chûd_pid
, 
sig
);

157 
	}
}

159 
	$run_¥ogøm
(**
¨gv
)

161 
fds
[2];

162 
°©us
, 
rc
, 
pid
;

163 
buf„r
[80];

164 #ifde‡
HAVE_SIGNAL_H


165 
siga˘i⁄
 
ß
;

168 i‡(
	`pùe
(
fds
) < 0) {

169 
	`≥º‹
("pipe");

170 
	`exô
(1);

173 #ifde‡
HAVE_SIGNAL_H


174 
	`mem£t
(&
ß
, 0, (
siga˘i⁄
));

175 
ß
.
ß_h™dÀr
 = 
sig«l_ãrm
;

176 
	`siga˘i⁄
(
SIGINT
, &
ß
, 0);

177 
	`siga˘i⁄
(
SIGTERM
, &
ß
, 0);

178 #ifde‡
SA_RESTART


179 
ß
.
ß_Êags
 = 
SA_RESTART
;

183 
pid
 = 
	`f‹k
();

184 i‡(
pid
 < 0) {

185 
	`≥º‹
("vfork");

186 
	`exô
(1);

188 i‡(
pid
 == 0) {

189 
	`dup2
(
fds
[1],1);

190 
	`dup2
(
fds
[1],2);

191 
	`˛o£
(
fds
[0]);

193 
	`execvp
(
¨gv
[0],árgv);

194 
	`≥º‹
(
¨gv
[0]);

195 
	`exô
(1);

197 
chûd_pid
 = 
pid
;

198 
	`˛o£
(
fds
[1]);

200 !(
	`waôpid
(
pid
, &
°©us
, 
WNOHANG
 ))) {

201 
	`do_ªad
(
fds
[0]);

203 
chûd_pid
 = -1;

204 
	`do_ªad
(
fds
[0]);

205 
	`˛o£
(
fds
[0]);

207 i‡–
	`WIFEXITED
(
°©us
) ) {

208 
rc
 = 
	`WEXITSTATUS
(
°©us
);

209 i‡(
rc
) {

210 
	`£nd_ouçut
(
¨gv
[0], 0, 
SEND_BOTH
);

211 
	`•rötf
(
buf„r
, " dõd wôhÉxô sètu†%d\n", 
rc
);

212 
	`£nd_ouçut
(
buf„r
, 0, 
SEND_BOTH
);

215 i‡(
	`WIFSIGNALED
(
°©us
)) {

216 
	`£nd_ouçut
(
¨gv
[0], 0, 
SEND_BOTH
);

217 
	`•rötf
(
buf„r
, "died with signal %d\n",

218 
	`WTERMSIG
(
°©us
));

219 
	`£nd_ouçut
(
buf„r
, 0, 
SEND_BOTH
);

220 
rc
 = 1;

222 
rc
 = 0;

224  
rc
;

225 
	}
}

227 
	$c›y_‰om_°dö
()

229 
c
, 
bad_ªad
 = 0;

232 
c
 = 
	`do_ªad
(0);

233 i‡((
c
 == 0 ) ||

234 ((
c
 < 0Ë&& ((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EINTR
)))) {

235 i‡(
bad_ªad
++ > 3)

239 i‡(
c
 < 0) {

240 
	`≥º‹
("read");

241 
	`exô
(1);

243 
bad_ªad
 = 0;

246 
	}
}

250 
	$maö
(
¨gc
, **
¨gv
)

252 
c
, 
pid
, 
rc
;

253 *
out‚
, **
˝p
;

254 
›íÊags
 = 
O_CREAT
|
O_WRONLY
|
O_TRUNC
;

255 
£nd_Êag
 = 
SEND_LOG
;

256 
do_°dö
;

257 
time_t
 
t
;

259 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "+asv")Ë!
EOF
) {

260 
c
) {

262 
›íÊags
 &~
O_TRUNC
;

263 
›íÊags
 |
O_APPEND
;

266 
do_skù
 = 1;

269 
vîbo£
++;

270 
£nd_Êag
 |
SEND_CONSOLE
;

274 i‡(
›töd
 =
¨gc
 || optind+1 ==árgc)

275 
	`ußge
(
¨gv
[0]);

276 
out‚
 = 
¨gv
[
›töd
];

277 
›töd
++;

278 
¨gv
 +
›töd
;

279 
¨gc
 -
›töd
;

281 
outfd
 = 
	`›í
(
out‚
, 
›íÊags
, 0644);

282 
do_°dö
 = !
	`°rcmp
(
¨gv
[0], "-");

284 
	`£nd_ouçut
("Log o‡", 0, 
£nd_Êag
);

285 i‡(
do_°dö
)

286 
	`£nd_ouçut
("°dö", 0, 
£nd_Êag
);

288 
˝p
 = 
¨gv
; *cpp; cpp++) {

289 
	`£nd_ouçut
(*
˝p
, 0, 
£nd_Êag
);

290 
	`£nd_ouçut
(" ", 0, 
£nd_Êag
);

293 
	`£nd_ouçut
("\n", 0, 
£nd_Êag
);

294 
t
 = 
	`time
(0);

295 
	`£nd_ouçut
(
	`˘ime
(&
t
), 0, 
£nd_Êag
);

296 
	`£nd_ouçut
("\n", 0, 
£nd_Êag
);

298 i‡(
do_°dö
)

299 
rc
 = 
	`c›y_‰om_°dö
();

301 
rc
 = 
	`run_¥ogøm
(
¨gv
);

303 
	`£nd_ouçut
("\n", 0, 
£nd_Êag
);

304 
t
 = 
	`time
(0);

305 
	`£nd_ouçut
(
	`˘ime
(&
t
), 0, 
£nd_Êag
);

306 
	`£nd_ouçut
("----------------\n", 0, 
£nd_Êag
);

308 i‡(
outbuf
) {

309 
pid
 = 
	`f‹k
();

310 i‡(
pid
 < 0) {

311 
	`≥º‹
("fork");

312 
	`exô
(1);

314 i‡(
pid
) {

315 i‡(
vîbo£
)

316 
	`¥ötf
("BackgroundingÅo save %sÜater\n",

317 
out‚
);

318 
	`exô
(
rc
);

320 
	`£tsid
();

321 
outfd
 < 0) {

322 
outfd
 = 
	`›í
(
out‚
, 
›íÊags
, 0644);

323 
	`¶ìp
(1);

325 
	`wrôe_Æl
(
outfd
, 
outbuf
, 
outbufsize
);

326 
	`‰ì
(
outbuf
);

328 
	`˛o£
(
outfd
);

330 
	`exô
(
rc
);

331 
	}
}

	@lsattr.c

20 
	#_LARGEFILE64_SOURCE


	)

22 
	~<sys/ty≥s.h
>

23 
	~<dúít.h
>

24 #ifde‡
HAVE_ERRNO_H


25 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 #ifde‡
HAVE_GETOPT_H


29 
	~<gë›t.h
>

31 
›töd
;

32 *
›èrg
;

34 
	~<°dio.h
>

35 
	~<uni°d.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 
	~<sys/∑øm.h
>

39 
	~<sys/°©.h
>

41 
	~"ext2fs/ext2_fs.h
"

42 
	~"ë/com_îr.h
"

43 
	~"e2p/e2p.h
"

45 
	~"../vîsi⁄.h
"

46 
	~"∆s-íabÀ.h
"

48 #ifde‡
__GNUC__


49 
	#EXT2FS_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

51 
	#EXT2FS_ATTR
(
x
)

	)

54 c⁄° * 
	g¥ogøm_«me
 = "lsattr";

56 
	gÆl
;

57 
	gdús_›t
;

58 
	gpf_›ti⁄s
;

59 
	gªcursive
;

60 
	gvîbo£
;

61 
	ggíî©i⁄_›t
;

63 #ifde‡
_LFS64_LARGEFILE


64 
	#LSTAT
 
l°©64


	)

65 
	#STRUCT_STAT
 
°©64


	)

67 
	#LSTAT
 
l°©


	)

68 
	#STRUCT_STAT
 
°©


	)

71 
	$ußge
()

73 #ifde‡
EXT2FS_SNAPSHOT_CTL_OLD


74 
	`Ârötf
(
°dîr
, 
	`_
("Ußge: %†[-XRVadlv] [fûes...]\n"), 
¥ogøm_«me
);

76 
	`Ârötf
(
°dîr
, 
	`_
("Ußge: %†[-RVadlv] [fûes...]\n"), 
¥ogøm_«me
);

78 
	`exô
(1);

79 
	}
}

81 
	$li°_©åibuãs
 (c⁄° * 
«me
)

83 
Êags
;

84 
gíî©i⁄
;

85 #ifde‡
EXT2FS_SNAPSHOT_CTL


86 
ªt
;

88 i‡(
pf_›ti⁄s
 & 
PFOPT_SNAPSHOT
)

89 
ªt
 = 
	`fgë¢≠Êags
 (
«me
, &
Êags
);

91 
ªt
 = 
	`fgëÊags
 (
«me
, &
Êags
);

92 i‡(
ªt
 == -1) {

95 i‡(
	`fgëÊags
 (
«me
, &
Êags
) == -1) {

97 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
, 
	`_
("WhileÑeading flags on %s"),

98 
«me
);

101 i‡(
gíî©i⁄_›t
) {

102 i‡(
	`fgëvîsi⁄
 (
«me
, &
gíî©i⁄
) == -1) {

103 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
,

104 
	`_
("WhileÑeading version on %s"),

105 
«me
);

108 
	`¥ötf
 ("%5lu ", 
gíî©i⁄
);

110 i‡(
pf_›ti⁄s
 & 
PFOPT_LONG
) {

111 
	`¥ötf
("%-28†", 
«me
);

112 
	`¥öt_Êags
(
°dout
, 
Êags
, 
pf_›ti⁄s
);

113 
	`Âutc
('\n', 
°dout
);

115 
	`¥öt_Êags
(
°dout
, 
Êags
, 
pf_›ti⁄s
);

116 
	`¥ötf
(" %s\n", 
«me
);

119 
	}
}

121 
lßâr_dú_¥oc
 (c⁄° *, 
dúít
 *, *);

123 
	$lßâr_¨gs
 (c⁄° * 
«me
)

125 
STRUCT_STAT
 
°
;

126 
ªtvÆ
 = 0;

128 i‡(
	`LSTAT
 (
«me
, &
°
) == -1) {

129 
	`com_îr
 (
¥ogøm_«me
, 
î∫o
, 
	`_
("whileÅryingÅo stat %s"),

130 
«me
);

131 
ªtvÆ
 = -1;

133 i‡(
	`S_ISDIR
(
°
.
°_mode
Ë&& !
dús_›t
)

134 
ªtvÆ
 = 
	`ôî©e_⁄_dú
 (
«me
, 
lßâr_dú_¥oc
, 
NULL
);

136 
ªtvÆ
 = 
	`li°_©åibuãs
 (
«me
);

138  
ªtvÆ
;

139 
	}
}

141 
lßâr_dú_¥oc
 (c⁄° * 
dú_«me
, 
dúít
 * 
de
,

142 * 
¥iv©e
 
EXT2FS_ATTR
((
unu£d
)))

144 
STRUCT_STAT
 
	g°
;

145 *
	g∑th
;

146 
	gdú_Àn
 = 
°æí
(
dú_«me
);

148 
	g∑th
 = 
mÆloc
(
dú_Àn
 + 
°æí
 (
de
->
d_«me
) + 2);

150 i‡(
	gdú_Àn
 && 
	gdú_«me
[
dú_Àn
-1] == '/')

151 
•rötf
 (
∑th
, "%s%s", 
dú_«me
, 
de
->
d_«me
);

153 
•rötf
 (
∑th
, "%s/%s", 
dú_«me
, 
de
->
d_«me
);

154 i‡(
LSTAT
 (
∑th
, &
°
) == -1)

155 
≥º‹
 (
∑th
);

157 i‡(
	gde
->
	gd_«me
[0] !'.' || 
Æl
) {

158 
li°_©åibuãs
 (
∑th
);

159 i‡(
S_ISDIR
(
°
.
°_mode
Ë&& 
	gªcursive
 &&

160 
°rcmp
(
de
->
d_«me
, ".") &&

161 
°rcmp
(
de
->
d_«me
, "..")) {

162 
¥ötf
 ("\n%s:\n", 
∑th
);

163 
ôî©e_⁄_dú
 (
∑th
, 
lßâr_dú_¥oc
, 
NULL
);

164 
¥ötf
 ("\n");

168 
‰ì
(
∑th
);

172 
	$maö
 (
¨gc
, ** 
¨gv
)

174 
c
;

175 
i
;

176 
îr
, 
ªtvÆ
 = 0;

178 #ifde‡
ENABLE_NLS


179 
	`£éoˇÀ
(
LC_MESSAGES
, "");

180 
	`£éoˇÀ
(
LC_CTYPE
, "");

181 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

182 
	`ãxtdomaö
(
NLS_CAT_NAME
);

184 i‡(
¨gc
 && *
¨gv
)

185 
¥ogøm_«me
 = *
¨gv
;

186 #ifde‡
EXT2FS_SNAPSHOT_CTL


187 
i
 = 
	`°æí
(
¥ogøm_«me
);

188 i‡(
i
 >6 && !
	`°rcmp
(
¥ogøm_«me
 + i - 6, "lssnap"))

189 
pf_›ti⁄s
 |
PFOPT_SNAPSHOT
;

192 #ifde‡
EXT2FS_SNAPSHOT_CTL_OLD


193 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "XRVadlv")Ë!
EOF
)

195 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "RVadlv")Ë!
EOF
)

197 
c
)

199 #ifde‡
EXT2FS_SNAPSHOT_CTL_OLD


202 
pf_›ti⁄s
 &~
PFOPT_SNAPSHOT
;

203 
pf_›ti⁄s
 |
PFOPT_SNAPSHOT_X
;

207 
ªcursive
 = 1;

210 
vîbo£
 = 1;

213 
Æl
 = 1;

216 
dús_›t
 = 1;

219 #ifde‡
EXT2FS_SNAPSHOT_CTL


220 
pf_›ti⁄s
 |
PFOPT_LONG
;

222 
pf_›ti⁄s
 = 
PFOPT_LONG
;

226 
gíî©i⁄_›t
 = 1;

229 
	`ußge
();

232 i‡(
vîbo£
)

233 
	`Ârötf
 (
°dîr
, "lsattr %s (%s)\n",

234 
E2FSPROGS_VERSION
, 
E2FSPROGS_DATE
);

235 i‡(
›töd
 > 
¨gc
 - 1) {

236 i‡(
	`lßâr_¨gs
 (".") == -1)

237 
ªtvÆ
 = 1;

239 
i
 = 
›töd
; i < 
¨gc
; i++) {

240 
îr
 = 
	`lßâr_¨gs
 (
¨gv
[
i
]);

241 i‡(
îr
)

242 
ªtvÆ
 = 1;

245 
	`exô
(
ªtvÆ
);

246 
	}
}

	@mke2fs.c

19 
	#_XOPEN_SOURCE
 600

	)

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<°rögs.h
>

24 
	~<f˙é.h
>

25 
	~<˘y≥.h
>

26 
	~<time.h
>

27 #ifde‡
__löux__


28 
	~<sys/ut¢ame.h
>

30 #ifde‡
HAVE_GETOPT_H


31 
	~<gë›t.h
>

33 *
›èrg
;

34 
›töd
;

36 #ifde‡
HAVE_UNISTD_H


37 
	~<uni°d.h
>

39 #ifde‡
HAVE_STDLIB_H


40 
	~<°dlib.h
>

42 #ifde‡
HAVE_ERRNO_H


43 
	~<î∫o.h
>

45 #ifde‡
HAVE_MNTENT_H


46 
	~<m¡ít.h
>

48 
	~<sys/io˘l.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<sys/°©.h
>

51 
	~<libgí.h
>

52 
	~<limôs.h
>

53 
	~<blkid/blkid.h
>

55 
	~"ext2fs/ext2_fs.h
"

56 
	~"ë/com_îr.h
"

57 
	~"uuid/uuid.h
"

58 
	~"e2p/e2p.h
"

59 
	~"ext2fs/ext2fs.h
"

60 
	~"utû.h
"

61 
	~"¥ofûe.h
"

62 
	~"¥of_îr.h
"

63 
	~"../vîsi⁄.h
"

64 
	~"∆s-íabÀ.h
"

66 
	#STRIDE_LENGTH
 8

	)

68 #i‚de‡
__•¨c__


69 
	#ZAP_BOOTBLOCK


	)

72 
ißây
();

73 
FILE
 *
Â›í
(c⁄° *
cmd
, c⁄° *
mode
);

75 c⁄° * 
	g¥ogøm_«me
 = "mke2fs";

76 c⁄° * 
	gdevi˚_«me
 ;

79 
	gcÊag
;

80 
	gvîbo£
;

81 
	gquõt
;

82 
	gsu≥r_⁄ly
;

83 
	gdisˇrd
 = 1;

84 
	gf‹˚
;

85 
	gnﬂ˘i⁄
;

86 
	gjou∫Æ_size
;

87 
	gjou∫Æ_Êags
;

88 
	gœzy_ôabÀ_öô
;

89 *
	gbad_blocks_fûíame
;

90 
__u32
 
	gfs_°ride
;

92 
ext2_su≥r_block
 
	gfs_∑øm
;

93 *
	gfs_uuid
 = 
NULL
;

94 *
	g¸ót‹_os
;

95 *
	gvﬁume_œbñ
;

96 *
	gmou¡_dú
;

97 *
	gjou∫Æ_devi˚
;

98 
	gsync_kludge
;

99 **
	gfs_ty≥s
;

101 
¥ofûe_t
 
	g¥ofûe
;

103 
	gsys_∑ge_size
 = 4096;

104 
	glöux_vîsi⁄_code
 = 0;

106 
	$ußge
()

108 
	`Ârötf
(
°dîr
, 
	`_
("Usage: %s [-c|-l filename] [-b block-size] "

117 
¥ogøm_«me
);

118 
	`exô
(1);

119 
	}
}

121 
	$öt_log2
(
¨g
)

123 
l
 = 0;

125 
¨g
 >>= 1;

126 
¨g
) {

127 
l
++;

128 
¨g
 >>= 1;

130  
l
;

131 
	}
}

133 
	$öt_log10
(
¨g
)

135 
l
;

137 
l
=0; 
¨g
 ;Ü++)

138 
¨g
 =árg / 10;

139  
l
;

140 
	}
}

142 
	$∑r£_vîsi⁄_numbî
(c⁄° *
s
)

144 
maj‹
, 
mö‹
, 
ªv
;

145 *
íd±r
;

146 c⁄° *
˝
 = 
s
;

148 i‡(!
s
)

150 
maj‹
 = 
	`°πﬁ
(
˝
, &
íd±r
, 10);

151 i‡(
˝
 =
íd±r
 || *endptr != '.')

153 
˝
 = 
íd±r
 + 1;

154 
mö‹
 = 
	`°πﬁ
(
˝
, &
íd±r
, 10);

155 i‡(
˝
 =
íd±r
 || *endptr != '.')

157 
˝
 = 
íd±r
 + 1;

158 
ªv
 = 
	`°πﬁ
(
˝
, &
íd±r
, 10);

159 i‡(
˝
 =
íd±r
)

161  ((((
maj‹
 * 256Ë+ 
mö‹
Ë* 256Ë+ 
ªv
);

162 
	}
}

167 
övÆid_block
(
ext2_fûsys
 
fs
 
EXT2FS_ATTR
((
unu£d
)), 
blk_t
 
blk
)

169 
Ârötf
(
°dîr
, 
_
("Bad block %u ouào‡ønge; ign‹ed.\n"), 
blk
);

176 
	$ªad_bb_fûe
(
ext2_fûsys
 
fs
, 
badblocks_li°
 *
bb_li°
,

177 c⁄° *
bad_blocks_fûe
)

179 
FILE
 *
f
;

180 
îrcode_t
 
ªtvÆ
;

182 
f
 = 
	`f›í
(
bad_blocks_fûe
, "r");

183 i‡(!
f
) {

184 
	`com_îr
("ªad_bad_blocks_fûe", 
î∫o
,

185 
	`_
("whûêåyögÅÿ›í %s"), 
bad_blocks_fûe
);

186 
	`exô
(1);

188 
ªtvÆ
 = 
	`ext2fs_ªad_bb_FILE
(
fs
, 
f
, 
bb_li°
, 
övÆid_block
);

189 
	`f˛o£
 (
f
);

190 i‡(
ªtvÆ
) {

191 
	`com_îr
("ext2fs_ªad_bb_FILE", 
ªtvÆ
,

192 
	`_
("whileÑeading inÜist of bad blocks from file"));

193 
	`exô
(1);

195 
	}
}

200 
	$ã°_disk
(
ext2_fûsys
 
fs
, 
badblocks_li°
 *
bb_li°
)

202 
FILE
 *
f
;

203 
îrcode_t
 
ªtvÆ
;

204 
buf
[1024];

206 
	`•rötf
(
buf
, "badblock†-b %d -X %s%s%†%u", 
fs
->
blocksize
,

207 
quõt
 ? "" : "-†", (
cÊag
 > 1) ? "-w " : "",

208 
fs
->
devi˚_«me
, fs->
su≥r
->
s_blocks_cou¡
-1);

209 i‡(
vîbo£
)

210 
	`¥ötf
(
	`_
("Ru¬ög comm™d: %s\n"), 
buf
);

211 
f
 = 
	`p›í
(
buf
, "r");

212 i‡(!
f
) {

213 
	`com_îr
("p›í", 
î∫o
,

214 
	`_
("whûêåyögÅÿru¿'%s'"), 
buf
);

215 
	`exô
(1);

217 
ªtvÆ
 = 
	`ext2fs_ªad_bb_FILE
(
fs
, 
f
, 
bb_li°
, 
övÆid_block
);

218 
	`p˛o£
(
f
);

219 i‡(
ªtvÆ
) {

220 
	`com_îr
("ext2fs_ªad_bb_FILE", 
ªtvÆ
,

221 
	`_
("whileÖrocessingÜist of bad blocks fromÖrogram"));

222 
	`exô
(1);

224 
	}
}

226 
	$h™dÀ_bad_blocks
(
ext2_fûsys
 
fs
, 
badblocks_li°
 
bb_li°
)

228 
dgΩ_t
 
i
;

229 
blk_t
 
j
;

230 
mu°_be_good
;

231 
blk_t
 
blk
;

232 
badblocks_ôî©e
 
bb_ôî
;

233 
îrcode_t
 
ªtvÆ
;

234 
blk_t
 
group_block
;

235 
group
;

236 
group_bad
;

238 i‡(!
bb_li°
)

245 
mu°_be_good
 = 
fs
->
su≥r
->
s_fú°_d©a_block
 + 1 + fs->
desc_blocks
;

246 
i
 = 
fs
->
su≥r
->
s_fú°_d©a_block
; i <
mu°_be_good
; i++) {

247 i‡(
	`ext2fs_badblocks_li°_ã°
(
bb_li°
, 
i
)) {

248 
	`Ârötf
(
°dîr
, 
	`_
("Block %d inÖrimary "

249 "su≥rblock/grou∞des¸ùt‹áª®bad.\n"), 
i
);

250 
	`Ârötf
(
°dîr
, 
	`_
("Blocks %uÅhrough %u must be good "

252 
fs
->
su≥r
->
s_fú°_d©a_block
, 
mu°_be_good
);

253 
	`Âuts
(
	`_
("Ab‹tög....\n"), 
°dîr
);

254 
	`exô
(1);

263 
group_block
 = 
fs
->
su≥r
->
s_fú°_d©a_block
 +

264 
fs
->
su≥r
->
s_blocks_≥r_group
;

266 
i
 = 1; i < 
fs
->
group_desc_cou¡
; i++) {

267 
group_bad
 = 0;

268 
j
=0; j < 
fs
->
desc_blocks
+1; j++) {

269 i‡(
	`ext2fs_badblocks_li°_ã°
(
bb_li°
,

270 
group_block
 + 
j
)) {

271 i‡(!
group_bad
)

272 
	`Ârötf
(
°dîr
,

273 
	`_
("Warning:Åhe backup superblock/group descriptorsát block %u contain\n"

275 
group_block
);

276 
group_bad
++;

277 
group
 = 
	`ext2fs_group_of_blk
(
fs
, 
group_block
+
j
);

278 
fs
->
group_desc
[
group
].
bg_‰ì_blocks_cou¡
++;

279 
	`ext2fs_group_desc_csum_£t
(
fs
, 
group
);

280 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
++;

283 
group_block
 +
fs
->
su≥r
->
s_blocks_≥r_group
;

289 
ªtvÆ
 = 
	`ext2fs_badblocks_li°_ôî©e_begö
(
bb_li°
, &
bb_ôî
);

290 i‡(
ªtvÆ
) {

291 
	`com_îr
("ext2fs_badblocks_li°_ôî©e_begö", 
ªtvÆ
,

292 
	`_
("while marking bad blocksás used"));

293 
	`exô
(1);

295 
	`ext2fs_badblocks_li°_ôî©e
(
bb_ôî
, &
blk
))

296 
	`ext2fs_m¨k_block_bôm≠
(
fs
->
block_m≠
, 
blk
);

297 
	`ext2fs_badblocks_li°_ôî©e_íd
(
bb_ôî
);

298 
	}
}

303 
	s¥ogªss_°ru˘
 {

304 
	mf‹m©
[20];

305 
	mbackup
[80];

306 
__u32
 
	mmax
;

307 
	mskù_¥ogªss
;

310 
	$¥ogªss_öô
(
¥ogªss_°ru˘
 *
¥ogªss
,

311 c⁄° *
œbñ
,
__u32
 
max
)

313 
i
;

315 
	`mem£t
(
¥ogªss
, 0, (
¥ogªss_°ru˘
));

316 i‡(
quõt
)

322 
i
 = 
	`öt_log10
(
max
);

323 
	`•rötf
(
¥ogªss
->
f‹m©
, "%%%dd/%%%dld", 
i
, i);

324 
	`mem£t
(
¥ogªss
->
backup
, '\b', (progress->backup)-1);

325 
¥ogªss
->
backup
[(progress->backup)-1] = 0;

326 i‡((2*
i
)+1 < (Ë(
¥ogªss
->
backup
))

327 
¥ogªss
->
backup
[(2*
i
)+1] = 0;

328 
¥ogªss
->
max
 = max;

330 
¥ogªss
->
skù_¥ogªss
 = 0;

331 i‡(
	`gëív
("MKE2FS_SKIP_PROGRESS"))

332 
¥ogªss
->
skù_¥ogªss
++;

334 
	`Âuts
(
œbñ
, 
°dout
);

335 
	`fÊush
(
°dout
);

336 
	}
}

338 
	$¥ogªss_upd©e
(
¥ogªss_°ru˘
 *
¥ogªss
, 
__u32
 
vÆ
)

340 i‡((
¥ogªss
->
f‹m©
[0] =0Ë||Örogªss->
skù_¥ogªss
)

342 
	`¥ötf
(
¥ogªss
->
f‹m©
, 
vÆ
,Örogªss->
max
);

343 
	`Âuts
(
¥ogªss
->
backup
, 
°dout
);

344 
	}
}

346 
	$¥ogªss_˛o£
(
¥ogªss_°ru˘
 *
¥ogªss
)

348 i‡(
¥ogªss
->
f‹m©
[0] == 0)

350 
	`Âuts
(
	`_
("d⁄ê \n"), 
°dout
);

351 
	}
}

353 
	$wrôe_öode_èbÀs
(
ext2_fûsys
 
fs
, 
œzy_Êag
, 
ôabÀ_zî€d
)

355 
îrcode_t
 
ªtvÆ
;

356 
blk_t
 
blk
;

357 
dgΩ_t
 
i
;

358 
num
, 
ùb
;

359 
¥ogªss_°ru˘
 
¥ogªss
;

361 i‡(
quõt
)

362 
	`mem£t
(&
¥ogªss
, 0, (progress));

364 
	`¥ogªss_öô
(&
¥ogªss
, 
	`_
("Writing inodeÅables: "),

365 
fs
->
group_desc_cou¡
);

367 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

368 
	`¥ogªss_upd©e
(&
¥ogªss
, 
i
);

370 
blk
 = 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
;

371 
num
 = 
fs
->
öode_blocks_≥r_group
;

373 i‡(
œzy_Êag
) {

374 
ùb
 = 
fs
->
blocksize
 / 
	`EXT2_INODE_SIZE
(fs->
su≥r
);

375 
num
 = ((((
fs
->
su≥r
->
s_öodes_≥r_group
 -

376 
fs
->
group_desc
[
i
].
bg_ôabÀ_unu£d
) *

377 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
)) +

378 
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
) - 1) /

379 
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
));

381 i‡(!
œzy_Êag
 || 
ôabÀ_zî€d
) {

383 
fs
->
group_desc
[
i
].
bg_Êags
 |
EXT2_BG_INODE_ZEROED
;

384 
	`ext2fs_group_desc_csum_£t
(
fs
, 
i
);

385 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


386 i‡(
fs
->
su≥r
->
s_„©uª_com∑t
 &

387 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
)

389 
num
++;

392 
ªtvÆ
 = 
	`ext2fs_zîo_blocks
(
fs
, 
blk
, 
num
, &blk, &num);

393 i‡(
ªtvÆ
) {

394 
	`Ârötf
(
°dîr
, 
	`_
("\nCouldÇot write %d "

396 
num
, 
blk
, 
	`îr‹_mesßge
(
ªtvÆ
));

397 
	`exô
(1);

399 i‡(
sync_kludge
) {

400 i‡(
sync_kludge
 == 1)

401 
	`sync
();

402 i‡((
i
 % 
sync_kludge
) == 0)

403 
	`sync
();

406 
	`ext2fs_zîo_blocks
(0, 0, 0, 0, 0);

407 
	`¥ogªss_˛o£
(&
¥ogªss
);

408 
	}
}

410 
	$¸óã_roŸ_dú
(
ext2_fûsys
 
fs
)

412 
îrcode_t
 
ªtvÆ
;

413 
ext2_öode
 
öode
;

414 
__u32
 
uid
, 
gid
;

416 
ªtvÆ
 = 
	`ext2fs_mkdú
(
fs
, 
EXT2_ROOT_INO
, EXT2_ROOT_INO, 0);

417 i‡(
ªtvÆ
) {

418 
	`com_îr
("ext2fs_mkdú", 
ªtvÆ
, 
	`_
("while creatingÑoot dir"));

419 
	`exô
(1);

421 i‡(
	`gëeuid
()) {

422 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
EXT2_ROOT_INO
, &
öode
);

423 i‡(
ªtvÆ
) {

424 
	`com_îr
("ext2fs_ªad_öode", 
ªtvÆ
,

425 
	`_
("whileÑeadingÑoot inode"));

426 
	`exô
(1);

428 
uid
 = 
	`gëuid
();

429 
öode
.
i_uid
 = 
uid
;

430 
	`ext2fs_£t_i_uid_high
(
öode
, 
uid
 >> 16);

431 i‡(
uid
) {

432 
gid
 = 
	`gëgid
();

433 
öode
.
i_gid
 = 
gid
;

434 
	`ext2fs_£t_i_gid_high
(
öode
, 
gid
 >> 16);

436 
ªtvÆ
 = 
	`ext2fs_wrôe_√w_öode
(
fs
, 
EXT2_ROOT_INO
, &
öode
);

437 i‡(
ªtvÆ
) {

438 
	`com_îr
("ext2fs_wrôe_öode", 
ªtvÆ
,

439 
	`_
("while settingÑoot inode ownership"));

440 
	`exô
(1);

443 
	}
}

445 
	$¸óã_lo°_™d_found
(
ext2_fûsys
 
fs
)

447 
Õf_size
 = 0;

448 
îrcode_t
 
ªtvÆ
;

449 
ext2_öo_t
 
öo
;

450 c⁄° *
«me
 = "lost+found";

451 
i
;

453 
fs
->
umask
 = 077;

454 
ªtvÆ
 = 
	`ext2fs_mkdú
(
fs
, 
EXT2_ROOT_INO
, 0, 
«me
);

455 i‡(
ªtvÆ
) {

456 
	`com_îr
("ext2fs_mkdú", 
ªtvÆ
,

457 
	`_
("while creating /lost+found"));

458 
	`exô
(1);

461 
ªtvÆ
 = 
	`ext2fs_lookup
(
fs
, 
EXT2_ROOT_INO
, 
«me
, 
	`°æí
“ame), 0, &
öo
);

462 i‡(
ªtvÆ
) {

463 
	`com_îr
("ext2_lookup", 
ªtvÆ
,

464 
	`_
("whileÜooking up /lost+found"));

465 
	`exô
(1);

468 
i
=1; i < 
EXT2_NDIR_BLOCKS
; i++) {

471 i‡((
Õf_size
 +
fs
->
blocksize
) >= 16*1024 &&

472 
Õf_size
 >2 * 
fs
->
blocksize
)

474 
ªtvÆ
 = 
	`ext2fs_ex∑nd_dú
(
fs
, 
öo
);

475 i‡(
ªtvÆ
) {

476 
	`com_îr
("ext2fs_ex∑nd_dú", 
ªtvÆ
,

477 
	`_
("whileÉxpanding /lost+found"));

478 
	`exô
(1);

481 
	}
}

483 
	$¸óã_bad_block_öode
(
ext2_fûsys
 
fs
, 
badblocks_li°
 
bb_li°
)

485 
îrcode_t
 
ªtvÆ
;

487 
	`ext2fs_m¨k_öode_bôm≠
(
fs
->
öode_m≠
, 
EXT2_BAD_INO
);

488 
	`ext2fs_öode_Æloc_°©s2
(
fs
, 
EXT2_BAD_INO
, +1, 0);

489 
ªtvÆ
 = 
	`ext2fs_upd©e_bb_öode
(
fs
, 
bb_li°
);

490 i‡(
ªtvÆ
) {

491 
	`com_îr
("ext2fs_upd©e_bb_öode", 
ªtvÆ
,

492 
	`_
("while setting bad block inode"));

493 
	`exô
(1);

496 
	}
}

498 
	$ª£rve_öodes
(
ext2_fûsys
 
fs
)

500 
ext2_öo_t
 
i
;

502 
i
 = 
EXT2_ROOT_INO
 + 1; i < 
	`EXT2_FIRST_INODE
(
fs
->
su≥r
); i++)

503 
	`ext2fs_öode_Æloc_°©s2
(
fs
, 
i
, +1, 0);

504 
	`ext2fs_m¨k_ib_dúty
(
fs
);

505 
	}
}

507 
	#BSD_DISKMAGIC
 (0x82564557ULË

	)

508 
	#BSD_MAGICDISK
 (0x57455682ULË

	)

509 
	#BSD_LABEL_OFFSET
 64

	)

511 
	$z≠_£˘‹
(
ext2_fûsys
 
fs
, 
£˘
, 
n£˘
)

513 *
buf
;

514 
ªtvÆ
;

515 *
magic
;

517 
buf
 = 
	`mÆloc
(512*
n£˘
);

518 i‡(!
buf
) {

519 
	`¥ötf
(
	`_
("Out of memoryÉrasing sectors %d-%d\n"),

520 
£˘
, se˘ + 
n£˘
 - 1);

521 
	`exô
(1);

524 i‡(
£˘
 == 0) {

526 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 0, -512, 
buf
);

527 i‡(
ªtvÆ
)

528 
	`Ârötf
(
°dîr
,

529 
	`_
("Warning: couldÇotÑead block 0: %s\n"),

530 
	`îr‹_mesßge
(
ªtvÆ
));

532 
magic
 = (*Ë(
buf
 + 
BSD_LABEL_OFFSET
);

533 i‡((*
magic
 =
BSD_DISKMAGIC
) ||

534 (*
magic
 =
BSD_MAGICDISK
))

539 
	`mem£t
(
buf
, 0, 512*
n£˘
);

540 
	`io_ch™√l_£t_blksize
(
fs
->
io
, 512);

541 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
£˘
, -512*
n£˘
, 
buf
);

542 
	`io_ch™√l_£t_blksize
(
fs
->
io
, fs->
blocksize
);

543 
	`‰ì
(
buf
);

544 i‡(
ªtvÆ
)

545 
	`Ârötf
(
°dîr
, 
	`_
("Warning: couldÇotÉrase sector %d: %s\n"),

546 
£˘
, 
	`îr‹_mesßge
(
ªtvÆ
));

547 
	}
}

549 
	$¸óã_jou∫Æ_dev
(
ext2_fûsys
 
fs
)

551 
¥ogªss_°ru˘
 
¥ogªss
;

552 
îrcode_t
 
ªtvÆ
;

553 *
buf
;

554 
blk_t
 
blk
, 
îr_blk
;

555 
c
, 
cou¡
, 
îr_cou¡
;

557 
ªtvÆ
 = 
	`ext2fs_¸óã_jou∫Æ_su≥rblock
(
fs
,

558 
fs
->
su≥r
->
s_blocks_cou¡
, 0, &
buf
);

559 i‡(
ªtvÆ
) {

560 
	`com_îr
("¸óã_jou∫Æ_dev", 
ªtvÆ
,

561 
	`_
("while initializing journal superblock"));

562 
	`exô
(1);

564 i‡(
quõt
)

565 
	`mem£t
(&
¥ogªss
, 0, (progress));

567 
	`¥ogªss_öô
(&
¥ogªss
, 
	`_
("Zeroing journal device: "),

568 
fs
->
su≥r
->
s_blocks_cou¡
);

570 
blk
 = 0;

571 
cou¡
 = 
fs
->
su≥r
->
s_blocks_cou¡
;

572 
cou¡
 > 0) {

573 i‡(
cou¡
 > 1024)

574 
c
 = 1024;

576 
c
 = 
cou¡
;

577 
ªtvÆ
 = 
	`ext2fs_zîo_blocks
(
fs
, 
blk
, 
c
, &
îr_blk
, &
îr_cou¡
);

578 i‡(
ªtvÆ
) {

579 
	`com_îr
("¸óã_jou∫Æ_dev", 
ªtvÆ
,

580 
	`_
("while zeroing journal device "

582 
îr_blk
, 
îr_cou¡
);

583 
	`exô
(1);

585 
blk
 +
c
;

586 
cou¡
 -
c
;

587 
	`¥ogªss_upd©e
(&
¥ogªss
, 
blk
);

589 
	`ext2fs_zîo_blocks
(0, 0, 0, 0, 0);

591 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
,

592 
fs
->
su≥r
->
s_fú°_d©a_block
+1,

593 1, 
buf
);

594 i‡(
ªtvÆ
) {

595 
	`com_îr
("¸óã_jou∫Æ_dev", 
ªtvÆ
,

596 
	`_
("while writing journal superblock"));

597 
	`exô
(1);

599 
	`¥ogªss_˛o£
(&
¥ogªss
);

600 
	}
}

602 
	$show_°©s
(
ext2_fûsys
 
fs
)

604 
ext2_su≥r_block
 *
s
 = 
fs
->
su≥r
;

605 
buf
[80];

606 *
os
;

607 
blk_t
 
group_block
;

608 
dgΩ_t
 
i
;

609 
√ed
, 
cﬁ_À·
;

611 i‡(
fs_∑øm
.
s_blocks_cou¡
 !
s
->s_blocks_count)

612 
	`Ârötf
(
°dîr
, 
	`_
("warning: %u blocks unused.\n\n"),

613 
fs_∑øm
.
s_blocks_cou¡
 - 
s
->s_blocks_count);

615 
	`mem£t
(
buf
, 0, (buf));

616 
	`°∫˝y
(
buf
, 
s
->
s_vﬁume_«me
, (s->s_volume_name));

617 
	`¥ötf
(
	`_
("Fûesy°emÜabñ=%s\n"), 
buf
);

618 
	`Âuts
(
	`_
("OSÅy≥: "), 
°dout
);

619 
os
 = 
	`e2p_os2°rög
(
fs
->
su≥r
->
s_¸ót‹_os
);

620 
	`Âuts
(
os
, 
°dout
);

621 
	`‰ì
(
os
);

622 
	`¥ötf
("\n");

623 
	`¥ötf
(
	`_
("Block size=%u (log=%u)\n"), 
fs
->
blocksize
,

624 
s
->
s_log_block_size
);

625 
	`¥ötf
(
	`_
("Føgmíàsize=%u (log=%u)\n"), 
fs
->
‰agsize
,

626 
s
->
s_log_‰ag_size
);

627 
	`¥ötf
(
	`_
("Stride=%u blocks, Stripe width=%u blocks\n"),

628 
s
->
s_øid_°ride
, s->
s_øid_°rùe_width
);

629 
	`¥ötf
(
	`_
("%u inodes, %u blocks\n"), 
s
->
s_öodes_cou¡
,

630 
s
->
s_blocks_cou¡
);

631 
	`¥ötf
(
	`_
("%u blocks (%2.2f%%)Ñeserved forÅhe super user\n"),

632 
s
->
s_r_blocks_cou¡
,

633 100.0 * 
s
->
s_r_blocks_cou¡
 / s->
s_blocks_cou¡
);

634 
	`¥ötf
(
	`_
("Fú° d©®block=%u\n"), 
s
->
s_fú°_d©a_block
);

635 i‡(
s
->
s_ª£rved_gdt_blocks
)

636 
	`¥ötf
(
	`_
("Maximum filesystem blocks=%lu\n"),

637 (
s
->
s_ª£rved_gdt_blocks
 + 
fs
->
desc_blocks
) *

638 
	`EXT2_DESC_PER_BLOCK
(
s
Ë* s->
s_blocks_≥r_group
);

639 i‡(
fs
->
group_desc_cou¡
 > 1)

640 
	`¥ötf
(
	`_
("%u block groups\n"), 
fs
->
group_desc_cou¡
);

642 
	`¥ötf
(
	`_
("%u block group\n"), 
fs
->
group_desc_cou¡
);

643 
	`¥ötf
(
	`_
("%u blocksÖer group, %u fragmentsÖer group\n"),

644 
s
->
s_blocks_≥r_group
, s->
s_‰ags_≥r_group
);

645 
	`¥ötf
(
	`_
("%u inode†≥∏group\n"), 
s
->
s_öodes_≥r_group
);

647 i‡(
fs
->
group_desc_cou¡
 == 1) {

648 
	`¥ötf
("\n");

652 
	`¥ötf
(
	`_
("Superblock backups stored on blocks: "));

653 
group_block
 = 
s
->
s_fú°_d©a_block
;

654 
cﬁ_À·
 = 0;

655 
i
 = 1; i < 
fs
->
group_desc_cou¡
; i++) {

656 
group_block
 +
s
->
s_blocks_≥r_group
;

657 i‡(!
	`ext2fs_bg_has_su≥r
(
fs
, 
i
))

659 i‡(
i
 != 1)

660 
	`¥ötf
(", ");

661 
√ed
 = 
	`öt_log10
(
group_block
) + 2;

662 i‡(
√ed
 > 
cﬁ_À·
) {

663 
	`¥ötf
("\n\t");

664 
cﬁ_À·
 = 72;

666 
cﬁ_À·
 -
√ed
;

667 
	`¥ötf
("%u", 
group_block
);

669 
	`¥ötf
("\n\n");

670 
	}
}

676 
	$£t_os
(
ext2_su≥r_block
 *
sb
, *
os
)

678 i‡(
	`isdigô
 (*
os
))

679 
sb
->
s_¸ót‹_os
 = 
	`©oi
 (
os
);

680 i‡(
	`°rˇ£cmp
(
os
, "linux") == 0)

681 
sb
->
s_¸ót‹_os
 = 
EXT2_OS_LINUX
;

682 i‡(
	`°rˇ£cmp
(
os
, "GNU") == 0 || strcasecmp(os, "hurd") == 0)

683 
sb
->
s_¸ót‹_os
 = 
EXT2_OS_HURD
;

684 i‡(
	`°rˇ£cmp
(
os
, "freebsd") == 0)

685 
sb
->
s_¸ót‹_os
 = 
EXT2_OS_FREEBSD
;

686 i‡(
	`°rˇ£cmp
(
os
, "lites") == 0)

687 
sb
->
s_¸ót‹_os
 = 
EXT2_OS_LITES
;

691 
	}
}

693 
	#PATH_SET
 "PATH=/sbö"

	)

695 
	$∑r£_exãnded_›ts
(
ext2_su≥r_block
 *
∑øm
,

696 c⁄° *
›ts
)

698 *
buf
, *
tokí
, *
√xt
, *
p
, *
¨g
, *
bad›t
 = 0;

699 
Àn
;

700 
r_ußge
 = 0;

702 
Àn
 = 
	`°æí
(
›ts
);

703 
buf
 = 
	`mÆloc
(
Àn
+1);

704 i‡(!
buf
) {

705 
	`Ârötf
(
°dîr
,

706 
	`_
("Couldn'tállocate memoryÅoÖarse options!\n"));

707 
	`exô
(1);

709 
	`°r˝y
(
buf
, 
›ts
);

710 
tokí
 = 
buf
;Åokí && *tokí;Åokí = 
√xt
) {

711 
p
 = 
	`°rchr
(
tokí
, ',');

712 
√xt
 = 0;

713 i‡(
p
) {

714 *
p
 = 0;

715 
√xt
 = 
p
+1;

717 
¨g
 = 
	`°rchr
(
tokí
, '=');

718 i‡(
¨g
) {

719 *
¨g
 = 0;

720 
¨g
++;

722 i‡(
	`°rcmp
(
tokí
, "stride") == 0) {

723 i‡(!
¨g
) {

724 
r_ußge
++;

725 
bad›t
 = 
tokí
;

728 
∑øm
->
s_øid_°ride
 = 
	`°πoul
(
¨g
, &
p
, 0);

729 i‡(*
p
 || (
∑øm
->
s_øid_°ride
 == 0)) {

730 
	`Ârötf
(
°dîr
,

731 
	`_
("Invalid strideÖarameter: %s\n"),

732 
¨g
);

733 
r_ußge
++;

736 } i‡(
	`°rcmp
(
tokí
, "stripe-width") == 0 ||

737 
	`°rcmp
(
tokí
, "stripe_width") == 0) {

738 i‡(!
¨g
) {

739 
r_ußge
++;

740 
bad›t
 = 
tokí
;

743 
∑øm
->
s_øid_°rùe_width
 = 
	`°πoul
(
¨g
, &
p
, 0);

744 i‡(*
p
 || (
∑øm
->
s_øid_°rùe_width
 == 0)) {

745 
	`Ârötf
(
°dîr
,

746 
	`_
("Invalid stripe-widthÖarameter: %s\n"),

747 
¨g
);

748 
r_ußge
++;

751 } i‡(!
	`°rcmp
(
tokí
, "resize")) {

752 
ªsize
, 
bpg
, 
rsv_groups
;

753 
group_desc_cou¡
, 
desc_blocks
;

754 
gdpb
, 
blocksize
;

755 
rsv_gdb
;

757 i‡(!
¨g
) {

758 
r_ußge
++;

759 
bad›t
 = 
tokí
;

763 
ªsize
 = 
	`∑r£_num_blocks
(
¨g
,

764 
∑øm
->
s_log_block_size
);

766 i‡(
ªsize
 == 0) {

767 
	`Ârötf
(
°dîr
,

768 
	`_
("InvalidÑesizeÖarameter: %s\n"),

769 
¨g
);

770 
r_ußge
++;

773 i‡(
ªsize
 <
∑øm
->
s_blocks_cou¡
) {

774 
	`Ârötf
(
°dîr
,

775 
	`_
("TheÑesize maximum must be greater "

777 
r_ußge
++;

781 
blocksize
 = 
	`EXT2_BLOCK_SIZE
(
∑øm
);

782 
bpg
 = 
∑øm
->
s_blocks_≥r_group
;

783 i‡(!
bpg
)

784 
bpg
 = 
blocksize
 * 8;

785 
gdpb
 = 
	`EXT2_DESC_PER_BLOCK
(
∑øm
);

786 
group_desc_cou¡
 =

787 
	`ext2fs_div_˚û
(
∑øm
->
s_blocks_cou¡
, 
bpg
);

788 
desc_blocks
 = (
group_desc_cou¡
 +

789 
gdpb
 - 1) / gdpb;

790 
rsv_groups
 = 
	`ext2fs_div_˚û
(
ªsize
, 
bpg
);

791 
rsv_gdb
 = 
	`ext2fs_div_˚û
(
rsv_groups
, 
gdpb
) -

792 
desc_blocks
;

793 i‡(
rsv_gdb
 > (Ë
	`EXT2_ADDR_PER_BLOCK
(
∑øm
))

794 
rsv_gdb
 = 
	`EXT2_ADDR_PER_BLOCK
(
∑øm
);

796 i‡(
rsv_gdb
 > 0) {

797 i‡(
∑øm
->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) {

798 
	`Ârötf
(
°dîr
,

799 
	`_
("On-lineÑesizingÇot supported withÑevision 0 filesystems\n"));

800 
	`‰ì
(
buf
);

801 
	`exô
(1);

803 
∑øm
->
s_„©uª_com∑t
 |=

804 
EXT2_FEATURE_COMPAT_RESIZE_INODE
;

806 
∑øm
->
s_ª£rved_gdt_blocks
 = 
rsv_gdb
;

808 } i‡(!
	`°rcmp
(
tokí
, "test_fs")) {

809 
∑øm
->
s_Êags
 |
EXT2_FLAGS_TEST_FILESYS
;

810 } i‡(!
	`°rcmp
(
tokí
, "lazy_itable_init")) {

811 i‡(
¨g
)

812 
œzy_ôabÀ_öô
 = 
	`°πoul
(
¨g
, &
p
, 0);

814 
œzy_ôabÀ_öô
 = 1;

815 } i‡(!
	`°rcmp
(
tokí
, "discard")) {

816 
disˇrd
 = 1;

817 } i‡(!
	`°rcmp
(
tokí
, "nodiscard")) {

818 
disˇrd
 = 0;

820 
r_ußge
++;

821 
bad›t
 = 
tokí
;

824 i‡(
r_ußge
) {

825 
	`Ârötf
(
°dîr
, 
	`_
("\nBad option(s) specified: %s\n\n"

837 
bad›t
 ? badopt : "");

838 
	`‰ì
(
buf
);

839 
	`exô
(1);

841 i‡(
∑øm
->
s_øid_°ride
 &&

842 (
∑øm
->
s_øid_°rùe_width
 %Ö¨am->
s_øid_°ride
) != 0)

843 
	`Ârötf
(
°dîr
, 
	`_
("\nWarning: RAID stripe-width %uÇotánÉven "

845 
∑øm
->
s_øid_°rùe_width
,Ö¨am->
s_øid_°ride
);

847 
	`‰ì
(
buf
);

848 
	}
}

850 
__u32
 
	gok_„©uªs
[3] = {

852 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
 |

853 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


854 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
 |

856 
EXT2_FEATURE_COMPAT_RESIZE_INODE
 |

857 
EXT2_FEATURE_COMPAT_DIR_INDEX
 |

858 
EXT2_FEATURE_COMPAT_EXT_ATTR
,

860 
EXT2_FEATURE_INCOMPAT_FILETYPE
|

861 
EXT3_FEATURE_INCOMPAT_EXTENTS
|

862 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|

863 
EXT2_FEATURE_INCOMPAT_META_BG
|

864 
EXT4_FEATURE_INCOMPAT_FLEX_BG
,

866 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
|

867 #ifde‡
EXT2FS_SNAPSHOT_HAS_SNAPSHOT


868 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
|

870 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|

871 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|

872 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|

873 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
|

874 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM


878 
	$sy¡ax_îr_ªp‹t
(c⁄° *
fûíame
, 
îr
, 
löe_num
)

880 
	`Ârötf
(
°dîr
,

881 
	`_
("SyntaxÉrror in mke2fs config file (%s,Üine #%d)\n\t%s\n"),

882 
fûíame
, 
löe_num
, 
	`îr‹_mesßge
(
îr
));

883 
	`exô
(1);

884 
	}
}

886 c⁄° *
	gc⁄fig_‚
[] = { 
ROOT_SYSCONFDIR
 "/mke2fs.conf", 0 };

888 
	$edô_„©uª
(c⁄° *
°r
, 
__u32
 *
com∑t_¨øy
)

890 i‡(!
°r
)

893 i‡(
	`e2p_edô_„©uª
(
°r
, 
com∑t_¨øy
, 
ok_„©uªs
)) {

894 
	`Ârötf
(
°dîr
, 
	`_
("Invalid filesystem option set: %s\n"),

895 
°r
);

896 
	`exô
(1);

898 
	}
}

900 
	s°r_li°
 {

901 **
	mli°
;

902 
	mnum
;

903 
	mmax
;

906 
îrcode_t
 
	$öô_li°
(
°r_li°
 *
¶
)

908 
¶
->
num
 = 0;

909 
¶
->
max
 = 0;

910 
¶
->
li°
 = 
	`mÆloc
((¶->
max
+1) * (*));

911 i‡(!
¶
->
li°
)

912  
ENOMEM
;

913 
¶
->
li°
[0] = 0;

915 
	}
}

917 
îrcode_t
 
	$push_°rög
(
°r_li°
 *
¶
, c⁄° *
°r
)

919 **
√w_li°
;

921 i‡(
¶
->
num
 >¶->
max
) {

922 
¶
->
max
 += 2;

923 
√w_li°
 = 
	`ªÆloc
(
¶
->
li°
, (¶->
max
+1) * (*));

924 i‡(!
√w_li°
)

925  
ENOMEM
;

926 
¶
->
li°
 = 
√w_li°
;

928 
¶
->
li°
[¶->
num
] = 
	`mÆloc
(
	`°æí
(
°r
)+1);

929 i‡(
¶
->
li°
[¶->
num
] == 0)

930  
ENOMEM
;

931 
	`°r˝y
(
¶
->
li°
[¶->
num
], 
°r
);

932 
¶
->
num
++;

933 
¶
->
li°
[¶->
num
] = 0;

935 
	}
}

937 
	$¥öt_°r_li°
(**
li°
)

939 **
˝p
;

941 
˝p
 = 
li°
; *cpp; cpp++) {

942 
	`¥ötf
("'%s'", *
˝p
);

943 i‡(
˝p
[1])

944 
	`Âuts
(", ", 
°dout
);

946 
	`Âutc
('\n', 
°dout
);

947 
	}
}

952 
	$¥ofûe_has_sub£˘i⁄
(
¥ofûe_t
 
¥ofûe
, c⁄° *
£˘i⁄
,

953 c⁄° *
sub£˘i⁄
)

955 *
°©e
;

956 c⁄° *
«mes
[4];

957 *
«me
;

958 
ªt
 = 0;

960 
«mes
[0] = 
£˘i⁄
;

961 
«mes
[1] = 
sub£˘i⁄
;

962 
«mes
[2] = 0;

964 i‡(
	`¥ofûe_ôî©‹_¸óã
(
¥ofûe
, 
«mes
,

965 
PROFILE_ITER_LIST_SECTION
 |

966 
PROFILE_ITER_RELATIONS_ONLY
, &
°©e
))

969 i‡((
	`¥ofûe_ôî©‹
(&
°©e
, &
«me
, 0) == 0) &&Çame) {

970 
	`‰ì
(
«me
);

971 
ªt
 = 1;

974 
	`¥ofûe_ôî©‹_‰ì
(&
°©e
);

975  
ªt
;

976 
	}
}

978 **
	$∑r£_fs_ty≥
(c⁄° *
fs_ty≥
,

979 c⁄° *
ußge_ty≥s
,

980 
ext2_su≥r_block
 *
fs_∑øm
,

981 *
¥og«me
)

983 c⁄° *
ext_ty≥
 = 0;

984 *
∑r£_°r
;

985 *
¥ofûe_ty≥
 = 0;

986 *
˝
, *
t
;

987 c⁄° *
size_ty≥
;

988 
°r_li°
 
li°
;

989 
meg
;

990 
is_hurd
 = 0;

992 i‡(
	`öô_li°
(&
li°
))

995 i‡(
¸ót‹_os
 && (!
	`°rˇ£cmp
(creator_os, "GNU") ||

996 !
	`°rˇ£cmp
(
¸ót‹_os
, "hurd")))

997 
is_hurd
 = 1;

999 i‡(
fs_ty≥
)

1000 
ext_ty≥
 = 
fs_ty≥
;

1001 i‡(
is_hurd
)

1002 
ext_ty≥
 = "ext2";

1003 i‡(!
	`°rcmp
(
¥ogøm_«me
, "mke3fs"))

1004 
ext_ty≥
 = "ext3";

1005 #ifde‡
EXT2FS_SNAPSHOT_BIG_JOURNAL


1006 i‡(!
	`°rcmp
(
¥ogøm_«me
, "mkfs.next3"))

1007 
ext_ty≥
 = "ext3";

1008 i‡(!
	`°rcmp
(
¥ogøm_«me
, "mkfs.next4"))

1009 
ext_ty≥
 = "ext4";

1011 i‡(
¥og«me
) {

1012 
ext_ty≥
 = 
	`°ºchr
(
¥og«me
, '/');

1013 i‡(
ext_ty≥
)

1014 
ext_ty≥
++;

1016 
ext_ty≥
 = 
¥og«me
;

1018 i‡(!
	`°∫cmp
(
ext_ty≥
, "mkfs.", 5)) {

1019 
ext_ty≥
 += 5;

1020 i‡(
ext_ty≥
[0] == 0)

1021 
ext_ty≥
 = 0;

1023 
ext_ty≥
 = 0;

1026 i‡(!
ext_ty≥
) {

1027 
	`¥ofûe_gë_°rög
(
¥ofûe
, "defaults", "fs_type", 0,

1028 "ext2", &
¥ofûe_ty≥
);

1029 
ext_ty≥
 = 
¥ofûe_ty≥
;

1030 i‡(!
	`°rcmp
(
ext_ty≥
, "ext2"Ë&& (
jou∫Æ_size
 != 0))

1031 
ext_ty≥
 = "ext3";

1035 i‡(!
	`¥ofûe_has_sub£˘i⁄
(
¥ofûe
, "fs_ty≥s", 
ext_ty≥
) &&

1036 
	`°rcmp
(
ext_ty≥
, "ext2")) {

1037 
	`¥ötf
(
	`_
("\nYour mke2fs.conf file doesÇot defineÅhe "

1038 "%†fûesy°emÅy≥.\n"), 
ext_ty≥
);

1039 i‡(!
	`°rcmp
(
ext_ty≥
, "ext3") || !strcmp(ext_type, "ext4") ||

1040 !
	`°rcmp
(
ext_ty≥
, "ext4dev")) {

1041 
	`¥ötf
(
	`_
("YouÖrobablyÇeedÅo installán updated "

1044 i‡(!
f‹˚
) {

1045 
	`¥ötf
(
	`_
("Aborting...\n"));

1046 
	`exô
(1);

1050 
meg
 = (1024 * 1024Ë/ 
	`EXT2_BLOCK_SIZE
(
fs_∑øm
);

1051 i‡(
fs_∑øm
->
s_blocks_cou¡
 < 3 * 
meg
)

1052 
size_ty≥
 = "floppy";

1053 i‡(
fs_∑øm
->
s_blocks_cou¡
 < 512 * 
meg
)

1054 
size_ty≥
 = "small";

1056 
size_ty≥
 = "default";

1058 i‡(!
ußge_ty≥s
)

1059 
ußge_ty≥s
 = 
size_ty≥
;

1061 
∑r£_°r
 = 
	`mÆloc
(
ußge_ty≥s
 ? 
	`°æí
(usage_types)+1 : 1);

1062 i‡(!
∑r£_°r
) {

1063 
	`‰ì
(
li°
.list);

1066 i‡(
ußge_ty≥s
)

1067 
	`°r˝y
(
∑r£_°r
, 
ußge_ty≥s
);

1069 *
∑r£_°r
 = '\0';

1071 i‡(
ext_ty≥
)

1072 
	`push_°rög
(&
li°
, 
ext_ty≥
);

1073 
˝
 = 
∑r£_°r
;

1075 
t
 = 
	`°rchr
(
˝
, ',');

1076 i‡(
t
)

1077 *
t
 = '\0';

1079 i‡(*
˝
) {

1080 i‡(
	`¥ofûe_has_sub£˘i⁄
(
¥ofûe
, "fs_ty≥s", 
˝
))

1081 
	`push_°rög
(&
li°
, 
˝
);

1082 i‡(
	`°rcmp
(
˝
, "default") != 0)

1083 
	`Ârötf
(
°dîr
,

1084 
	`_
("\nWarning:Åhe fs_type %s isÇot "

1086 
˝
);

1088 i‡(
t
)

1089 
˝
 = 
t
+1;

1091 
˝
 = "";

1095 
	`‰ì
(
∑r£_°r
);

1096 
	`‰ì
(
¥ofûe_ty≥
);

1097 i‡(
is_hurd
)

1098 
	`push_°rög
(&
li°
, "hurd");

1099  (
li°
.list);

1100 
	}
}

1102 *
	$gë_°rög_‰om_¥ofûe
(**
fs_ty≥s
, c⁄° *
›t
,

1103 c⁄° *
def_vÆ
)

1105 *
ªt
 = 0;

1106 
i
;

1108 
i
=0; 
fs_ty≥s
[i]; i++);

1109 
i
-=1; i >=0 ; i--) {

1110 
	`¥ofûe_gë_°rög
(
¥ofûe
, "fs_ty≥s", 
fs_ty≥s
[
i
],

1111 
›t
, 0, &
ªt
);

1112 i‡(
ªt
)

1113  
ªt
;

1115 
	`¥ofûe_gë_°rög
(
¥ofûe
, "deÁu…s", 
›t
, 0, 
def_vÆ
, &
ªt
);

1116  (
ªt
);

1117 
	}
}

1119 
	$gë_öt_‰om_¥ofûe
(**
fs_ty≥s
, c⁄° *
›t
, 
def_vÆ
)

1121 
ªt
;

1122 **
˝p
;

1124 
	`¥ofûe_gë_öãgî
(
¥ofûe
, "deÁu…s", 
›t
, 0, 
def_vÆ
, &
ªt
);

1125 
˝p
 = 
fs_ty≥s
; *cpp; cpp++)

1126 
	`¥ofûe_gë_öãgî
(
¥ofûe
, "fs_ty≥s", *
˝p
, 
›t
, 
ªt
, &ret);

1127  
ªt
;

1128 
	}
}

1130 
	$gë_boﬁ_‰om_¥ofûe
(**
fs_ty≥s
, c⁄° *
›t
, 
def_vÆ
)

1132 
ªt
;

1133 **
˝p
;

1135 
	`¥ofûe_gë_boﬁón
(
¥ofûe
, "deÁu…s", 
›t
, 0, 
def_vÆ
, &
ªt
);

1136 
˝p
 = 
fs_ty≥s
; *cpp; cpp++)

1137 
	`¥ofûe_gë_boﬁón
(
¥ofûe
, "fs_ty≥s", *
˝p
, 
›t
, 
ªt
, &ret);

1138  
ªt
;

1139 
	}
}

1141 c⁄° *
mke2fs_deÁu…_¥ofûe
;

1142 c⁄° *
	gdeÁu…_fûes
[] = { "<default>", 0 };

1144 #ifde‡
HAVE_BLKID_PROBE_GET_TOPOLOGY


1149 
	$gë_devi˚_geomëry
(c⁄° *
fûe
,

1150 
ext2_su≥r_block
 *
fs_∑øm
,

1151 
p£˘‹_size
)

1153 
rc
 = -1;

1154 
blocksize
;

1155 
blkid_¥obe
 
¥
;

1156 
blkid_t›ﬁogy
 
ç
;

1157 
mö_io
;

1158 
›t_io
;

1159 
°©
 
°©buf
;

1162 i‡(!
	`°©
(
fûe
, &
°©buf
Ë&& 
	`S_ISREG
(°©buf.
°_mode
))

1165 
¥
 = 
	`blkid_√w_¥obe_‰om_fûíame
(
fûe
);

1166 i‡(!
¥
)

1167 
out
;

1169 
ç
 = 
	`blkid_¥obe_gë_t›ﬁogy
(
¥
);

1170 i‡(!
ç
)

1171 
out
;

1173 
mö_io
 = 
	`blkid_t›ﬁogy_gë_möimum_io_size
(
ç
);

1174 
›t_io
 = 
	`blkid_t›ﬁogy_gë_›timÆ_io_size
(
ç
);

1175 
blocksize
 = 
	`EXT2_BLOCK_SIZE
(
fs_∑øm
);

1176 i‡((
mö_io
 =0Ë&& (
p£˘‹_size
 > 
blocksize
))

1177 
mö_io
 = 
p£˘‹_size
;

1178 i‡((
›t_io
 =0Ë&& 
mö_io
)

1179 
›t_io
 = 
mö_io
;

1180 i‡((
›t_io
 =0Ë&& (
p£˘‹_size
 > 
blocksize
))

1181 
›t_io
 = 
p£˘‹_size
;

1183 
fs_∑øm
->
s_øid_°ride
 = 
mö_io
 / 
blocksize
;

1184 
fs_∑øm
->
s_øid_°rùe_width
 = 
›t_io
 / 
blocksize
;

1186 
rc
 = 
	`blkid_t›ﬁogy_gë_Æignmít_off£t
(
ç
);

1187 
out
:

1188 
	`blkid_‰ì_¥obe
(
¥
);

1189  
rc
;

1190 
	}
}

1193 
	$PRS
(
¨gc
, *
¨gv
[])

1195 
b
, 
c
;

1196 
size
;

1197 *
tmp
, **
˝p
;

1198 
blocksize
 = 0;

1199 
öode_øtio
 = 0;

1200 
öode_size
 = 0;

1201 
Êex_bg_size
 = 0;

1202 
ª£rved_øtio
 = 5.0;

1203 
l£˘‹_size
 = 0, 
p£˘‹_size
 = 0;

1204 
show_vîsi⁄_⁄ly
 = 0;

1205 
num_öodes
 = 0;

1206 
îrcode_t
 
ªtvÆ
;

1207 * 
ﬁd∑th
 = 
	`gëív
("PATH");

1208 * 
exãnded_›ts
 = 0;

1209 c⁄° * 
fs_ty≥
 = 0;

1210 c⁄° * 
ußge_ty≥s
 = 0;

1211 
blk_t
 
dev_size
;

1212 #ifde‡
__löux__


1213 
ut¢ame
 
ut
;

1215 
sysvÆ
;

1216 
s_›t
 = -1, 
r_›t
 = -1;

1217 *
fs_„©uªs
 = 0;

1218 
u£_bsize
;

1219 *
√w∑th
;

1220 
∑thÀn
 = (
PATH_SET
) + 1;

1222 i‡(
ﬁd∑th
)

1223 
∑thÀn
 +
	`°æí
(
ﬁd∑th
);

1224 
√w∑th
 = 
	`mÆloc
(
∑thÀn
);

1225 
	`°r˝y
(
√w∑th
, 
PATH_SET
);

1228 i‡(
ﬁd∑th
) {

1229 
	`°rˇt
 (
√w∑th
, ":");

1230 
	`°rˇt
 (
√w∑th
, 
ﬁd∑th
);

1232 
	`puãnv
 (
√w∑th
);

1234 
tmp
 = 
	`gëív
("MKE2FS_SYNC");

1235 i‡(
tmp
)

1236 
sync_kludge
 = 
	`©oi
(
tmp
);

1239 #ifde‡
HAVE_SYSCONF


1240 #i‡(!
	`deföed
(
_SC_PAGESIZE
Ë&& deföed(
_SC_PAGE_SIZE
))

1241 
	#_SC_PAGESIZE
 
_SC_PAGE_SIZE


	)

1243 #ifde‡
_SC_PAGESIZE


1244 
sysvÆ
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1245 i‡(
sysvÆ
 > 0)

1246 
sys_∑ge_size
 = 
sysvÆ
;

1250 i‡((
tmp
 = 
	`gëív
("MKE2FS_CONFIG")Ë!
NULL
)

1251 
c⁄fig_‚
[0] = 
tmp
;

1252 
	`¥ofûe_£t_sy¡ax_îr_cb
(
sy¡ax_îr_ªp‹t
);

1253 
ªtvÆ
 = 
	`¥ofûe_öô
(
c⁄fig_‚
, &
¥ofûe
);

1254 i‡(
ªtvÆ
 =
ENOENT
) {

1255 
	`¥ofûe_öô
(
deÁu…_fûes
, &
¥ofûe
);

1256 
	`¥ofûe_£t_deÁu…
(
¥ofûe
, 
mke2fs_deÁu…_¥ofûe
);

1259 
	`£tbuf
(
°dout
, 
NULL
);

1260 
	`£tbuf
(
°dîr
, 
NULL
);

1261 
	`add_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

1262 
	`add_îr‹_èbÀ
(&
ë_¥of_îr‹_èbÀ
);

1263 
	`mem£t
(&
fs_∑øm
, 0, (
ext2_su≥r_block
));

1264 
fs_∑øm
.
s_ªv_Àvñ
 = 1;

1266 #ifde‡
__löux__


1267 i‡(
	`u«me
(&
ut
)) {

1268 
	`≥º‹
("uname");

1269 
	`exô
(1);

1271 
löux_vîsi⁄_code
 = 
	`∑r£_vîsi⁄_numbî
(
ut
.
ªÀa£
);

1272 i‡(
löux_vîsi⁄_code
 &&Üinux_version_code < (2*65536 + 2*256))

1273 
fs_∑øm
.
s_ªv_Àvñ
 = 0;

1276 i‡(
¨gc
 && *
¨gv
) {

1277 
¥ogøm_«me
 = 
	`gë_¥og«me
(*
¨gv
);

1280 i‡(!
	`°rcmp
(
¥ogøm_«me
, "mkfs.ext3") ||

1281 !
	`°rcmp
(
¥ogøm_«me
, "mke3fs"))

1282 
jou∫Æ_size
 = -1;

1283 #ifde‡
EXT2FS_SNAPSHOT_BIG_JOURNAL


1286 i‡(!
	`°rcmp
(
¥ogøm_«me
, "mkfs.next3") ||

1287 !
	`°rcmp
(
¥ogøm_«me
, "mkfs.next4")) {

1289 
jou∫Æ_size
 = -
NEXT3_MAX_COW_CREDITS
;

1291 
blocksize
 = 
sys_∑ge_size
;

1292 
fs_∑øm
.
s_log_block_size
 =

1293 
	`öt_log2
(
blocksize
 >> 
EXT2_MIN_BLOCK_LOG_SIZE
);

1294 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


1296 
	`edô_„©uª
("ex˛ude_öode", &
fs_∑øm
.
s_„©uª_com∑t
);

1298 #ifde‡
EXT2FS_SNAPSHOT_HAS_SNAPSHOT


1300 
	`edô_„©uª
("has_¢≠shŸ", &
fs_∑øm
.
s_„©uª_com∑t
);

1306 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
,

1307 "b:cf:g:G:i:jl:m:no:qr:s:t:vE:FI:J:KL:M:N:O:R:ST:U:V")Ë!
EOF
) {

1308 
c
) {

1310 
blocksize
 = 
	`°πﬁ
(
›èrg
, &
tmp
, 0);

1311 
b
 = (
blocksize
 > 0) ? blocksize : -blocksize;

1312 i‡(
b
 < 
EXT2_MIN_BLOCK_SIZE
 ||

1313 
b
 > 
EXT2_MAX_BLOCK_SIZE
 || *
tmp
) {

1314 
	`com_îr
(
¥ogøm_«me
, 0,

1315 
	`_
("övÆid block sizê- %s"), 
›èrg
);

1316 
	`exô
(1);

1318 i‡(
blocksize
 > 4096)

1319 
	`Ârötf
(
°dîr
, 
	`_
("Warning: blocksize %dÇot "

1321 
blocksize
);

1322 i‡(
blocksize
 > 0)

1323 
fs_∑øm
.
s_log_block_size
 =

1324 
	`öt_log2
(
blocksize
 >>

1325 
EXT2_MIN_BLOCK_LOG_SIZE
);

1328 
cÊag
++;

1331 
size
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1332 i‡(
size
 < 
EXT2_MIN_BLOCK_SIZE
 ||

1333 
size
 > 
EXT2_MAX_BLOCK_SIZE
 || *
tmp
) {

1334 
	`com_îr
(
¥ogøm_«me
, 0,

1335 
	`_
("invalid fragment size - %s"),

1336 
›èrg
);

1337 
	`exô
(1);

1339 
fs_∑øm
.
s_log_‰ag_size
 =

1340 
	`öt_log2
(
size
 >> 
EXT2_MIN_BLOCK_LOG_SIZE
);

1341 
	`Ârötf
(
°dîr
, 
	`_
("Warning: fragmentsÇot supported. "

1345 
fs_∑øm
.
s_blocks_≥r_group
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1346 i‡(*
tmp
) {

1347 
	`com_îr
(
¥ogøm_«me
, 0,

1348 
	`_
("IllegalÇumber for blocksÖer group"));

1349 
	`exô
(1);

1351 i‡((
fs_∑øm
.
s_blocks_≥r_group
 % 8) != 0) {

1352 
	`com_îr
(
¥ogøm_«me
, 0,

1353 
	`_
("blocksÖer group must be multiple of 8"));

1354 
	`exô
(1);

1358 
Êex_bg_size
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1359 i‡(*
tmp
) {

1360 
	`com_îr
(
¥ogøm_«me
, 0,

1361 
	`_
("IllegalÇumber for flex_bg size"));

1362 
	`exô
(1);

1364 i‡(
Êex_bg_size
 < 1 ||

1365 (
Êex_bg_size
 & (flex_bg_size-1)) != 0) {

1366 
	`com_îr
(
¥ogøm_«me
, 0,

1367 
	`_
("flex_bg size must beáÖower of 2"));

1368 
	`exô
(1);

1372 
öode_øtio
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1373 i‡(
öode_øtio
 < 
EXT2_MIN_BLOCK_SIZE
 ||

1374 
öode_øtio
 > 
EXT2_MAX_BLOCK_SIZE
 * 1024 ||

1375 *
tmp
) {

1376 
	`com_îr
(
¥ogøm_«me
, 0,

1377 
	`_
("invalid inodeÑatio %s (min %d/max %d)"),

1378 
›èrg
, 
EXT2_MIN_BLOCK_SIZE
,

1379 
EXT2_MAX_BLOCK_SIZE
 * 1024);

1380 
	`exô
(1);

1384 
	`∑r£_jou∫Æ_›ts
(
›èrg
);

1387 
	`Ârötf
(
°dîr
, 
	`_
("Warning: -K option is deprecatedánd "

1391 
disˇrd
 = 0;

1394 i‡(!
jou∫Æ_size
)

1395 
jou∫Æ_size
 = -1;

1398 
bad_blocks_fûíame
 = 
	`mÆloc
(
	`°æí
(
›èrg
)+1);

1399 i‡(!
bad_blocks_fûíame
) {

1400 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
,

1401 
	`_
("in malloc for bad_blocks_filename"));

1402 
	`exô
(1);

1404 
	`°r˝y
(
bad_blocks_fûíame
, 
›èrg
);

1407 
ª£rved_øtio
 = 
	`°πod
(
›èrg
, &
tmp
);

1408 i‡–*
tmp
 || 
ª£rved_øtio
 > 50 ||

1409 
ª£rved_øtio
 < 0) {

1410 
	`com_îr
(
¥ogøm_«me
, 0,

1411 
	`_
("invalidÑeserved blocksÖercent - %s"),

1412 
›èrg
);

1413 
	`exô
(1);

1417 
nﬂ˘i⁄
++;

1420 
¸ót‹_os
 = 
›èrg
;

1423 
quõt
 = 1;

1426 
r_›t
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1427 i‡(*
tmp
) {

1428 
	`com_îr
(
¥ogøm_«me
, 0,

1429 
	`_
("badÑevisi⁄Üevñ - %s"), 
›èrg
);

1430 
	`exô
(1);

1432 
fs_∑øm
.
s_ªv_Àvñ
 = 
r_›t
;

1435 
s_›t
 = 
	`©oi
(
›èrg
);

1438 
öode_size
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1439 i‡(*
tmp
) {

1440 
	`com_îr
(
¥ogøm_«me
, 0,

1441 
	`_
("övÆid inodêsizê- %s"), 
›èrg
);

1442 
	`exô
(1);

1446 
vîbo£
 = 1;

1449 
f‹˚
++;

1452 
vﬁume_œbñ
 = 
›èrg
;

1455 
mou¡_dú
 = 
›èrg
;

1458 
num_öodes
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1459 i‡(*
tmp
) {

1460 
	`com_îr
(
¥ogøm_«me
, 0,

1461 
	`_
("badÇum inode†- %s"), 
›èrg
);

1462 
	`exô
(1);

1466 
fs_„©uªs
 = 
›èrg
;

1470 
exãnded_›ts
 = 
›èrg
;

1473 
su≥r_⁄ly
 = 1;

1476 
fs_ty≥
 = 
›èrg
;

1479 
ußge_ty≥s
 = 
›èrg
;

1482 
fs_uuid
 = 
›èrg
;

1486 
show_vîsi⁄_⁄ly
++;

1489 
	`ußge
();

1492 i‡((
›töd
 =
¨gc
Ë&& !
show_vîsi⁄_⁄ly
)

1493 
	`ußge
();

1494 
devi˚_«me
 = 
¨gv
[
›töd
++];

1496 i‡(!
quõt
 || 
show_vîsi⁄_⁄ly
)

1497 
	`Ârötf
 (
°dîr
, "mke2f†%†(%s)\n", 
E2FSPROGS_VERSION
,

1498 
E2FSPROGS_DATE
);

1500 i‡(
show_vîsi⁄_⁄ly
) {

1501 
	`Ârötf
(
°dîr
, 
	`_
("\tUsing %s\n"),

1502 
	`îr‹_mesßge
(
EXT2_ET_BASE
));

1503 
	`exô
(0);

1510 i‡(
blocksize
 <0 && 
jou∫Æ_devi˚
) {

1511 
ext2_fûsys
 
jfs
;

1512 
io_m™agî
 
io_±r
;

1514 #ifde‡
CONFIG_TESTIO_DEBUG


1515 i‡(
	`gëív
("TEST_IO_FLAGS") || getenv("TEST_IO_BLOCK")) {

1516 
io_±r
 = 
ã°_io_m™agî
;

1517 
ã°_io_backög_m™agî
 = 
unix_io_m™agî
;

1520 
io_±r
 = 
unix_io_m™agî
;

1521 
ªtvÆ
 = 
	`ext2fs_›í
(
jou∫Æ_devi˚
,

1522 
EXT2_FLAG_JOURNAL_DEV_OK
, 0,

1523 0, 
io_±r
, &
jfs
);

1524 i‡(
ªtvÆ
) {

1525 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

1526 
	`_
("whileÅryingÅo open journal device %s\n"),

1527 
jou∫Æ_devi˚
);

1528 
	`exô
(1);

1530 i‡((
blocksize
 < 0Ë&& (
jfs
->blocksize < () (-blocksize))) {

1531 
	`com_îr
(
¥ogøm_«me
, 0,

1532 
	`_
("Journal dev blocksize (%d) smallerÅhan "

1533 "möimum blocksizê%d\n"), 
jfs
->
blocksize
,

1534 -
blocksize
);

1535 
	`exô
(1);

1537 
blocksize
 = 
jfs
->blocksize;

1538 
	`¥ötf
(
	`_
("Usög jou∫Æ devi˚'†blocksize: %d\n"), 
blocksize
);

1539 
fs_∑øm
.
s_log_block_size
 =

1540 
	`öt_log2
(
blocksize
 >> 
EXT2_MIN_BLOCK_LOG_SIZE
);

1541 
	`ext2fs_˛o£
(
jfs
);

1544 i‡(
blocksize
 > 
sys_∑ge_size
) {

1545 i‡(!
f‹˚
) {

1546 
	`com_îr
(
¥ogøm_«me
, 0,

1547 
	`_
("%d-byte blocksÅoo big for system (max %d)"),

1548 
blocksize
, 
sys_∑ge_size
);

1549 
	`¥o˚ed_que°i⁄
();

1551 
	`Ârötf
(
°dîr
, 
	`_
("Warning: %d-byte blocksÅoo big for system "

1553 
blocksize
, 
sys_∑ge_size
);

1555 i‡(
›töd
 < 
¨gc
) {

1556 
fs_∑øm
.
s_blocks_cou¡
 = 
	`∑r£_num_blocks
(
¨gv
[
›töd
++],

1557 
fs_∑øm
.
s_log_block_size
);

1558 i‡(!
fs_∑øm
.
s_blocks_cou¡
) {

1559 
	`com_îr
(
¥ogøm_«me
, 0,

1560 
	`_
("invalid blocks count '%s' on device '%s'"),

1561 
¨gv
[
›töd
 - 1], 
devi˚_«me
);

1562 
	`exô
(1);

1565 i‡(
›töd
 < 
¨gc
)

1566 
	`ußge
();

1568 i‡(!
f‹˚
)

1569 
	`check_∂ausibûôy
(
devi˚_«me
);

1570 
	`check_mou¡
(
devi˚_«me
, 
f‹˚
, 
	`_
("filesystem"));

1572 
fs_∑øm
.
s_log_‰ag_size
 = fs_∑øm.
s_log_block_size
;

1574 i‡(
nﬂ˘i⁄
 && 
fs_∑øm
.
s_blocks_cou¡
) {

1575 
dev_size
 = 
fs_∑øm
.
s_blocks_cou¡
;

1576 
ªtvÆ
 = 0;

1578 
ªåy
:

1579 
ªtvÆ
 = 
	`ext2fs_gë_devi˚_size
(
devi˚_«me
,

1580 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
),

1581 &
dev_size
);

1582 i‡((
ªtvÆ
 =
EFBIG
) &&

1583 (
blocksize
 == 0) &&

1584 (
fs_∑øm
.
s_log_block_size
 == 0)) {

1585 
fs_∑øm
.
s_log_block_size
 = 2;

1586 
blocksize
 = 4096;

1587 
ªåy
;

1591 i‡(
ªtvÆ
 =
EFBIG
) {

1592 
blk64_t
 
big_dev_size
;

1594 i‡(
blocksize
 < 4096) {

1595 
fs_∑øm
.
s_log_block_size
 = 2;

1596 
blocksize
 = 4096;

1598 
ªtvÆ
 = 
	`ext2fs_gë_devi˚_size2
(
devi˚_«me
,

1599 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
), &
big_dev_size
);

1600 i‡(
ªtvÆ
)

1601 
gë_size_Áûuª
;

1602 i‡(
big_dev_size
 == (1ULL << 32)) {

1603 
dev_size
 = (
blk_t
Ë(
big_dev_size
 - 1);

1604 
gŸ_size
;

1606 
	`Ârötf
(
°dîr
, 
	`_
("%s: Size of device %sÅoo big "

1609 
¥ogøm_«me
, 
devi˚_«me
, 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
));

1610 
	`exô
(1);

1612 
gë_size_Áûuª
:

1613 i‡(
ªtvÆ
 && (ªtvÆ !
EXT2_ET_UNIMPLEMENTED
)) {

1614 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

1615 
	`_
("whileÅryingÅo determine filesystem size"));

1616 
	`exô
(1);

1618 
gŸ_size
:

1619 i‡(!
fs_∑øm
.
s_blocks_cou¡
) {

1620 i‡(
ªtvÆ
 =
EXT2_ET_UNIMPLEMENTED
) {

1621 
	`com_îr
(
¥ogøm_«me
, 0,

1622 
	`_
("Couldn't determine device size; you "

1625 
	`exô
(1);

1627 i‡(
dev_size
 == 0) {

1628 
	`com_îr
(
¥ogøm_«me
, 0,

1629 
	`_
("Device sizeÑeportedÅo be zero. "

1637 
	`exô
(1);

1639 
fs_∑øm
.
s_blocks_cou¡
 = 
dev_size
;

1640 i‡(
sys_∑ge_size
 > 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
))

1641 
fs_∑øm
.
s_blocks_cou¡
 &~((
sys_∑ge_size
 /

1642 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
))-1);

1645 } i‡(!
f‹˚
 && (
fs_∑øm
.
s_blocks_cou¡
 > 
dev_size
)) {

1646 
	`com_îr
(
¥ogøm_«me
, 0,

1647 
	`_
("FilesystemÜargerÅhanápparent device size."));

1648 
	`¥o˚ed_que°i⁄
();

1651 
fs_ty≥s
 = 
	`∑r£_fs_ty≥
(
fs_ty≥
, 
ußge_ty≥s
, &
fs_∑øm
, 
¨gv
[0]);

1652 i‡(!
fs_ty≥s
) {

1653 
	`Ârötf
(
°dîr
, 
	`_
("FailedÅoÖarse fsÅypesÜist\n"));

1654 
	`exô
(1);

1659 
tmp
 = 
NULL
;

1660 i‡(
fs_∑øm
.
s_ªv_Àvñ
 !
EXT2_GOOD_OLD_REV
) {

1661 
tmp
 = 
	`gë_°rög_‰om_¥ofûe
(
fs_ty≥s
, "base_features",

1663 
	`edô_„©uª
(
tmp
, &
fs_∑øm
.
s_„©uª_com∑t
);

1664 
	`‰ì
(
tmp
);

1666 
˝p
 = 
fs_ty≥s
; *cpp; cpp++) {

1667 
tmp
 = 
NULL
;

1668 
	`¥ofûe_gë_°rög
(
¥ofûe
, "fs_ty≥s", *
˝p
,

1669 "„©uªs", "", &
tmp
);

1670 i‡(
tmp
 && *tmp)

1671 
	`edô_„©uª
(
tmp
, &
fs_∑øm
.
s_„©uª_com∑t
);

1672 
	`‰ì
(
tmp
);

1674 
tmp
 = 
	`gë_°rög_‰om_¥ofûe
(
fs_ty≥s
, "default_features",

1677 
	`edô_„©uª
(
fs_„©uªs
 ? fs_„©uª†: 
tmp
,

1678 &
fs_∑øm
.
s_„©uª_com∑t
);

1679 
	`‰ì
(
tmp
);

1681 i‡(
fs_∑øm
.
s_„©uª_öcom∑t
 & 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
) {

1682 
fs_ty≥s
[0] = 
	`°rdup
("journal");

1683 
fs_ty≥s
[1] = 0;

1686 i‡(
vîbo£
) {

1687 
	`Âuts
(
	`_
("fs_ty≥†f‹ mke2fs.c⁄‡ªsﬁuti⁄: "), 
°dout
);

1688 
	`¥öt_°r_li°
(
fs_ty≥s
);

1691 i‡(
r_›t
 =
EXT2_GOOD_OLD_REV
 &&

1692 (
fs_∑øm
.
s_„©uª_com∑t
 || fs_∑øm.
s_„©uª_öcom∑t
 ||

1693 
fs_∑øm
.
s_„©uª_ro_com∑t
)) {

1694 
	`Ârötf
(
°dîr
, 
	`_
("Filesystem featuresÇot supported "

1696 
	`exô
(1);

1699 i‡(
s_›t
 > 0) {

1700 i‡(
r_›t
 =
EXT2_GOOD_OLD_REV
) {

1701 
	`Ârötf
(
°dîr
, 
	`_
("Sparse superblocksÇot supported "

1703 
	`exô
(1);

1705 
fs_∑øm
.
s_„©uª_ro_com∑t
 |=

1706 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
;

1707 } i‡(
s_›t
 == 0)

1708 
fs_∑øm
.
s_„©uª_ro_com∑t
 &=

1709 ~
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
;

1711 i‡(
jou∫Æ_size
 != 0) {

1712 i‡(
r_›t
 =
EXT2_GOOD_OLD_REV
) {

1713 
	`Ârötf
(
°dîr
, 
	`_
("JournalsÇot supported "

1715 
	`exô
(1);

1717 
fs_∑øm
.
s_„©uª_com∑t
 |=

1718 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
;

1721 i‡(
fs_∑øm
.
s_„©uª_öcom∑t
 &

1722 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
) {

1723 
ª£rved_øtio
 = 0;

1724 
fs_∑øm
.
s_„©uª_öcom∑t
 = 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
;

1725 
fs_∑øm
.
s_„©uª_com∑t
 = 0;

1726 
fs_∑øm
.
s_„©uª_ro_com∑t
 = 0;

1729 i‡((
fs_∑øm
.
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
) &&

1730 (
fs_∑øm
.
s_„©uª_com∑t
 & 
EXT2_FEATURE_COMPAT_RESIZE_INODE
)) {

1731 
	`Ârötf
(
°dîr
, 
	`_
("TheÑesize_inodeánd meta_bg features "

1735 
	`exô
(1);

1740 i‡((
fs_∑øm
.
s_„©uª_öcom∑t
 & 
EXT2_FEATURE_INCOMPAT_META_BG
) &&

1741 ((
tmp
 = 
	`gëív
("MKE2FS_FIRST_META_BG"))))

1742 
fs_∑øm
.
s_fú°_mëa_bg
 = 
	`©oi
(
tmp
);

1745 
ªtvÆ
 = 
	`ext2fs_gë_devi˚_£˘size
(
devi˚_«me
, &
l£˘‹_size
);

1746 i‡(
ªtvÆ
) {

1747 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

1748 
	`_
("whileÅryingÅo determine hardware sector size"));

1749 
	`exô
(1);

1751 
ªtvÆ
 = 
	`ext2fs_gë_devi˚_phys_£˘size
(
devi˚_«me
, &
p£˘‹_size
);

1752 i‡(
ªtvÆ
) {

1753 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

1754 
	`_
("whileÅryingÅo determineÖhysical sector size"));

1755 
	`exô
(1);

1758 i‡((
tmp
 = 
	`gëív
("MKE2FS_DEVICE_SECTSIZE")Ë!
NULL
)

1759 
l£˘‹_size
 = 
	`©oi
(
tmp
);

1760 i‡((
tmp
 = 
	`gëív
("MKE2FS_DEVICE_PHYS_SECTSIZE")Ë!
NULL
)

1761 
p£˘‹_size
 = 
	`©oi
(
tmp
);

1764 i‡(!
p£˘‹_size
)

1765 
p£˘‹_size
 = 
l£˘‹_size
;

1767 i‡(
blocksize
 <= 0) {

1768 
u£_bsize
 = 
	`gë_öt_‰om_¥ofûe
(
fs_ty≥s
, "blocksize", 4096);

1770 i‡(
u£_bsize
 == -1) {

1771 
u£_bsize
 = 
sys_∑ge_size
;

1772 i‡((
löux_vîsi⁄_code
 < (2*65536 + 6*256)) &&

1773 (
u£_bsize
 > 4096))

1774 
u£_bsize
 = 4096;

1776 i‡(
l£˘‹_size
 && 
u£_bsize
 <Üsector_size)

1777 
u£_bsize
 = 
l£˘‹_size
;

1778 i‡((
blocksize
 < 0Ë&& (
u£_bsize
 < (-blocksize)))

1779 
u£_bsize
 = -
blocksize
;

1780 
blocksize
 = 
u£_bsize
;

1781 
fs_∑øm
.
s_blocks_cou¡
 /
blocksize
 / 1024;

1783 i‡(
blocksize
 < 
l£˘‹_size
) {

1784 
	`com_îr
(
¥ogøm_«me
, 
EINVAL
,

1785 
	`_
("while setting blocksize;Åoo small "

1787 
	`exô
(1);

1788 } i‡((
blocksize
 < 
p£˘‹_size
) &&

1789 (
p£˘‹_size
 <
sys_∑ge_size
)) {

1790 
	`Ârötf
(
°dîr
, 
	`_
("Warning: specified blocksize %d is "

1792 
blocksize
, 
p£˘‹_size
);

1796 i‡(
öode_øtio
 == 0) {

1797 
öode_øtio
 = 
	`gë_öt_‰om_¥ofûe
(
fs_ty≥s
, "inode_ratio",

1799 i‡(
öode_øtio
 < 
blocksize
)

1800 
öode_øtio
 = 
blocksize
;

1803 
fs_∑øm
.
s_log_‰ag_size
 = fs_∑øm.
s_log_block_size
 =

1804 
	`öt_log2
(
blocksize
 >> 
EXT2_MIN_BLOCK_LOG_SIZE
);

1806 #ifde‡
HAVE_BLKID_PROBE_GET_TOPOLOGY


1807 
ªtvÆ
 = 
	`gë_devi˚_geomëry
(
devi˚_«me
, &
fs_∑øm
, 
p£˘‹_size
);

1808 i‡(
ªtvÆ
 < 0) {

1809 
	`Ârötf
(
°dîr
,

1810 
	`_
("warning: UnableÅo get device geometry for %s\n"),

1811 
devi˚_«me
);

1812 } i‡(
ªtvÆ
) {

1813 
	`¥ötf
(
	`_
("%sálignment is offset by %lu bytes.\n"),

1814 
devi˚_«me
, 
ªtvÆ
);

1815 
	`¥ötf
(
	`_
("This mayÑesult in veryÖoorÖerformance, "

1820 
blocksize
 = 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
);

1822 
œzy_ôabÀ_öô
 = 0;

1823 i‡(
	`ac˚ss
("/sys/fs/ext4/„©uªs/œzy_ôabÀ_öô", 
R_OK
) == 0)

1824 
œzy_ôabÀ_öô
 = 1;

1826 
œzy_ôabÀ_öô
 = 
	`gë_boﬁ_‰om_¥ofûe
(
fs_ty≥s
,

1828 
œzy_ôabÀ_öô
);

1829 
disˇrd
 = 
	`gë_boﬁ_‰om_¥ofûe
(
fs_ty≥s
, "discard" , discard);

1832 
˝p
 = 
fs_ty≥s
; *cpp; cpp++) {

1833 
tmp
 = 
NULL
;

1834 
	`¥ofûe_gë_°rög
(
¥ofûe
, "fs_ty≥s", *
˝p
, "›ti⁄s", "", &
tmp
);

1835 i‡(
tmp
 && *tmp)

1836 
	`∑r£_exãnded_›ts
(&
fs_∑øm
, 
tmp
);

1837 
	`‰ì
(
tmp
);

1840 i‡(
exãnded_›ts
)

1841 
	`∑r£_exãnded_›ts
(&
fs_∑øm
, 
exãnded_›ts
);

1846 i‡((
fs_∑øm
.
s_„©uª_com∑t
 & 
EXT2_FEATURE_COMPAT_RESIZE_INODE
) &&

1847 !(
fs_∑øm
.
s_„©uª_ro_com∑t
&
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
)) {

1848 
	`com_îr
(
¥ogøm_«me
, 0,

1849 
	`_
("reserved onlineÑesize blocksÇot supported "

1851 
	`exô
(1);

1854 i‡(
fs_∑øm
.
s_blocks_≥r_group
) {

1855 i‡(
fs_∑øm
.
s_blocks_≥r_group
 < 256 ||

1856 
fs_∑øm
.
s_blocks_≥r_group
 > 8 * (Ë
blocksize
) {

1857 
	`com_îr
(
¥ogøm_«me
, 0,

1858 
	`_
("blocksÖer group count out ofÑange"));

1859 
	`exô
(1);

1863 i‡(
öode_size
 == 0)

1864 
öode_size
 = 
	`gë_öt_‰om_¥ofûe
(
fs_ty≥s
, "inode_size", 0);

1865 i‡(!
Êex_bg_size
 && (
fs_∑øm
.
s_„©uª_öcom∑t
 &

1866 
EXT4_FEATURE_INCOMPAT_FLEX_BG
))

1867 
Êex_bg_size
 = 
	`gë_öt_‰om_¥ofûe
(
fs_ty≥s
,

1869 i‡(
Êex_bg_size
) {

1870 i‡(!(
fs_∑øm
.
s_„©uª_öcom∑t
 &

1871 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)) {

1872 
	`com_îr
(
¥ogøm_«me
, 0,

1873 
	`_
("Flex_bg featureÇotÉnabled, so "

1875 
	`exô
(1);

1877 
fs_∑øm
.
s_log_groups_≥r_Êex
 = 
	`öt_log2
(
Êex_bg_size
);

1880 i‡(
öode_size
 && 
fs_∑øm
.
s_ªv_Àvñ
 >
EXT2_DYNAMIC_REV
) {

1881 i‡(
öode_size
 < 
EXT2_GOOD_OLD_INODE_SIZE
 ||

1882 
öode_size
 > 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
) ||

1883 
öode_size
 & (inode_size - 1)) {

1884 
	`com_îr
(
¥ogøm_«me
, 0,

1885 
	`_
("invalid inode size %d (min %d/max %d)"),

1886 
öode_size
, 
EXT2_GOOD_OLD_INODE_SIZE
,

1887 
blocksize
);

1888 
	`exô
(1);

1890 
fs_∑øm
.
s_öode_size
 = 
öode_size
;

1894 i‡(
num_öodes
 == 0) {

1895 
n
;

1896 
n
 = (Ë
fs_∑øm
.
s_blocks_cou¡
 * 
blocksize
 / 
öode_øtio
;

1897 i‡(
n
 > ~0U) {

1898 
	`com_îr
(
¥ogøm_«me
, 0,

1899 
	`_
("toÿm™y inode†(%Œu),Ñai£ inodêøtio?"), 
n
);

1900 
	`exô
(1);

1902 } i‡(
num_öodes
 > ~0U) {

1903 
	`com_îr
(
¥ogøm_«me
, 0,

1904 
	`_
("too many inodes (%llu), specify < 2^32 inodes"),

1905 
num_öodes
);

1906 
	`exô
(1);

1911 
fs_∑øm
.
s_öodes_cou¡
 = 
num_öodes
 ?Çum_inodes :

1912 ((
__u64
Ë
fs_∑øm
.
s_blocks_cou¡
 * 
blocksize
)

1913 / 
öode_øtio
;

1915 i‡(((()
fs_∑øm
.
s_öodes_cou¡
) *

1916 (
öode_size
 ? inode_sizê: 
EXT2_GOOD_OLD_INODE_SIZE
)) >=

1917 ((()
fs_∑øm
.
s_blocks_cou¡
) *

1918 
	`EXT2_BLOCK_SIZE
(&
fs_∑øm
))) {

1919 
	`com_îr
(
¥ogøm_«me
, 0, 
	`_
("inode_size (%u) * inodes_count "

1924 
öode_size
 ? inode_sizê: 
EXT2_GOOD_OLD_INODE_SIZE
,

1925 
fs_∑øm
.
s_öodes_cou¡
,

1926 (Ë
fs_∑øm
.
s_blocks_cou¡
);

1927 
	`exô
(1);

1933 
fs_∑øm
.
s_r_blocks_cou¡
 = (Ë(
ª£rved_øtio
 *

1934 
fs_∑øm
.
s_blocks_cou¡
 / 100.0);

1935 
	}
}

1937 
	$should_do_undo
(c⁄° *
«me
)

1939 
îrcode_t
 
ªtvÆ
;

1940 
io_ch™√l
 
ch™√l
;

1941 
__u16
 
s_magic
;

1942 
ext2_su≥r_block
 
su≥r
;

1943 
io_m™agî
 
m™agî
 = 
unix_io_m™agî
;

1944 
csum_Êag
, 
f‹˚_undo
;

1946 
csum_Êag
 = 
	`EXT2_HAS_RO_COMPAT_FEATURE
(&
fs_∑øm
,

1947 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
);

1948 
f‹˚_undo
 = 
	`gë_öt_‰om_¥ofûe
(
fs_ty≥s
, "force_undo", 0);

1949 i‡(!
f‹˚_undo
 && (!
csum_Êag
 || !
œzy_ôabÀ_öô
))

1952 
ªtvÆ
 = 
m™agî
->
	`›í
(
«me
, 
IO_FLAG_EXCLUSIVE
, &
ch™√l
);

1953 i‡(
ªtvÆ
) {

1960 
ªtvÆ
 = 0;

1961 
›í_îr_out
;

1964 
	`io_ch™√l_£t_blksize
(
ch™√l
, 
SUPERBLOCK_OFFSET
);

1965 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
ch™√l
, 1, -
SUPERBLOCK_SIZE
, &
su≥r
);

1966 i‡(
ªtvÆ
) {

1967 
ªtvÆ
 = 0;

1968 
îr_out
;

1971 #i‡
	`deföed
(
WORDS_BIGENDIAN
)

1972 
s_magic
 = 
	`ext2fs_swab16
(
su≥r
.s_magic);

1974 
s_magic
 = 
su≥r
.s_magic;

1977 i‡(
s_magic
 =
EXT2_SUPER_MAGIC
)

1978 
ªtvÆ
 = 1;

1980 
îr_out
:

1981 
	`io_ch™√l_˛o£
(
ch™√l
);

1983 
›í_îr_out
:

1985  
ªtvÆ
;

1986 
	}
}

1988 
	$mke2fs_£tup_tdb
(c⁄° *
«me
, 
io_m™agî
 *
io_±r
)

1990 
îrcode_t
 
ªtvÆ
 = 0;

1991 *
tdb_dú
, *
tdb_fûe
;

1992 *
devi˚_«me
, *
tmp_«me
;

1998 
tdb_dú
 = 
	`gëív
("E2FSPROGS_UNDO_DIR");

1999 i‡(!
tdb_dú
)

2000 
	`¥ofûe_gë_°rög
(
¥ofûe
, "defaults",

2002 &
tdb_dú
);

2004 i‡(!
	`°rcmp
(
tdb_dú
, "none") || (tdb_dir[0] == 0) ||

2005 
	`ac˚ss
(
tdb_dú
, 
W_OK
))

2008 
tmp_«me
 = 
	`°rdup
(
«me
);

2009 i‡(!
tmp_«me
) {

2010 
Æloc_‚_Áû
:

2011 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
,

2012 
	`_
("Couldn'tállocate memory forÅdb filename\n"));

2013  
ENOMEM
;

2015 
devi˚_«me
 = 
	`ba£«me
(
tmp_«me
);

2016 
tdb_fûe
 = 
	`mÆloc
(
	`°æí
(
tdb_dú
Ë+ 8 + såÀn(
devi˚_«me
) + 7 + 1);

2017 i‡(!
tdb_fûe
)

2018 
Æloc_‚_Áû
;

2019 
	`•rötf
(
tdb_fûe
, "%s/mke2fs-%s.e2undo", 
tdb_dú
, 
devi˚_«me
);

2021 i‡(!
	`ac˚ss
(
tdb_fûe
, 
F_OK
)) {

2022 i‡(
	`u∆ök
(
tdb_fûe
) < 0) {

2023 
ªtvÆ
 = 
î∫o
;

2024 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

2025 
	`_
("whileÅryingÅo delete %s"),

2026 
tdb_fûe
);

2027 
	`‰ì
(
tdb_fûe
);

2028  
ªtvÆ
;

2032 
	`£t_undo_io_backög_m™agî
(*
io_±r
);

2033 *
io_±r
 = 
undo_io_m™agî
;

2034 
	`£t_undo_io_backup_fûe
(
tdb_fûe
);

2035 
	`¥ötf
(
	`_
("OverwritingÉxisting filesystem;Åhis can be undone "

2037 "É2undÿ%†%s\n\n"), 
tdb_fûe
, 
«me
);

2039 
	`‰ì
(
tdb_fûe
);

2040 
	`‰ì
(
tmp_«me
);

2041  
ªtvÆ
;

2042 
	}
}

2044 #ifde‡
__löux__


2046 #i‚de‡
BLKDISCARD


2047 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

2050 #i‚de‡
BLKDISCARDZEROES


2051 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

2057 
	$mke2fs_disˇrd_blocks
(
ext2_fûsys
 
fs
)

2059 
fd
;

2060 
ªt
;

2061 
blocksize
;

2062 
__u64
 
blocks
;

2063 
__uöt64_t
 
ønge
[2];

2065 
blocks
 = 
fs
->
su≥r
->
s_blocks_cou¡
;

2066 
blocksize
 = 
	`EXT2_BLOCK_SIZE
(
fs
->
su≥r
);

2067 
ønge
[0] = 0;

2068 
ønge
[1] = 
blocks
 * 
blocksize
;

2070 
fd
 = 
	`›í64
(
fs
->
devi˚_«me
, 
O_RDWR
);

2072 i‡(
fd
 > 0) {

2073 
ªt
 = 
	`io˘l
(
fd
, 
BLKDISCARD
, &
ønge
);

2074 i‡(
vîbo£
) {

2075 
	`¥ötf
(
	`_
("Calling BLKDISCARD from %lluÅo %llu "),

2076 (Ë
ønge
[0],

2077 (Ë
ønge
[1]);

2078 i‡(
ªt
)

2079 
	`¥ötf
(
	`_
("failed.\n"));

2081 
	`¥ötf
(
	`_
("succeeded.\n"));

2083 
	`˛o£
(
fd
);

2085  
ªt
;

2086 
	}
}

2088 
	$mke2fs_disˇrd_zî€s_d©a
(
ext2_fûsys
 
fs
)

2090 
fd
;

2091 
ªt
;

2092 
disˇrd_zî€s_d©a
 = 0;

2094 
fd
 = 
	`›í64
(
fs
->
devi˚_«me
, 
O_RDWR
);

2096 i‡(
fd
 > 0) {

2097 
	`io˘l
(
fd
, 
BLKDISCARDZEROES
, &
disˇrd_zî€s_d©a
);

2098 
	`˛o£
(
fd
);

2100  
disˇrd_zî€s_d©a
;

2101 
	}
}

2103 
	#mke2fs_disˇrd_blocks
(
fs
Ë1

	)

2104 
	#mke2fs_disˇrd_zî€s_d©a
(
fs
Ë0

	)

2107 
	$maö
 (
¨gc
, *
¨gv
[])

2109 
îrcode_t
 
ªtvÆ
 = 0;

2110 
ext2_fûsys
 
fs
;

2111 
badblocks_li°
 
bb_li°
 = 0;

2112 
jou∫Æ_blocks
;

2113 
i
;

2114 
vÆ
, 
hash_Æg
;

2115 
io_m™agî
 
io_±r
;

2116 
tdb_°rög
[40];

2117 *
hash_Æg_°r
;

2118 
ôabÀ_zî€d
 = 0;

2120 #ifde‡
ENABLE_NLS


2121 
	`£éoˇÀ
(
LC_MESSAGES
, "");

2122 
	`£éoˇÀ
(
LC_CTYPE
, "");

2123 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

2124 
	`ãxtdomaö
(
NLS_CAT_NAME
);

2126 
	`PRS
(
¨gc
, 
¨gv
);

2128 #ifde‡
CONFIG_TESTIO_DEBUG


2129 i‡(
	`gëív
("TEST_IO_FLAGS") || getenv("TEST_IO_BLOCK")) {

2130 
io_±r
 = 
ã°_io_m™agî
;

2131 
ã°_io_backög_m™agî
 = 
unix_io_m™agî
;

2134 
io_±r
 = 
unix_io_m™agî
;

2136 i‡(
	`should_do_undo
(
devi˚_«me
)) {

2137 
ªtvÆ
 = 
	`mke2fs_£tup_tdb
(
devi˚_«me
, &
io_±r
);

2138 i‡(
ªtvÆ
)

2139 
	`exô
(1);

2145 
ªtvÆ
 = 
	`ext2fs_öôülize
(
devi˚_«me
, 
EXT2_FLAG_EXCLUSIVE
, &
fs_∑øm
,

2146 
io_±r
, &
fs
);

2147 i‡(
ªtvÆ
) {

2148 
	`com_îr
(
devi˚_«me
, 
ªtvÆ
, 
	`_
("while setting up superblock"));

2149 
	`exô
(1);

2153 i‡(
disˇrd
 && (
io_±r
 !
undo_io_m™agî
)) {

2154 
ªtvÆ
 = 
	`mke2fs_disˇrd_blocks
(
fs
);

2156 i‡(!
ªtvÆ
 && 
	`mke2fs_disˇrd_zî€s_d©a
(
fs
)) {

2157 i‡(
vîbo£
)

2158 
	`¥ötf
(
	`_
("Discard succeededánd willÑeturn 0s "

2160 
œzy_ôabÀ_öô
 = 1;

2161 
ôabÀ_zî€d
 = 1;

2165 
	`•rötf
(
tdb_°rög
, "tdb_d©a_size=%d", 
fs
->
blocksize
 <= 4096 ?

2166 32768 : 
fs
->
blocksize
 * 8);

2167 
	`io_ch™√l_£t_›ti⁄s
(
fs
->
io
, 
tdb_°rög
);

2169 i‡(
fs_∑øm
.
s_Êags
 & 
EXT2_FLAGS_TEST_FILESYS
)

2170 
fs
->
su≥r
->
s_Êags
 |
EXT2_FLAGS_TEST_FILESYS
;

2172 i‡((
fs_∑øm
.
s_„©uª_öcom∑t
 &

2173 (
EXT3_FEATURE_INCOMPAT_EXTENTS
|
EXT4_FEATURE_INCOMPAT_FLEX_BG
)) ||

2174 (
fs_∑øm
.
s_„©uª_ro_com∑t
 &

2175 (
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
|

2176 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|

2177 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
)))

2178 
fs
->
su≥r
->
s_kbyãs_wrôãn
 = 1;

2183 i‡(!
nﬂ˘i⁄
)

2184 
	`z≠_£˘‹
(
fs
, 2, 6);

2189 i‡(
fs_uuid
) {

2190 i‡(
	`uuid_∑r£
(
fs_uuid
, 
fs
->
su≥r
->
s_uuid
) !=0) {

2191 
	`com_îr
(
devi˚_«me
, 0, "couldÇotÖarse UUID: %s\n",

2192 
fs_uuid
);

2193 
	`exô
(1);

2196 
	`uuid_gíî©e
(
fs
->
su≥r
->
s_uuid
);

2201 
hash_Æg_°r
 = 
	`gë_°rög_‰om_¥ofûe
(
fs_ty≥s
, "hash_alg",

2203 
hash_Æg
 = 
	`e2p_°rög2hash
(
hash_Æg_°r
);

2204 
	`‰ì
(
hash_Æg_°r
);

2205 
fs
->
su≥r
->
s_def_hash_vîsi⁄
 = (
hash_Æg
 >= 0) ? hash_alg :

2206 
EXT2_HASH_HALF_MD4
;

2207 
	`uuid_gíî©e
((*Ë
fs
->
su≥r
->
s_hash_£ed
);

2214 
i
 = 0, 
vÆ
 = 0 ; i < (
fs
->
su≥r
->
s_uuid
); i++)

2215 
vÆ
 +
fs
->
su≥r
->
s_uuid
[
i
];

2216 
fs
->
su≥r
->
s_max_m¡_cou¡
 +
vÆ
 % 
EXT2_DFL_MAX_MNT_COUNT
;

2221 i‡(
¸ót‹_os
 && !
	`£t_os
(
fs
->
su≥r
, creator_os)) {

2222 
	`com_îr
 (
¥ogøm_«me
, 0, 
	`_
("unknow¿o†- %s"), 
¸ót‹_os
);

2223 
	`exô
(1);

2230 i‡(
fs
->
su≥r
->
s_¸ót‹_os
 =
EXT2_OS_HURD
)

2231 
fs
->
su≥r
->
s_„©uª_öcom∑t
 &=

2232 ~
EXT2_FEATURE_INCOMPAT_FILETYPE
;

2237 i‡(
vﬁume_œbñ
) {

2238 
	`mem£t
(
fs
->
su≥r
->
s_vﬁume_«me
, 0,

2239 (
fs
->
su≥r
->
s_vﬁume_«me
));

2240 
	`°∫˝y
(
fs
->
su≥r
->
s_vﬁume_«me
, 
vﬁume_œbñ
,

2241 (
fs
->
su≥r
->
s_vﬁume_«me
));

2247 i‡(
mou¡_dú
) {

2248 
	`mem£t
(
fs
->
su≥r
->
s_œ°_mou¡ed
, 0,

2249 (
fs
->
su≥r
->
s_œ°_mou¡ed
));

2250 
	`°∫˝y
(
fs
->
su≥r
->
s_œ°_mou¡ed
, 
mou¡_dú
,

2251 (
fs
->
su≥r
->
s_œ°_mou¡ed
));

2254 i‡(!
quõt
 || 
nﬂ˘i⁄
)

2255 
	`show_°©s
(
fs
);

2257 i‡(
nﬂ˘i⁄
)

2258 
	`exô
(0);

2260 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

2261 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
) {

2262 
	`¸óã_jou∫Æ_dev
(
fs
);

2263 
	`exô
(
	`ext2fs_˛o£
(
fs
) ? 1 : 0);

2266 i‡(
bad_blocks_fûíame
)

2267 
	`ªad_bb_fûe
(
fs
, &
bb_li°
, 
bad_blocks_fûíame
);

2268 i‡(
cÊag
)

2269 
	`ã°_disk
(
fs
, &
bb_li°
);

2271 
	`h™dÀ_bad_blocks
(
fs
, 
bb_li°
);

2272 
fs
->
°ride
 = 
fs_°ride
 = fs->
su≥r
->
s_øid_°ride
;

2273 
ªtvÆ
 = 
	`ext2fs_Æloˇã_èbÀs
(
fs
);

2274 i‡(
ªtvÆ
) {

2275 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

2276 
	`_
("whileÅryingÅoállocate filesystemÅables"));

2277 
	`exô
(1);

2279 i‡(
su≥r_⁄ly
) {

2280 
fs
->
su≥r
->
s_°©e
 |
EXT2_ERROR_FS
;

2281 
fs
->
Êags
 &~(
EXT2_FLAG_IB_DIRTY
|
EXT2_FLAG_BB_DIRTY
);

2284 
rsv
 = 65536 / 
fs
->
blocksize
;

2285 
blocks
 = 
fs
->
su≥r
->
s_blocks_cou¡
;

2286 
°¨t
;

2287 
blk_t
 
ªt_blk
;

2289 #ifde‡
ZAP_BOOTBLOCK


2290 
	`z≠_£˘‹
(
fs
, 0, 2);

2298 
°¨t
 = (
blocks
 & ~(
rsv
 - 1));

2299 i‡(
°¨t
 > 
rsv
)

2300 
°¨t
 -
rsv
;

2301 i‡(
°¨t
 > 0)

2302 
ªtvÆ
 = 
	`ext2fs_zîo_blocks
(
fs
, 
°¨t
, 
blocks
 - start,

2303 &
ªt_blk
, 
NULL
);

2305 i‡(
ªtvÆ
) {

2306 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

2307 
	`_
("while zeroing block %uátÉnd of filesystem"),

2308 
ªt_blk
);

2310 
	`wrôe_öode_èbÀs
(
fs
, 
œzy_ôabÀ_öô
, 
ôabÀ_zî€d
);

2311 
	`¸óã_roŸ_dú
(
fs
);

2312 
	`¸óã_lo°_™d_found
(
fs
);

2313 
	`ª£rve_öodes
(
fs
);

2314 
	`¸óã_bad_block_öode
(
fs
, 
bb_li°
);

2315 i‡(
fs
->
su≥r
->
s_„©uª_com∑t
 &

2316 
EXT2_FEATURE_COMPAT_RESIZE_INODE
) {

2317 
ªtvÆ
 = 
	`ext2fs_¸óã_ªsize_öode
(
fs
);

2318 i‡(
ªtvÆ
) {

2319 
	`com_îr
("ext2fs_¸óã_ªsize_öode", 
ªtvÆ
,

2320 
	`_
("whileÑeserving blocks for onlineÑesize"));

2321 
	`exô
(1);

2324 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


2325 i‡(
fs
->
su≥r
->
s_„©uª_com∑t
 &

2326 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
) {

2327 
ªtvÆ
 = 
	`ext2fs_¸óã_ex˛ude_öode
(
fs
, 
EXCLUDE_CREATE
);

2328 i‡(
ªtvÆ
) {

2329 
	`com_îr
("ext2fs_¸óã_ex˛ude_öode", 
ªtvÆ
,

2330 
	`_
("whileÑeserving blocks forÉxclude bitmap"));

2331 
	`exô
(1);

2337 i‡(
jou∫Æ_devi˚
) {

2338 
ext2_fûsys
 
jfs
;

2340 i‡(!
f‹˚
)

2341 
	`check_∂ausibûôy
(
jou∫Æ_devi˚
);

2342 
	`check_mou¡
(
jou∫Æ_devi˚
, 
f‹˚
, 
	`_
("journal"));

2344 
ªtvÆ
 = 
	`ext2fs_›í
(
jou∫Æ_devi˚
, 
EXT2_FLAG_RW
|

2345 
EXT2_FLAG_JOURNAL_DEV_OK
, 0,

2346 
fs
->
blocksize
, 
unix_io_m™agî
, &
jfs
);

2347 i‡(
ªtvÆ
) {

2348 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

2349 
	`_
("whileÅryingÅo open journal device %s\n"),

2350 
jou∫Æ_devi˚
);

2351 
	`exô
(1);

2353 i‡(!
quõt
) {

2354 
	`¥ötf
(
	`_
("Adding journalÅo device %s: "),

2355 
jou∫Æ_devi˚
);

2356 
	`fÊush
(
°dout
);

2358 
ªtvÆ
 = 
	`ext2fs_add_jou∫Æ_devi˚
(
fs
, 
jfs
);

2359 if(
ªtvÆ
) {

2360 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
,

2361 
	`_
("\n\twhileÅryingÅoádd journalÅo device %s"),

2362 
jou∫Æ_devi˚
);

2363 
	`exô
(1);

2365 i‡(!
quõt
)

2366 
	`¥ötf
(
	`_
("done\n"));

2367 
	`ext2fs_˛o£
(
jfs
);

2368 
	`‰ì
(
jou∫Æ_devi˚
);

2369 } i‡((
jou∫Æ_size
) ||

2370 (
fs_∑øm
.
s_„©uª_com∑t
 &

2371 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
)) {

2372 
jou∫Æ_blocks
 = 
	`figuª_jou∫Æ_size
(
jou∫Æ_size
, 
fs
);

2374 i‡(
su≥r_⁄ly
) {

2375 
	`¥ötf
(
	`_
("Skipping journal creation in super-only mode\n"));

2376 
fs
->
su≥r
->
s_jou∫Æ_öum
 = 
EXT2_JOURNAL_INO
;

2377 
no_jou∫Æ
;

2380 i‡(!
jou∫Æ_blocks
) {

2381 
fs
->
su≥r
->
s_„©uª_com∑t
 &=

2382 ~
EXT3_FEATURE_COMPAT_HAS_JOURNAL
;

2383 
no_jou∫Æ
;

2385 i‡(!
quõt
) {

2386 
	`¥ötf
(
	`_
("Creating journal (%u blocks): "),

2387 
jou∫Æ_blocks
);

2388 
	`fÊush
(
°dout
);

2390 
ªtvÆ
 = 
	`ext2fs_add_jou∫Æ_öode
(
fs
, 
jou∫Æ_blocks
,

2391 
jou∫Æ_Êags
);

2392 i‡(
ªtvÆ
) {

2393 
	`com_îr
 (
¥ogøm_«me
, 
ªtvÆ
,

2394 
	`_
("\n\twhileÅryingÅo create journal"));

2395 
	`exô
(1);

2397 i‡(!
quõt
)

2398 
	`¥ötf
(
	`_
("done\n"));

2400 
no_jou∫Æ
:

2402 i‡(!
quõt
)

2403 
	`¥ötf
(
	`_
("Writing superblocksánd "

2405 
ªtvÆ
 = 
	`ext2fs_Êush
(
fs
);

2406 i‡(
ªtvÆ
) {

2407 
	`Ârötf
(
°dîr
,

2408 
	`_
("\nWarning, hadÅrouble writing out superblocks."));

2410 i‡(!
quõt
) {

2411 
	`¥ötf
(
	`_
("done\n\n"));

2412 i‡(!
	`gëív
("MKE2FS_SKIP_CHECK_MSG"))

2413 
	`¥öt_check_mesßge
(
fs
);

2415 
vÆ
 = 
	`ext2fs_˛o£
(
fs
);

2416 
	`ªmove_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

2417 
	`ªmove_îr‹_èbÀ
(&
ë_¥of_îr‹_èbÀ
);

2418 
	`¥ofûe_ªÀa£
(
¥ofûe
);

2419 
i
=0; 
fs_ty≥s
[i]; i++)

2420 
	`‰ì
(
fs_ty≥s
[
i
]);

2421 
	`‰ì
(
fs_ty≥s
);

2422  (
ªtvÆ
 || 
vÆ
) ? 1 : 0;

2423 
	}
}

	@mklost+found.c

16 
	~<î∫o.h
>

17 
	~<f˙é.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<uni°d.h
>

21 
	~<°dlib.h
>

22 
	~<sys/∑øm.h
>

23 
	~<sys/°©.h
>

25 
	~"ext2fs/ext2_fs.h
"

26 
	~"../vîsi⁄.h
"

27 
	~"∆s-íabÀ.h
"

29 
	#LPF
 "lo°+found"

	)

31 
	$maö
 (
¨gc
, ** 
¨gv
)

33 
«me
 [
EXT2_NAME_LEN
];

34 
∑th
 [ (
LPF
) + 1 + 256];

35 
°©
 
°
;

36 
i
, 
j
;

37 
d
;

39 #ifde‡
ENABLE_NLS


40 
	`£éoˇÀ
(
LC_MESSAGES
, "");

41 
	`£éoˇÀ
(
LC_CTYPE
, "");

42 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

43 
	`ãxtdomaö
(
NLS_CAT_NAME
);

45 
	`Ârötf
 (
°dîr
, "mklo°+found %†(%s)\n", 
E2FSPROGS_VERSION
,

46 
E2FSPROGS_DATE
);

47 i‡(
¨gc
 != 1) {

48 ()
¨gv
;

49 
	`Ârötf
 (
°dîr
, 
	`_
("Usage: mklost+found\n"));

50 
	`exô
(1);

52 i‡(
	`mkdú
 (
LPF
, 0700) == -1) {

53 
	`≥º‹
 ("mkdir");

54 
	`exô
(1);

57 
i
 = 0;

58 
	`mem£t
 (
«me
, 'x', 246);

60 
	`•rötf
 (
«me
 + 246, "%08d", 
i
);

61 
	`°r˝y
 (
∑th
, 
LPF
);

62 
	`°rˇt
 (
∑th
, "/");

63 
	`°rˇt
 (
∑th
, 
«me
);

64 i‡((
d
 = 
	`¸ót
 (
∑th
, 0644)) == -1) {

65 
	`≥º‹
 ("creat");

66 
	`exô
 (1);

68 
i
++;

69 
	`˛o£
 (
d
);

70 i‡(
	`°©
 (
LPF
, &
°
) == -1) {

71 
	`≥º‹
 ("stat");

72 
	`exô
 (1);

74 } 
°
.
°_size
 <(
EXT2_NDIR_BLOCKS
 - 1Ë* st.
°_blksize
);

75 
j
 = 0; j < 
i
; j++) {

76 
	`•rötf
 (
«me
 + 246, "%08d", 
j
);

77 
	`°r˝y
 (
∑th
, 
LPF
);

78 
	`°rˇt
 (
∑th
, "/");

79 
	`°rˇt
 (
∑th
, 
«me
);

80 i‡(
	`u∆ök
 (
∑th
) == -1) {

81 
	`≥º‹
 ("unlink");

82 
	`exô
 (1);

85 
	`exô
 (0);

86 
	}
}

	@nls-enable.h

1 #ifde‡
ENABLE_NLS


2 
	~<liböé.h
>

3 
	~<loˇÀ.h
>

4 
	#_
(
a
Ë(
	`gëãxt
 (a))

	)

5 #ifde‡
gëãxt_no›


6 
	#N_
(
a
Ë
	`gëãxt_no›
 (a)

	)

8 
	#N_
(
a
Ë◊)

	)

10 #i‚de‡
NLS_CAT_NAME


11 
	#NLS_CAT_NAME
 "e2f•rogs"

	)

13 #i‚de‡
LOCALEDIR


14 
	#LOCALEDIR
 "/u§/sh¨e/loˇÀ"

	)

17 
	#_
(
a
Ë◊)

	)

18 
	#N_
(
a
Ë
	)
a

	@partinfo.c

10 
	~<sys/ty≥s.h
>

11 
	~<f˙é.h
>

12 #ifde‡
HAVE_SYS_IOCTL_H


13 
	~<sys/io˘l.h
>

15 
	~<°dio.h
>

16 
	~<löux/hdªg.h
>

17 
	~<uni°d.h
>

18 
	~<°dlib.h
>

19 
	~<î∫o.h
>

20 
	~"∆s-íabÀ.h
"

22 #i‡
deföed
(
__löux__
Ë&& deföed(
_IO
Ë&& !deföed(
BLKGETSIZE
)

23 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

26 
	$maö
(
¨gc
, **
¨gv
)

28 
hd_geomëry
 
loc
;

29 
fd
, 
i
;

30 
size
;

32 #ifde‡
ENABLE_NLS


33 
	`£éoˇÀ
(
LC_MESSAGES
, "");

34 
	`£éoˇÀ
(
LC_CTYPE
, "");

35 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

36 
	`ãxtdomaö
(
NLS_CAT_NAME
);

38 i‡(
¨gc
 == 1) {

39 
	`Ârötf
(
°dîr
, 
	`_
("Usage: %s device...\n\nPrints outÅhe "

41 "F‹Éxam∂e: %†/dev/hda\n\n"), 
¨gv
[0],árgv[0]);

42 
	`exô
(1);

45 
i
=1; i < 
¨gc
; i++) {

46 
fd
 = 
	`›í
(
¨gv
[
i
], 
O_RDONLY
);

48 i‡(
fd
 < 0) {

49 
	`Ârötf
(
°dîr
, 
	`_
("Cannot open %s: %s"),

50 
¨gv
[
i
], 
	`°ªº‹
(
î∫o
));

54 i‡(
	`io˘l
(
fd
, 
HDIO_GETGEO
, &
loc
) < 0) {

55 
	`Ârötf
(
°dîr
, 
	`_
("Cannot get geometry of %s: %s"),

56 
¨gv
[
i
], 
	`°ªº‹
(
î∫o
));

57 
	`˛o£
(
fd
);

62 i‡(
	`io˘l
(
fd
, 
BLKGETSIZE
, &
size
) < 0) {

63 
	`Ârötf
(
°dîr
, 
	`_
("Cannot get size of %s: %s"),

64 
¨gv
[
i
], 
	`°ªº‹
(
î∫o
));

65 
	`˛o£
(
fd
);

69 
	`¥ötf
(
	`_
("%s: h=%3d s=%3d c=%4d start=%8d size=%8luÉnd=%8d\n"),

70 
¨gv
[
i
],

71 
loc
.
hóds
, (Óoc.
£˘‹s
,Üoc.
cylödîs
,

72 ()
loc
.
°¨t
, 
size
, ()Üoc.start + size -1);

73 
	`˛o£
(
fd
);

75 
	`exô
(0);

76 
	}
}

	@tune2fs.c

28 
	#_XOPEN_SOURCE
 600

	)

29 
	#_BSD_SOURCE


	)

30 
	~<f˙é.h
>

31 
	~<gΩ.h
>

32 #ifde‡
HAVE_GETOPT_H


33 
	~<gë›t.h
>

35 *
›èrg
;

36 
›töd
;

38 
	~<pwd.h
>

39 
	~<°dio.h
>

40 #ifde‡
HAVE_STDLIB_H


41 
	~<°dlib.h
>

43 
	~<°rög.h
>

44 
	~<time.h
>

45 
	~<uni°d.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<libgí.h
>

48 
	~<limôs.h
>

50 
	~"ext2fs/ext2_fs.h
"

51 
	~"ext2fs/ext2fs.h
"

52 
	~"ë/com_îr.h
"

53 
	~"uuid/uuid.h
"

54 
	~"e2p/e2p.h
"

55 
	~"jfs_u£r.h
"

56 
	~"utû.h
"

57 
	~"blkid/blkid.h
"

59 
	~"../vîsi⁄.h
"

60 
	~"∆s-íabÀ.h
"

62 c⁄° *
	g¥ogøm_«me
 = "tune2fs";

63 *
	gdevi˚_«me
;

64 *
	g√w_œbñ
, *
	g√w_œ°_mou¡ed
, *
	g√w_UUID
;

65 *
	gio_›ti⁄s
;

66 
	gc_Êag
, 
	gC_Êag
, 
	ge_Êag
, 
	gf_Êag
, 
	gg_Êag
, 
	gi_Êag
, 
	gl_Êag
, 
	gL_Êag
;

67 
	gm_Êag
, 
	gM_Êag
, 
	gr_Êag
, 
	gs_Êag
 = -1, 
	gu_Êag
, 
	gU_Êag
, 
	gT_Êag
;

68 
	gI_Êag
;

69 
time_t
 
	gœ°_check_time
;

70 
	g¥öt_œbñ
;

71 
	gmax_mou¡_cou¡
, 
	gmou¡_cou¡
, 
	gmou¡_Êags
;

72 
	göãrvÆ
, 
	gª£rved_blocks
;

73 
	gª£rved_øtio
;

74 
	gªsgid
, 
	gªsuid
;

75 
	gîr‹s
;

76 
	g›í_Êag
;

77 *
	g„©uªs_cmd
;

78 *
	gm¡›ts_cmd
;

79 
	g°ride
, 
	g°rùe_width
;

80 
	g°ride_£t
, 
	g°rùe_width_£t
;

81 *
	gexãnded_cmd
;

82 
	g√w_öode_size
;

84 
	gjou∫Æ_size
, 
	gjou∫Æ_Êags
;

85 *
	gjou∫Æ_devi˚
;

87 
li°_hód
 
	gblk_move_li°
;

89 
	sblk_move
 {

90 
li°_hód
 
	mli°
;

91 
blk_t
 
	mﬁd_loc
;

92 
blk_t
 
	m√w_loc
;

96 c⁄° *
	g∂ó£_fsck
 = 
N_
("PleaseÑunÉ2fsck onÅhe filesystem.\n");

98 #ifde‡
CONFIG_BUILD_FINDFS


99 
do_födfs
(
¨gc
, **
¨gv
);

102 
	$ußge
()

104 
	`Ârötf
(
°dîr
,

105 
	`_
("Usage: %s [-c max_mounts_count] [-eÉrrors_behavior] "

114 "[-U UUID]\n\t[ -IÇew_öode_sizê] devi˚\n"), 
¥ogøm_«me
);

115 
	`exô
(1);

116 
	}
}

118 
__u32
 
	gok_„©uªs
[3] = {

120 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
 |

121 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


122 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
 |

124 
EXT2_FEATURE_COMPAT_DIR_INDEX
,

126 
EXT2_FEATURE_INCOMPAT_FILETYPE
 |

127 
EXT3_FEATURE_INCOMPAT_EXTENTS
 |

128 
EXT4_FEATURE_INCOMPAT_FLEX_BG
,

130 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
 |

131 #ifde‡
EXT2FS_SNAPSHOT_HAS_SNAPSHOT


132 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
|

134 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|

135 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|

136 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|

137 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
 |

138 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER


141 
__u32
 
	g˛ór_ok_„©uªs
[3] = {

143 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
 |

144 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


145 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
 |

147 
EXT2_FEATURE_COMPAT_RESIZE_INODE
 |

148 
EXT2_FEATURE_COMPAT_DIR_INDEX
,

150 
EXT2_FEATURE_INCOMPAT_FILETYPE
 |

151 
EXT4_FEATURE_INCOMPAT_FLEX_BG
,

153 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
 |

154 #ifde‡
EXT2FS_SNAPSHOT_HAS_SNAPSHOT


155 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
|

157 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|

158 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|

159 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|

160 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM


166 
	$ªmove_jou∫Æ_devi˚
(
ext2_fûsys
 
fs
)

168 *
jou∫Æ_∑th
;

169 
ext2_fûsys
 
jfs
;

170 
buf
[1024];

171 
jou∫Æ_su≥rblock_t
 *
jsb
;

172 
i
, 
ƒ_u£rs
;

173 
îrcode_t
 
ªtvÆ
;

174 
commô_ªmove_jou∫Æ
 = 0;

175 
io_m™agî
 
io_±r
;

177 i‡(
f_Êag
)

178 
commô_ªmove_jou∫Æ
 = 1;

180 
	`uuid_u≈¨£
(
fs
->
su≥r
->
s_jou∫Æ_uuid
, 
buf
);

181 
jou∫Æ_∑th
 = 
	`blkid_gë_dev«me
(
NULL
, "UUID", 
buf
);

183 i‡(!
jou∫Æ_∑th
) {

184 
jou∫Æ_∑th
 =

185 
	`ext2fs_föd_block_devi˚
(
fs
->
su≥r
->
s_jou∫Æ_dev
);

186 i‡(!
jou∫Æ_∑th
)

190 #ifde‡
CONFIG_TESTIO_DEBUG


191 i‡(
	`gëív
("TEST_IO_FLAGS") || getenv("TEST_IO_BLOCK")) {

192 
io_±r
 = 
ã°_io_m™agî
;

193 
ã°_io_backög_m™agî
 = 
unix_io_m™agî
;

196 
io_±r
 = 
unix_io_m™agî
;

197 
ªtvÆ
 = 
	`ext2fs_›í
(
jou∫Æ_∑th
, 
EXT2_FLAG_RW
|

198 
EXT2_FLAG_JOURNAL_DEV_OK
, 0,

199 
fs
->
blocksize
, 
io_±r
, &
jfs
);

200 i‡(
ªtvÆ
) {

201 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

202 
	`_
("whileÅryingÅo openÉxternal journal"));

203 
no_vÆid_jou∫Æ
;

205 i‡(!(
jfs
->
su≥r
->
s_„©uª_öcom∑t
 & 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
)) {

206 
	`Ârötf
(
°dîr
, 
	`_
("%s isÇotá journal device.\n"),

207 
jou∫Æ_∑th
);

208 
no_vÆid_jou∫Æ
;

212 i‡((
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
jfs
->
io
, 1, -1024, 
buf
))) {

213 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

214 
	`_
("whileÑeading journal superblock"));

215 
no_vÆid_jou∫Æ
;

218 
jsb
 = (
jou∫Æ_su≥rblock_t
 *Ë
buf
;

219 i‡((
jsb
->
s_hódî
.
h_magic
 !(Ë
	`¡ohl
(
JFS_MAGIC_NUMBER
)) ||

220 (
jsb
->
s_hódî
.
h_blockty≥
 !(Ë
	`¡ohl
(
JFS_SUPERBLOCK_V2
))) {

221 
	`Âuts
(
	`_
("Jou∫Æ su≥rblockÇŸ found!\n"), 
°dîr
);

222 
no_vÆid_jou∫Æ
;

226 
ƒ_u£rs
 = 
	`¡ohl
(
jsb
->
s_ƒ_u£rs
);

227 
i
 = 0; i < 
ƒ_u£rs
; i++) {

228 i‡(
	`memcmp
(
fs
->
su≥r
->
s_uuid
,

229 &
jsb
->
s_u£rs
[
i
*16], 16) == 0)

232 i‡(
i
 >
ƒ_u£rs
) {

233 
	`Âuts
(
	`_
("Filesystem's UUIDÇot found on journal device.\n"),

234 
°dîr
);

235 
commô_ªmove_jou∫Æ
 = 1;

236 
no_vÆid_jou∫Æ
;

238 
ƒ_u£rs
--;

239 
i
 = 0; i < 
ƒ_u£rs
; i++)

240 
	`mem˝y
(&
jsb
->
s_u£rs
[
i
*16], &jsb->s_users[(i+1)*16], 16);

241 
jsb
->
s_ƒ_u£rs
 = 
	`ht⁄l
(
ƒ_u£rs
);

244 i‡((
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
jfs
->
io
, 1, -1024, 
buf
))) {

245 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

247 
no_vÆid_jou∫Æ
;

250 
commô_ªmove_jou∫Æ
 = 1;

252 
no_vÆid_jou∫Æ
:

253 i‡(
commô_ªmove_jou∫Æ
 == 0) {

254 
	`Âuts
(
	`_
("Jou∫Æ NOTÑemoved\n"), 
°dîr
);

255 
	`exô
(1);

257 
fs
->
su≥r
->
s_jou∫Æ_dev
 = 0;

258 
	`uuid_˛ór
(
fs
->
su≥r
->
s_jou∫Æ_uuid
);

259 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

260 
	`Âuts
(
	`_
("Jou∫ÆÑemoved\n"), 
°dout
);

261 
	`‰ì
(
jou∫Æ_∑th
);

262 
	}
}

264 
	#blk64_t
 
blk_t


	)

265 
	#ext2fs_block_ôî©e3
 \

266 
ext2fs_block_ôî©e2


	)

267 
	#ext2fs_unm¨k_block_bôm≠2
 \

268 
ext2fs_unm¨k_block_bôm≠


	)

269 
	#ext2fs_group_of_blk2
 \

270 
ext2fs_group_of_blk


	)

271 
	#ext2fs_bg_‰ì_blocks_cou¡_£t
(
fs
, 
group
, 
cou¡
) \

272 
fs
->
group_desc
[
group
].
bg_‰ì_blocks_cou¡
 = (
cou¡
)

	)

273 
	#ext2fs_bg_‰ì_blocks_cou¡
(
fs
, 
group
) \

274 
fs
->
group_desc
[
group
].
bg_‰ì_blocks_cou¡


	)

275 
	#ext2fs_‰ì_blocks_cou¡_add
(
sb
, 
cou¡
) \

276 
sb
->
s_‰ì_blocks_cou¡
 +(
cou¡
)

	)

277 
	#ext2fs_group_desc
(
fs
, 
gdp
, 
gΩ
) \

278 (
gdp
)+(
gΩ
)

	)

281 
ªÀa£_blocks_¥oc
(
ext2_fûsys
 
fs
, 
blk64_t
 *
blockƒ
,

282 
e2_blk˙t_t
 
block˙t
 
EXT2FS_ATTR
((
unu£d
)),

283 
blk64_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

284 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

285 *
¥iv©e
 
EXT2FS_ATTR
((
unu£d
)))

287 
blk64_t
 
	gblock
;

288 
	ggroup
;

290 
	gblock
 = *
blockƒ
;

291 
ext2fs_unm¨k_block_bôm≠2
(
fs
->
block_m≠
, 
block
);

292 
	ggroup
 = 
ext2fs_group_of_blk2
(
fs
, 
block
);

293 
ext2fs_bg_‰ì_blocks_cou¡_£t
(
fs
, 
group
, 
ext2fs_bg_‰ì_blocks_cou¡
(fs, group) + 1);

294 
ext2fs_group_desc_csum_£t
(
fs
, 
group
);

295 
ext2fs_‰ì_blocks_cou¡_add
(
fs
->
su≥r
, 1);

299 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


306 
	$ªmove_•ecül_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

307 
ext2_öode
 *
öode
, 
∆ök
)

309 
ªtvÆ
 = 
	`ext2fs_ªad_bôm≠s
(
fs
);

310 i‡(
ªtvÆ
) {

311 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

312 
	`_
("whileÑeading bitmaps"));

313 
	`exô
(1);

315 
ªtvÆ
 = 
	`ext2fs_block_ôî©e3
(
fs
, 
öo
,

316 
BLOCK_FLAG_READ_ONLY
, 
NULL
,

317 
ªÀa£_blocks_¥oc
, 
NULL
);

318 i‡(
ªtvÆ
) {

319 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

320 
	`_
("while clearing inode"));

321 
	`exô
(1);

323 i‡(
∆ök
) {

325 
öode
->
i_size
 = 0;

326 
öode
->
i_size_high
 = 0;

327 
öode
->
i_blocks
 = 0;

328 
	`mem£t
(
öode
->
i_block
, 0, (inode->i_block));

331 
	`mem£t
(
öode
, 0, (*inode));

333 
	`ext2fs_m¨k_bb_dúty
(
fs
);

334 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

335 
	}
}

338 #ifde‡
EXT2FS_SNAPSHOT_CLEANUP


342 
	$disˇrd_¢≠shŸ_li°
(
ext2_fûsys
 
fs
)

344 
ext2_su≥r_block
 *
sb
 = 
fs
->
su≥r
;

345 
ext2_öode
 
öode
;

346 
ext2_öo_t
 
öo
 = 
sb
->
s_¢≠shŸ_li°
;

347 
îrcode_t
 
ªtvÆ
;

348 
i
 = 0;

350 i‡(!
öo
)

352 
öo
 = 
sb
->
s_¢≠shŸ_öum
;

353 i‡(
öo
)

354 
	`Âuts
(
	`_
("Disˇrdög s«pshŸs: "), 
°dîr
);

356 
öo
) {

357 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

358 i‡(
ªtvÆ
) {

359 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

360 
	`_
("whileÑeading snapshot inode %u"),

361 
öo
);

362 
	`exô
(1);

365 
	`ªmove_•ecül_öode
(
fs
, 
öo
, &
öode
, 1);

367 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
öo
, &
öode
);

368 i‡(
ªtvÆ
) {

369 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

370 
	`_
("while writing snapshot inode %u"),

371 
öo
);

372 
	`exô
(1);

375 
	`Ârötf
(
°dîr
, 
	`_
("%u,"), 
öode
.
i_gíî©i⁄
);

376 
öo
 = 
öode
.
i_√xt_¢≠shŸ
;

377 
i
++;

380 i‡(
i
 > 0) {

381 
sb
->
s_¢≠shŸ_öum
 = 0;

382 
sb
->
s_¢≠shŸ_id
 = 0;

383 
sb
->
s_¢≠shŸ_r_blocks_cou¡
 = 0;

384 
sb
->
s_¢≠shŸ_li°
 = 0;

385 
	`Âuts
(
	`_
("d⁄e\n"), 
°dîr
);

389 
sb
->
s_Êags
 &~
EXT2_FLAGS_FIX_SNAPSHOT
;

390 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

391 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

392 
	}
}

395 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


399 
	$ªmove_ex˛ude_öode
(
ext2_fûsys
 
fs
)

401 
ext2_öode
 
öode
;

402 
öo_t
 
öo
 = 
EXT2_EXCLUDE_INO
;

403 
îrcode_t
 
ªtvÆ
;

406 
fs
->
su≥r
->
s_Êags
 &~
EXT2_FLAGS_FIX_EXCLUDE
;

407 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

408 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

410 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

411 i‡(
ªtvÆ
) {

412 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

413 
	`_
("whileÑeadingÉxclude inode"));

414 
	`exô
(1);

417 
	`ªmove_•ecül_öode
(
fs
, 
öo
, &
öode
, 0);

419 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
öo
, &
öode
);

420 i‡(
ªtvÆ
) {

421 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

422 
	`_
("while writingÉxclude inode"));

423 
	`exô
(1);

425 
	}
}

431 
	$ªmove_jou∫Æ_öode
(
ext2_fûsys
 
fs
)

433 
ext2_öode
 
öode
;

434 
îrcode_t
 
ªtvÆ
;

435 
öo_t
 
öo
 = 
fs
->
su≥r
->
s_jou∫Æ_öum
;

437 
ªtvÆ
 = 
	`ext2fs_ªad_öode
(
fs
, 
öo
, &
öode
);

438 i‡(
ªtvÆ
) {

439 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

440 
	`_
("whileÑeading journal inode"));

441 
	`exô
(1);

443 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


444 i‡(
öo
 =
EXT2_JOURNAL_INO
)

445 
	`ªmove_•ecül_öode
(
fs
, 
öo
, &
öode
, 0);

448 i‡(
öo
 =
EXT2_JOURNAL_INO
) {

449 
ªtvÆ
 = 
	`ext2fs_ªad_bôm≠s
(
fs
);

450 i‡(
ªtvÆ
) {

451 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

452 
	`_
("whileÑeading bitmaps"));

453 
	`exô
(1);

455 
ªtvÆ
 = 
	`ext2fs_block_ôî©e3
(
fs
, 
öo
,

456 
BLOCK_FLAG_READ_ONLY
, 
NULL
,

457 
ªÀa£_blocks_¥oc
, 
NULL
);

458 i‡(
ªtvÆ
) {

459 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

460 
	`_
("while clearing journal inode"));

461 
	`exô
(1);

463 
	`mem£t
(&
öode
, 0, (inode));

464 
	`ext2fs_m¨k_bb_dúty
(
fs
);

465 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

468 
öode
.
i_Êags
 &~
EXT2_IMMUTABLE_FL
;

469 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
öo
, &
öode
);

470 i‡(
ªtvÆ
) {

471 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

472 
	`_
("while writing journal inode"));

473 
	`exô
(1);

475 
fs
->
su≥r
->
s_jou∫Æ_öum
 = 0;

476 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

477 
	}
}

482 
	$upd©e_m¡›ts
(
ext2_fûsys
 
fs
, *
m¡›ts
)

484 
ext2_su≥r_block
 *
sb
 = 
fs
->
su≥r
;

486 i‡(
	`e2p_edô_m¡›ts
(
m¡›ts
, &
sb
->
s_deÁu…_mou¡_›ts
, ~0)) {

487 
	`Ârötf
(
°dîr
, 
	`_
("Invalid mount option set: %s\n"),

488 
m¡›ts
);

489 
	`exô
(1);

491 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

492 
	}
}

494 
	$ªque°_fsck_a·îw¨ds
(
ext2_fûsys
 
fs
)

496 
ªque°ed
 = 0;

498 i‡(
ªque°ed
++)

500 
fs
->
su≥r
->
s_°©e
 &~
EXT2_VALID_FS
;

501 
	`¥ötf
("\n%s\n", 
	`_
(
∂ó£_fsck
));

502 i‡(
mou¡_Êags
 & 
EXT2_MF_READONLY
)

503 
	`¥ötf
(
	`_
("(andÑebootáfterwards!)\n"));

504 
	}
}

506 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


507 
	$vîify_˛ón_fs
(
ext2_fûsys
 
fs
, 
com∑t
, 
mask
,

508 
⁄
)

510 
ext2_su≥r_block
 *
sb

fs
->
su≥r
;

512 i‡((
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) &&

513 !(
mou¡_Êags
 & 
EXT2_MF_READONLY
)) {

514 
	`Ârötf
(
°dîr
, 
	`_
("The '%s' feature may only be "

517 
	`e2p_„©uª2°rög
(
com∑t
, 
mask
),

518 
⁄
 ? "set" : "cleared");

519 
	`exô
(1);

521 i‡(
sb
->
s_„©uª_öcom∑t
 &

522 
EXT3_FEATURE_INCOMPAT_RECOVER
) {

523 
	`Ârötf
(
°dîr
, 
	`_
("TheÇeeds_recovery flag is set. "

526 
⁄
 ? "setting" : "clearing",

527 
	`e2p_„©uª2°rög
(
com∑t
, 
mask
));

528 
	`exô
(1);

531 
	}
}

537 
	$upd©e_„©uª_£t
(
ext2_fûsys
 
fs
, *
„©uªs
)

539 
ext2_su≥r_block
 *
sb
 = 
fs
->
su≥r
;

540 
ext2_group_desc
 *
gd
;

541 
îrcode_t
 
ªtvÆ
;

542 
__u32
 
ﬁd_„©uªs
[3];

543 
i
, 
ty≥_îr
;

544 
mask_îr
;

546 
	#FEATURE_ON
(
ty≥
, 
mask
Ë(!(
ﬁd_„©uªs
[(type)] & (mask)) && \

547 ((&
sb
->
s_„©uª_com∑t
)[(
ty≥
)] & (
mask
)))

	)

548 
	#FEATURE_OFF
(
ty≥
, 
mask
Ë((
ﬁd_„©uªs
[(type)] & (mask)) && \

549 !((&
sb
->
s_„©uª_com∑t
)[(
ty≥
)] & (
mask
)))

	)

550 
	#FEATURE_CHANGED
(
ty≥
, 
mask
) ((mask) & \

551 (
ﬁd_„©uªs
[(
ty≥
)] ^ (&
sb
->
s_„©uª_com∑t
)[—y≥)]))

	)

552 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


553 
	#FEATURE_ON_SAFE
(
com∑t
, 
mask
) \

554 (
	`FEATURE_ON
(
com∑t
, 
mask
Ë&& 
	`vîify_˛ón_fs
(
fs
, com∑t, mask, 1))

	)

555 
	#FEATURE_OFF_SAFE
(
com∑t
, 
mask
) \

556 (
	`FEATURE_OFF
(
com∑t
, 
mask
Ë&& 
	`vîify_˛ón_fs
(
fs
, com∑t, mask, 0))

	)

559 
ﬁd_„©uªs
[
E2P_FEATURE_COMPAT
] = 
sb
->
s_„©uª_com∑t
;

560 
ﬁd_„©uªs
[
E2P_FEATURE_INCOMPAT
] = 
sb
->
s_„©uª_öcom∑t
;

561 
ﬁd_„©uªs
[
E2P_FEATURE_RO_INCOMPAT
] = 
sb
->
s_„©uª_ro_com∑t
;

563 #ifde‡
EXT2FS_SNAPSHOT_HAS_SNAPSHOT


565 i‡(
sb
->
s_„©uª_ro_com∑t
 &

566 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
) {

567 
ok_„©uªs
[
E2P_FEATURE_COMPAT
] = 0;

568 
ok_„©uªs
[
E2P_FEATURE_INCOMPAT
] = 0;

569 
ok_„©uªs
[
E2P_FEATURE_RO_INCOMPAT
] =

570 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
;

571 
˛ór_ok_„©uªs
[
E2P_FEATURE_COMPAT
] = 0;

572 
˛ór_ok_„©uªs
[
E2P_FEATURE_INCOMPAT
] = 0;

573 
˛ór_ok_„©uªs
[
E2P_FEATURE_RO_INCOMPAT
] =

574 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
;

578 i‡(
	`e2p_edô_„©uª2
(
„©uªs
, &
sb
->
s_„©uª_com∑t
,

579 
ok_„©uªs
, 
˛ór_ok_„©uªs
,

580 &
ty≥_îr
, &
mask_îr
)) {

581 i‡(!
mask_îr
)

582 
	`Ârötf
(
°dîr
,

583 
	`_
("Invalid filesystem option set: %s\n"),

584 
„©uªs
);

585 #ifde‡
EXT2FS_SNAPSHOT_HAS_SNAPSHOT


586 i‡(
ﬁd_„©uªs
[
E2P_FEATURE_RO_INCOMPAT
] &

587 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
)

588 
	`Âuts
(
	`_
("The filesystem has snapshots. "

591 
°dîr
);

593 i‡(
ty≥_îr
 & 
E2P_FEATURE_NEGATE_FLAG
)

594 
	`Ârötf
(
°dîr
, 
	`_
("Clearing filesystem feature '%s' "

596 
	`e2p_„©uª2°rög
(
ty≥_îr
 &

597 
E2P_FEATURE_TYPE_MASK
,

598 
mask_îr
));

600 
	`Ârötf
(
°dîr
, 
	`_
("Setting filesystem feature '%s' "

602 
	`e2p_„©uª2°rög
(
ty≥_îr
, 
mask_îr
));

603 
	`exô
(1);

606 i‡(
	`FEATURE_OFF
(
E2P_FEATURE_COMPAT
, 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
)) {

607 i‡((
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) &&

608 !(
mou¡_Êags
 & 
EXT2_MF_READONLY
)) {

609 
	`Âuts
(
	`_
("The has_journal feature may only be "

612 "ªad-⁄ly.\n"), 
°dîr
);

613 
	`exô
(1);

615 i‡(
sb
->
s_„©uª_öcom∑t
 &

616 
EXT3_FEATURE_INCOMPAT_RECOVER
) {

617 
	`Âuts
(
	`_
("TheÇeeds_recovery flag is set. "

619 "thêhas_jou∫Æ fœg.\n"), 
°dîr
);

620 
	`exô
(1);

622 i‡(
sb
->
s_jou∫Æ_öum
) {

623 
	`ªmove_jou∫Æ_öode
(
fs
);

625 i‡(
sb
->
s_jou∫Æ_dev
) {

626 
	`ªmove_jou∫Æ_devi˚
(
fs
);

630 i‡(
	`FEATURE_ON
(
E2P_FEATURE_COMPAT
, 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
)) {

636 i‡(!
jou∫Æ_size
)

637 
jou∫Æ_size
 = -1;

638 
sb
->
s_„©uª_com∑t
 &~
EXT3_FEATURE_COMPAT_HAS_JOURNAL
;

641 #ifde‡
EXT2FS_SNAPSHOT_EXCLUDE_INODE


642 i‡(
	`FEATURE_OFF_SAFE
(
E2P_FEATURE_COMPAT
, 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
)) {

643 
	`ªmove_ex˛ude_öode
(
fs
);

646 i‡(
	`FEATURE_ON_SAFE
(
E2P_FEATURE_COMPAT
, 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
)) {

647 
ªtvÆ
 = 
	`ext2fs_¸óã_ex˛ude_öode
(
fs
, 
EXCLUDE_CREATE
);

648 i‡(
ªtvÆ
) {

649 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

650 
	`_
("while creatingÉxclude inode"));

651 
	`exô
(1);

656 #ifde‡
EXT2FS_SNAPSHOT_CLEANUP


657 i‡(
	`FEATURE_OFF_SAFE
(
E2P_FEATURE_RO_INCOMPAT
,

658 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
)) {

659 
	`disˇrd_¢≠shŸ_li°
(
fs
);

660 i‡(
sb
->
s_„©uª_com∑t
 &

661 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
) {

663 
ªtvÆ
 = 
	`ext2fs_¸óã_ex˛ude_öode
(
fs
, 
EXCLUDE_RESET
);

664 i‡(
ªtvÆ
)

665 
sb
->
s_„©uª_com∑t
 &=

666 ~
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
;

671 #ifde‡
EXT2FS_SNAPSHOT_HAS_SNAPSHOT


672 i‡(
	`FEATURE_ON_SAFE
(
E2P_FEATURE_RO_INCOMPAT
,

673 
EXT4_FEATURE_RO_COMPAT_HAS_SNAPSHOT
)) {

674 
big_jou∫Æ
 = 0;

676 i‡((
sb
->
s_„©uª_com∑t
 &

677 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
)) {

679 
big_jou∫Æ
 = (
	`ext2fs_check_jou∫Æ_size
(
fs
) >=

680 
NEXT3_MIN_JOURNAL_BLOCKS
);

681 } i‡(!
jou∫Æ_size
 || journal_size == -1) {

683 
jou∫Æ_size
 = -
NEXT3_MAX_COW_CREDITS
;

684 
big_jou∫Æ
 = 1;

687 i‡(!
big_jou∫Æ
)

688 
	`Ârötf
(
°dîr
,

689 
	`_
("Warning: journal size isÇot bigÉnough.\n"

695 
ªtvÆ
 = 
	`ext2fs_¸óã_ex˛ude_öode
(
fs
, 
EXCLUDE_CREATE
);

696 i‡(!
ªtvÆ
)

697 
sb
->
s_„©uª_com∑t
 |=

698 
EXT2_FEATURE_COMPAT_EXCLUDE_INODE
;

700 
	`Ârötf
(
°dîr
,

701 
	`_
("Warning: failedÅo createÉxclude inode.\n"

708 i‡(
	`FEATURE_ON
(
E2P_FEATURE_COMPAT
, 
EXT2_FEATURE_COMPAT_DIR_INDEX
)) {

709 i‡(!
sb
->
s_def_hash_vîsi⁄
)

710 
sb
->
s_def_hash_vîsi⁄
 = 
EXT2_HASH_HALF_MD4
;

711 i‡(
	`uuid_is_nuŒ
((*Ë
sb
->
s_hash_£ed
))

712 
	`uuid_gíî©e
((*Ë
sb
->
s_hash_£ed
);

715 i‡(
	`FEATURE_OFF
(
E2P_FEATURE_INCOMPAT
, 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)) {

716 i‡(
	`ext2fs_check_desc
(
fs
)) {

717 
	`Âuts
(
	`_
("ClearingÅhe flex_bg flag would "

719 "öc⁄si°ít.\n"), 
°dîr
);

720 
	`exô
(1);

724 i‡(
	`FEATURE_OFF
(
E2P_FEATURE_RO_INCOMPAT
,

725 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
)) {

726 i‡((
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) &&

727 !(
mou¡_Êags
 & 
EXT2_MF_READONLY
)) {

728 
	`Âuts
(
	`_
("The huge_file feature may only be "

731 "ªad-⁄ly.\n"), 
°dîr
);

732 
	`exô
(1);

736 i‡(
	`FEATURE_ON
(
E2P_FEATURE_RO_INCOMPAT
,

737 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) {

738 
gd
 = 
fs
->
group_desc
;

739 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++, 
gd
++) {

740 
gd
->
bg_ôabÀ_unu£d
 = 0;

741 
gd
->
bg_Êags
 = 
EXT2_BG_INODE_ZEROED
;

742 
	`ext2fs_group_desc_csum_£t
(
fs
, 
i
);

744 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

747 i‡(
	`FEATURE_OFF
(
E2P_FEATURE_RO_INCOMPAT
,

748 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)) {

749 
gd
 = 
fs
->
group_desc
;

750 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++, 
gd
++) {

751 i‡((
gd
->
bg_Êags
 & 
EXT2_BG_INODE_ZEROED
) == 0) {

756 
	`ªque°_fsck_a·îw¨ds
(
fs
);

759 
gd
->
bg_ôabÀ_unu£d
 = 0;

760 
gd
->
bg_Êags
 = 0;

761 
gd
->
bg_checksum
 = 0;

763 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

766 i‡(
sb
->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
 &&

767 (
sb
->
s_„©uª_com∑t
 || sb->
s_„©uª_ro_com∑t
 ||

768 
sb
->
s_„©uª_öcom∑t
))

769 
	`ext2fs_upd©e_dy«mic_ªv
(
fs
);

771 i‡(
	`FEATURE_CHANGED
(
E2P_FEATURE_RO_INCOMPAT
,

772 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
) ||

773 
	`FEATURE_OFF
(
E2P_FEATURE_RO_INCOMPAT
,

774 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
) ||

775 
	`FEATURE_CHANGED
(
E2P_FEATURE_INCOMPAT
,

776 
EXT2_FEATURE_INCOMPAT_FILETYPE
) ||

777 
	`FEATURE_CHANGED
(
E2P_FEATURE_COMPAT
,

778 
EXT2_FEATURE_COMPAT_RESIZE_INODE
) ||

779 
	`FEATURE_OFF
(
E2P_FEATURE_RO_INCOMPAT
,

780 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
))

781 
	`ªque°_fsck_a·îw¨ds
(
fs
);

783 i‡((
ﬁd_„©uªs
[
E2P_FEATURE_COMPAT
] !
sb
->
s_„©uª_com∑t
) ||

784 (
ﬁd_„©uªs
[
E2P_FEATURE_INCOMPAT
] !
sb
->
s_„©uª_öcom∑t
) ||

785 (
ﬁd_„©uªs
[
E2P_FEATURE_RO_INCOMPAT
] !
sb
->
s_„©uª_ro_com∑t
))

786 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

787 
	}
}

792 
	$add_jou∫Æ
(
ext2_fûsys
 
fs
)

794 
jou∫Æ_blocks
;

795 
îrcode_t
 
ªtvÆ
;

796 
ext2_fûsys
 
jfs
;

797 
io_m™agî
 
io_±r
;

799 i‡(
fs
->
su≥r
->
s_„©uª_com∑t
 &

800 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
) {

801 
	`Âuts
(
	`_
("Thêfûesy°emáÃódy ha†®jou∫Æ.\n"), 
°dîr
);

802 
îr
;

804 i‡(
jou∫Æ_devi˚
) {

805 
	`check_∂ausibûôy
(
jou∫Æ_devi˚
);

806 
	`check_mou¡
(
jou∫Æ_devi˚
, 0, 
	`_
("journal"));

807 #ifde‡
CONFIG_TESTIO_DEBUG


808 i‡(
	`gëív
("TEST_IO_FLAGS") || getenv("TEST_IO_BLOCK")) {

809 
io_±r
 = 
ã°_io_m™agî
;

810 
ã°_io_backög_m™agî
 = 
unix_io_m™agî
;

813 
io_±r
 = 
unix_io_m™agî
;

814 
ªtvÆ
 = 
	`ext2fs_›í
(
jou∫Æ_devi˚
, 
EXT2_FLAG_RW
|

815 
EXT2_FLAG_JOURNAL_DEV_OK
, 0,

816 
fs
->
blocksize
, 
io_±r
, &
jfs
);

817 i‡(
ªtvÆ
) {

818 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

819 
	`_
("\n\twhileÅryingÅo open journal on %s\n"),

820 
jou∫Æ_devi˚
);

821 
îr
;

823 
	`¥ötf
(
	`_
("Creating journal on device %s: "),

824 
jou∫Æ_devi˚
);

825 
	`fÊush
(
°dout
);

827 
ªtvÆ
 = 
	`ext2fs_add_jou∫Æ_devi˚
(
fs
, 
jfs
);

828 
	`ext2fs_˛o£
(
jfs
);

829 i‡(
ªtvÆ
) {

830 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

831 
	`_
("whileádding filesystemÅo journal on %s"),

832 
jou∫Æ_devi˚
);

833 
îr
;

835 
	`Âuts
(
	`_
("d⁄e\n"), 
°dout
);

836 } i‡(
jou∫Æ_size
) {

837 
	`Âuts
(
	`_
("Cª©ög jou∫Æ inode: "), 
°dout
);

838 
	`fÊush
(
°dout
);

839 
jou∫Æ_blocks
 = 
	`figuª_jou∫Æ_size
(
jou∫Æ_size
, 
fs
);

841 
ªtvÆ
 = 
	`ext2fs_add_jou∫Æ_öode
(
fs
, 
jou∫Æ_blocks
,

842 
jou∫Æ_Êags
);

843 i‡(
ªtvÆ
) {

844 
	`Ârötf
(
°dîr
, "\n");

845 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

846 
	`_
("\n\twhileÅryingÅo create journal file"));

847 
	`exô
(1);

849 
	`Âuts
(
	`_
("d⁄e\n"), 
°dout
);

854 i‡((
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) == 0)

855 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

857 
	`¥öt_check_mesßge
(
fs
);

860 
îr
:

861 
	`‰ì
(
jou∫Æ_devi˚
);

862 
	`exô
(1);

863 
	}
}

866 
	$∑r£_e2œbñ_›ti⁄s
(
¨gc
, ** 
¨gv
)

868 i‡((
¨gc
 < 2) || (argc > 3)) {

869 
	`Âuts
(
	`_
("Ußge:É2œbñ devi˚ [√wœbñ]\n"), 
°dîr
);

870 
	`exô
(1);

872 
io_›ti⁄s
 = 
	`°rchr
(
¨gv
[1], '?');

873 i‡(
io_›ti⁄s
)

874 *
io_›ti⁄s
++ = 0;

875 
devi˚_«me
 = 
	`blkid_gë_dev«me
(
NULL
, 
¨gv
[1], NULL);

876 i‡(!
devi˚_«me
) {

877 
	`com_îr
("e2œbñ", 0, 
	`_
("UnableÅoÑesolve '%s'"),

878 
¨gv
[1]);

879 
	`exô
(1);

881 
›í_Êag
 = 
EXT2_FLAG_JOURNAL_DEV_OK
;

882 i‡(
¨gc
 == 3) {

883 
›í_Êag
 |
EXT2_FLAG_RW
;

884 
L_Êag
 = 1;

885 
√w_œbñ
 = 
¨gv
[2];

887 
¥öt_œbñ
++;

888 
	}
}

890 
time_t
 
	$∑r£_time
(*
°r
)

892 
tm
 
ts
;

894 i‡(
	`°rcmp
(
°r
, "now") == 0) {

895  (
	`time
(0));

897 
	`mem£t
(&
ts
, 0, (ts));

898 #ifde‡
HAVE_STRPTIME


899 
	`°Ωtime
(
°r
, "%Y%m%d%H%M%S", &
ts
);

901 
	`ssˇnf
(
°r
, "%4d%2d%2d%2d%2d%2d", &
ts
.
tm_yór
, &ts.
tm_m⁄
,

902 &
ts
.
tm_mday
, &ts.
tm_hour
, &ts.
tm_mö
, &ts.
tm_£c
);

903 
ts
.
tm_yór
 -= 1900;

904 
ts
.
tm_m⁄
 -= 1;

905 i‡(
ts
.
tm_yór
 < 0 ||Ås.
tm_m⁄
 < 0 ||Ås.tm_mon > 11 ||

906 
ts
.
tm_mday
 < 0 ||Ås.tm_mday > 31 ||Ås.
tm_hour
 > 23 ||

907 
ts
.
tm_mö
 > 59 ||Ås.
tm_£c
 > 61)

908 
ts
.
tm_mday
 = 0;

910 i‡(
ts
.
tm_mday
 == 0) {

911 
	`com_îr
(
¥ogøm_«me
, 0,

912 
	`_
("Couldn'tÖarse date/time specifier: %s"),

913 
°r
);

914 
	`ußge
();

916 
ts
.
tm_isd°
 = -1;

917  (
	`mktime
(&
ts
));

918 
	}
}

920 
	$∑r£_tu√2fs_›ti⁄s
(
¨gc
, **
¨gv
)

922 
c
;

923 *
tmp
;

924 
group
 *
gr
;

925 
∑sswd
 *
pw
;

927 
›í_Êag
 = 0;

929 
	`¥ötf
("tu√2f†%†(%s)\n", 
E2FSPROGS_VERSION
, 
E2FSPROGS_DATE
);

930 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:e:fg:i:jlm:o:r:s:u:C:E:I:J:L:M:O:T:U:")Ë!
EOF
)

931 
c
) {

933 
max_mou¡_cou¡
 = 
	`°πﬁ
(
›èrg
, &
tmp
, 0);

934 i‡(*
tmp
 || 
max_mou¡_cou¡
 > 16000) {

935 
	`com_îr
(
¥ogøm_«me
, 0,

936 
	`_
("bad mounts count - %s"),

937 
›èrg
);

938 
	`ußge
();

940 i‡(
max_mou¡_cou¡
 == 0)

941 
max_mou¡_cou¡
 = -1;

942 
c_Êag
 = 1;

943 
›í_Êag
 = 
EXT2_FLAG_RW
;

946 
mou¡_cou¡
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

947 i‡(*
tmp
 || 
mou¡_cou¡
 > 16000) {

948 
	`com_îr
(
¥ogøm_«me
, 0,

949 
	`_
("bad mounts count - %s"),

950 
›èrg
);

951 
	`ußge
();

953 
C_Êag
 = 1;

954 
›í_Êag
 = 
EXT2_FLAG_RW
;

957 i‡(
	`°rcmp
(
›èrg
, "continue") == 0)

958 
îr‹s
 = 
EXT2_ERRORS_CONTINUE
;

959 i‡(
	`°rcmp
(
›èrg
, "remount-ro") == 0)

960 
îr‹s
 = 
EXT2_ERRORS_RO
;

961 i‡(
	`°rcmp
(
›èrg
, "panic") == 0)

962 
îr‹s
 = 
EXT2_ERRORS_PANIC
;

964 
	`com_îr
(
¥ogøm_«me
, 0,

965 
	`_
("badÉrror behavior - %s"),

966 
›èrg
);

967 
	`ußge
();

969 
e_Êag
 = 1;

970 
›í_Êag
 = 
EXT2_FLAG_RW
;

973 
exãnded_cmd
 = 
›èrg
;

974 
›í_Êag
 |
EXT2_FLAG_RW
;

977 
f_Êag
 = 1;

980 
ªsgid
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

981 i‡(*
tmp
) {

982 
gr
 = 
	`gëg∫am
(
›èrg
);

983 i‡(
gr
 =
NULL
)

984 
tmp
 = 
›èrg
;

986 
ªsgid
 = 
gr
->
gr_gid
;

987 *
tmp
 = 0;

990 i‡(*
tmp
) {

991 
	`com_îr
(
¥ogøm_«me
, 0,

992 
	`_
("bad gid/groupÇame - %s"),

993 
›èrg
);

994 
	`ußge
();

996 
g_Êag
 = 1;

997 
›í_Êag
 = 
EXT2_FLAG_RW
;

1000 
öãrvÆ
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1001 *
tmp
) {

1003 
tmp
++;

1008 
öãrvÆ
 *= 86400;

1009 i‡(*
tmp
 != '\0')

1010 
tmp
++;

1014 
öãrvÆ
 *= 86400 * 30;

1015 
tmp
++;

1019 
öãrvÆ
 *= 86400 * 7;

1020 
tmp
++;

1023 i‡(*
tmp
) {

1024 
	`com_îr
(
¥ogøm_«me
, 0,

1025 
	`_
("bad i¡îvÆ - %s"), 
›èrg
);

1026 
	`ußge
();

1028 
i_Êag
 = 1;

1029 
›í_Êag
 = 
EXT2_FLAG_RW
;

1032 i‡(!
jou∫Æ_size
)

1033 
jou∫Æ_size
 = -1;

1034 
›í_Êag
 = 
EXT2_FLAG_RW
;

1037 
	`∑r£_jou∫Æ_›ts
(
›èrg
);

1038 
›í_Êag
 = 
EXT2_FLAG_RW
;

1041 
l_Êag
 = 1;

1044 
√w_œbñ
 = 
›èrg
;

1045 
L_Êag
 = 1;

1046 
›í_Êag
 |
EXT2_FLAG_RW
 |

1047 
EXT2_FLAG_JOURNAL_DEV_OK
;

1050 
ª£rved_øtio
 = 
	`°πod
(
›èrg
, &
tmp
);

1051 i‡(*
tmp
 || 
ª£rved_øtio
 > 50 ||

1052 
ª£rved_øtio
 < 0) {

1053 
	`com_îr
(
¥ogøm_«me
, 0,

1054 
	`_
("badÑeserved blockÑatio - %s"),

1055 
›èrg
);

1056 
	`ußge
();

1058 
m_Êag
 = 1;

1059 
›í_Êag
 = 
EXT2_FLAG_RW
;

1062 
√w_œ°_mou¡ed
 = 
›èrg
;

1063 
M_Êag
 = 1;

1064 
›í_Êag
 = 
EXT2_FLAG_RW
;

1067 i‡(
m¡›ts_cmd
) {

1068 
	`com_îr
(
¥ogøm_«me
, 0,

1069 
	`_
("-o may only be specified once"));

1070 
	`ußge
();

1072 
m¡›ts_cmd
 = 
›èrg
;

1073 
›í_Êag
 = 
EXT2_FLAG_RW
;

1077 i‡(
„©uªs_cmd
) {

1078 
	`com_îr
(
¥ogøm_«me
, 0,

1079 
	`_
("-O may only be specified once"));

1080 
	`ußge
();

1082 
„©uªs_cmd
 = 
›èrg
;

1083 
›í_Êag
 = 
EXT2_FLAG_RW
;

1086 
ª£rved_blocks
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1087 i‡(*
tmp
) {

1088 
	`com_îr
(
¥ogøm_«me
, 0,

1089 
	`_
("badÑeserved blocks count - %s"),

1090 
›èrg
);

1091 
	`ußge
();

1093 
r_Êag
 = 1;

1094 
›í_Êag
 = 
EXT2_FLAG_RW
;

1097 
s_Êag
 = 
	`©oi
(
›èrg
);

1098 
›í_Êag
 = 
EXT2_FLAG_RW
;

1101 
T_Êag
 = 1;

1102 
œ°_check_time
 = 
	`∑r£_time
(
›èrg
);

1103 
›í_Êag
 = 
EXT2_FLAG_RW
;

1106 
ªsuid
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1107 i‡(*
tmp
) {

1108 
pw
 = 
	`gëpw«m
(
›èrg
);

1109 i‡(
pw
 =
NULL
)

1110 
tmp
 = 
›èrg
;

1112 
ªsuid
 = 
pw
->
pw_uid
;

1113 *
tmp
 = 0;

1116 i‡(*
tmp
) {

1117 
	`com_îr
(
¥ogøm_«me
, 0,

1118 
	`_
("bad uid/userÇame - %s"),

1119 
›èrg
);

1120 
	`ußge
();

1122 
u_Êag
 = 1;

1123 
›í_Êag
 = 
EXT2_FLAG_RW
;

1126 
√w_UUID
 = 
›èrg
;

1127 
U_Êag
 = 1;

1128 
›í_Êag
 = 
EXT2_FLAG_RW
 |

1129 
EXT2_FLAG_JOURNAL_DEV_OK
;

1132 
√w_öode_size
 = 
	`°πoul
(
›èrg
, &
tmp
, 0);

1133 i‡(*
tmp
) {

1134 
	`com_îr
(
¥ogøm_«me
, 0,

1135 
	`_
("bad inode size - %s"),

1136 
›èrg
);

1137 
	`ußge
();

1139 i‡(!((
√w_öode_size
 &

1140 (
√w_öode_size
 - 1)) == 0)) {

1141 
	`com_îr
(
¥ogøm_«me
, 0,

1142 
	`_
("Inode size must beá "

1144 
›èrg
);

1145 
	`ußge
();

1147 
›í_Êag
 = 
EXT2_FLAG_RW
;

1148 
I_Êag
 = 1;

1151 
	`ußge
();

1153 i‡(
›töd
 < 
¨gc
 - 1 || optind ==árgc)

1154 
	`ußge
();

1155 i‡(!
›í_Êag
 && !
l_Êag
)

1156 
	`ußge
();

1157 
io_›ti⁄s
 = 
	`°rchr
(
¨gv
[
›töd
], '?');

1158 i‡(
io_›ti⁄s
)

1159 *
io_›ti⁄s
++ = 0;

1160 
devi˚_«me
 = 
	`blkid_gë_dev«me
(
NULL
, 
¨gv
[
›töd
], NULL);

1161 i‡(!
devi˚_«me
) {

1162 
	`com_îr
("tu√2fs", 0, 
	`_
("UnableÅoÑesolve '%s'"),

1163 
¨gv
[
›töd
]);

1164 
	`exô
(1);

1166 
	}
}

1168 #ifde‡
CONFIG_BUILD_FINDFS


1169 
	$do_födfs
(
¨gc
, **
¨gv
)

1171 *
dev
;

1173 i‡((
¨gc
 != 2) ||

1174 (
	`°∫cmp
(
¨gv
[1], "LABEL=", 6) && strncmp(argv[1], "UUID=", 5))) {

1175 
	`Ârötf
(
°dîr
, "Usage: findfs LABEL=<label>|UUID=<uuid>\n");

1176 
	`exô
(2);

1178 
dev
 = 
	`blkid_gë_dev«me
(
NULL
, 
¨gv
[1], NULL);

1179 i‡(!
dev
) {

1180 
	`com_îr
("födfs", 0, 
	`_
("UnableÅoÑesolve '%s'"),

1181 
¨gv
[1]);

1182 
	`exô
(1);

1184 
	`puts
(
dev
);

1185 
	`exô
(0);

1186 
	}
}

1189 
	$∑r£_exãnded_›ts
(
ext2_fûsys
 
fs
, c⁄° *
›ts
)

1191 *
buf
, *
tokí
, *
√xt
, *
p
, *
¨g
;

1192 
Àn
, 
hash_Æg
;

1193 
r_ußge
 = 0;

1195 
Àn
 = 
	`°æí
(
›ts
);

1196 
buf
 = 
	`mÆloc
(
Àn
+1);

1197 i‡(!
buf
) {

1198 
	`Ârötf
(
°dîr
,

1199 
	`_
("Couldn'tállocate memoryÅoÖarse options!\n"));

1200 
	`exô
(1);

1202 
	`°r˝y
(
buf
, 
›ts
);

1203 
tokí
 = 
buf
;Åokí && *tokí;Åokí = 
√xt
) {

1204 
p
 = 
	`°rchr
(
tokí
, ',');

1205 
√xt
 = 0;

1206 i‡(
p
) {

1207 *
p
 = 0;

1208 
√xt
 = 
p
+1;

1210 
¨g
 = 
	`°rchr
(
tokí
, '=');

1211 i‡(
¨g
) {

1212 *
¨g
 = 0;

1213 
¨g
++;

1215 i‡(!
	`°rcmp
(
tokí
, "test_fs")) {

1216 
fs
->
su≥r
->
s_Êags
 |
EXT2_FLAGS_TEST_FILESYS
;

1217 
	`¥ötf
("SettingÅest filesystem flag\n");

1218 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1219 } i‡(!
	`°rcmp
(
tokí
, "^test_fs")) {

1220 
fs
->
su≥r
->
s_Êags
 &~
EXT2_FLAGS_TEST_FILESYS
;

1221 
	`¥ötf
("ClearingÅest filesystem flag\n");

1222 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1223 } i‡(
	`°rcmp
(
tokí
, "stride") == 0) {

1224 i‡(!
¨g
) {

1225 
r_ußge
++;

1228 
°ride
 = 
	`°πoul
(
¨g
, &
p
, 0);

1229 i‡(*
p
 || (
°ride
 == 0)) {

1230 
	`Ârötf
(
°dîr
,

1231 
	`_
("Invalid RAID stride: %s\n"),

1232 
¨g
);

1233 
r_ußge
++;

1236 
°ride_£t
 = 1;

1237 } i‡(
	`°rcmp
(
tokí
, "stripe-width") == 0 ||

1238 
	`°rcmp
(
tokí
, "stripe_width") == 0) {

1239 i‡(!
¨g
) {

1240 
r_ußge
++;

1243 
°rùe_width
 = 
	`°πoul
(
¨g
, &
p
, 0);

1244 i‡(*
p
 || (
°rùe_width
 == 0)) {

1245 
	`Ârötf
(
°dîr
,

1246 
	`_
("Invalid RAID stripe-width: %s\n"),

1247 
¨g
);

1248 
r_ußge
++;

1251 
°rùe_width_£t
 = 1;

1252 } i‡(
	`°rcmp
(
tokí
, "hash_alg") == 0 ||

1253 
	`°rcmp
(
tokí
, "hash-alg") == 0) {

1254 i‡(!
¨g
) {

1255 
r_ußge
++;

1258 
hash_Æg
 = 
	`e2p_°rög2hash
(
¨g
);

1259 i‡(
hash_Æg
 < 0) {

1260 
	`Ârötf
(
°dîr
,

1261 
	`_
("Invalid hashálgorithm: %s\n"),

1262 
¨g
);

1263 
r_ußge
++;

1266 
fs
->
su≥r
->
s_def_hash_vîsi⁄
 = 
hash_Æg
;

1267 
	`¥ötf
(
	`_
("Setting default hashálgorithm "

1269 
¨g
, 
hash_Æg
);

1270 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1271 } i‡(
	`°rcmp
(
tokí
, "mount-options")) {

1272 i‡(!
¨g
) {

1273 
r_ußge
++;

1276 i‡(
	`°æí
(
¨g
Ë>(
fs
->
su≥r
->
s_mou¡_›ts
)) {

1277 
	`Ârötf
(
°dîr
,

1281 
	`°r˝y
(
fs
->
su≥r
->
s_mou¡_›ts
, 
¨g
);

1282 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1284 
r_ußge
++;

1286 i‡(
r_ußge
) {

1287 
	`Ârötf
(
°dîr
, 
	`_
("\nBad options specified.\n\n"

1297 
	`‰ì
(
buf
);

1298 
	`exô
(1);

1300 
	`‰ì
(
buf
);

1301 
	}
}

1307 
	$gë_move_bôm≠s
(
ext2_fûsys
 
fs
, 
√w_öo_blks_≥r_gΩ
,

1308 
ext2fs_block_bôm≠
 
bm≠
)

1310 
dgΩ_t
 
i
;

1311 
ªtvÆ
;

1312 
ext2_badblocks_li°
 
bb_li°
 = 0;

1313 
blk_t
 
j
, 
√eded_blocks
 = 0;

1314 
blk_t
 
°¨t_blk
, 
íd_blk
;

1316 
ªtvÆ
 = 
	`ext2fs_ªad_bb_öode
(
fs
, &
bb_li°
);

1317 i‡(
ªtvÆ
)

1318  
ªtvÆ
;

1320 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

1321 
°¨t_blk
 = 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
 +

1322 
fs
->
öode_blocks_≥r_group
;

1324 
íd_blk
 = 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
 +

1325 
√w_öo_blks_≥r_gΩ
;

1327 
j
 = 
°¨t_blk
; j < 
íd_blk
; j++) {

1328 i‡(
	`ext2fs_ã°_block_bôm≠
(
fs
->
block_m≠
, 
j
)) {

1332 i‡(
	`ext2fs_badblocks_li°_ã°
(
bb_li°
, 
j
)) {

1333 
	`ext2fs_badblocks_li°_‰ì
(
bb_li°
);

1334  
ENOSPC
;

1337 
	`ext2fs_m¨k_block_bôm≠
(
bm≠
, 
j
);

1343 
	`ext2fs_m¨k_block_bôm≠
(
fs
->
block_m≠
, 
j
);

1346 
√eded_blocks
 +
íd_blk
 - 
°¨t_blk
;

1349 
	`ext2fs_badblocks_li°_‰ì
(
bb_li°
);

1350 i‡(
√eded_blocks
 > 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
)

1351  
ENOSPC
;

1354 
	}
}

1356 
	$ext2fs_is_mëa_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
)

1358 
dgΩ_t
 
group
;

1359 
group
 = 
	`ext2fs_group_of_blk
(
fs
, 
blk
);

1360 i‡(
fs
->
group_desc
[
group
].
bg_block_bôm≠
 =
blk
)

1362 i‡(
fs
->
group_desc
[
group
].
bg_öode_bôm≠
 =
blk
)

1365 
	}
}

1367 
	$ext2fs_is_block_ö_group
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
, 
blk_t
 
blk
)

1369 
blk_t
 
°¨t_blk
, 
íd_blk
;

1370 
°¨t_blk
 = 
fs
->
su≥r
->
s_fú°_d©a_block
 +

1371 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
Ë* 
group
;

1376 
íd_blk
 = 
°¨t_blk
 + 
	`EXT2_BLOCKS_PER_GROUP
(
fs
->
su≥r
);

1377 i‡(
blk
 >
°¨t_blk
 && blk <
íd_blk
)

1380 
	}
}

1382 
	$move_block
(
ext2_fûsys
 
fs
, 
ext2fs_block_bôm≠
 
bm≠
)

1385 *
buf
;

1386 
dgΩ_t
 
group
;

1387 
îrcode_t
 
ªtvÆ
;

1388 
mëa_d©a
 = 0;

1389 
blk_t
 
blk
, 
√w_blk
, 
gﬂl
;

1390 
blk_move
 *
bmv
;

1392 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
, &
buf
);

1393 i‡(
ªtvÆ
)

1394  
ªtvÆ
;

1396 
√w_blk
 = 
blk
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

1397 
blk
 < 
fs
->
su≥r
->
s_blocks_cou¡
; blk++) {

1398 i‡(!
	`ext2fs_ã°_block_bôm≠
(
bm≠
, 
blk
))

1401 i‡(
	`ext2fs_is_mëa_block
(
fs
, 
blk
)) {

1409 
group
 = 
	`ext2fs_group_of_blk
(
fs
, 
blk
);

1410 
gﬂl
 = 
	`ext2fs_group_fú°_block
(
fs
, 
group
);

1411 
mëa_d©a
 = 1;

1414 
gﬂl
 = 
√w_blk
;

1416 
ªtvÆ
 = 
	`ext2fs_√w_block
(
fs
, 
gﬂl
, 
NULL
, &
√w_blk
);

1417 i‡(
ªtvÆ
)

1418 
îr_out
;

1421 i‡(
mëa_d©a
 && !
	`ext2fs_is_block_ö_group
(
fs
, 
group
, 
√w_blk
)) {

1422 
ªtvÆ
 = 
ENOSPC
;

1423 
îr_out
;

1427 
	`ext2fs_m¨k_block_bôm≠
(
fs
->
block_m≠
, 
√w_blk
);

1430 
ªtvÆ
 = 
	`ext2fs_gë_mem
((
blk_move
), &
bmv
);

1431 i‡(
ªtvÆ
)

1432 
îr_out
;

1434 
bmv
->
ﬁd_loc
 = 
blk
;

1435 
bmv
->
√w_loc
 = 
√w_blk
;

1437 
	`li°_add
(&(
bmv
->
li°
), &
blk_move_li°
);

1439 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
, 1, 
buf
);

1440 i‡(
ªtvÆ
)

1441 
îr_out
;

1443 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
√w_blk
, 1, 
buf
);

1444 i‡(
ªtvÆ
)

1445 
îr_out
;

1448 
îr_out
:

1449 
	`ext2fs_‰ì_mem
(&
buf
);

1450  
ªtvÆ
;

1451 
	}
}

1453 
blk_t
 
	$å™¶©e_block
(
blk_t
 
blk
)

1455 
li°_hód
 *
íåy
;

1456 
blk_move
 *
bmv
;

1458 
	`li°_f‹_óch
(
íåy
, &
blk_move_li°
) {

1459 
bmv
 = 
	`li°_íåy
(
íåy
, 
blk_move
, 
li°
);

1460 i‡(
bmv
->
ﬁd_loc
 =
blk
)

1461  
bmv
->
√w_loc
;

1465 
	}
}

1467 
¥o˚ss_block
(
ext2_fûsys
 
fs
 
EXT2FS_ATTR
((
unu£d
)),

1468 
blk_t
 *
block_ƒ
,

1469 
e2_blk˙t_t
 
block˙t
 
EXT2FS_ATTR
((
unu£d
)),

1470 
blk_t
 
ªf_block
 
EXT2FS_ATTR
((
unu£d
)),

1471 
ªf_off£t
 
EXT2FS_ATTR
((
unu£d
)),

1472 *
¥iv_d©a
)

1474 
	gªt
 = 0;

1475 
blk_t
 
	g√w_blk
;

1476 
ext2fs_block_bôm≠
 
	gbm≠
 = (ext2fs_block_bôm≠Ë
¥iv_d©a
;

1478 i‡(!
ext2fs_ã°_block_bôm≠
(
bm≠
, *
block_ƒ
))

1480 
	g√w_blk
 = 
å™¶©e_block
(*
block_ƒ
);

1481 i‡(
	g√w_blk
) {

1482 *
	gblock_ƒ
 = 
√w_blk
;

1486 
	gªt
 |
BLOCK_CHANGED
;

1489  
	gªt
;

1492 
	$öode_sˇn_™d_fix
(
ext2_fûsys
 
fs
, 
ext2fs_block_bôm≠
 
bm≠
)

1494 
îrcode_t
 
ªtvÆ
 = 0;

1495 
ext2_öo_t
 
öo
;

1496 
blk_t
 
blk
;

1497 *
block_buf
 = 0;

1498 
ext2_öode
 
öode
;

1499 
ext2_öode_sˇn
 
sˇn
 = 
NULL
;

1501 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
fs
->
blocksize
 * 3, &
block_buf
);

1502 i‡(
ªtvÆ
)

1503  
ªtvÆ
;

1505 
ªtvÆ
 = 
	`ext2fs_›í_öode_sˇn
(
fs
, 0, &
sˇn
);

1506 i‡(
ªtvÆ
)

1507 
îr_out
;

1510 
ªtvÆ
 = 
	`ext2fs_gë_√xt_öode
(
sˇn
, &
öo
, &
öode
);

1511 i‡(
ªtvÆ
)

1512 
îr_out
;

1514 i‡(!
öo
)

1517 i‡(
öode
.
i_löks_cou¡
 == 0)

1527 i‡(
öode
.
i_fûe_a˛
 &&

1528 
	`ext2fs_ã°_block_bôm≠
(
bm≠
, 
öode
.
i_fûe_a˛
)) {

1529 
blk
 = 
	`å™¶©e_block
(
öode
.
i_fûe_a˛
);

1530 i‡(!
blk
)

1533 
öode
.
i_fûe_a˛
 = 
blk
;

1539 
ªtvÆ
 = 
	`ext2fs_wrôe_öode
(
fs
, 
öo
, &
öode
);

1540 i‡(
ªtvÆ
)

1541 
îr_out
;

1544 i‡(!
	`ext2fs_öode_has_vÆid_blocks
(&
öode
))

1547 
ªtvÆ
 = 
	`ext2fs_block_ôî©e2
(
fs
, 
öo
, 0, 
block_buf
,

1548 
¥o˚ss_block
, 
bm≠
);

1549 i‡(
ªtvÆ
)

1550 
îr_out
;

1554 
îr_out
:

1555 
	`ext2fs_‰ì_mem
(&
block_buf
);

1557  
ªtvÆ
;

1558 
	}
}

1565 
	$group_desc_sˇn_™d_fix
(
ext2_fûsys
 
fs
, 
ext2fs_block_bôm≠
 
bm≠
)

1567 
dgΩ_t
 
i
;

1568 
blk_t
 
blk
, 
√w_blk
;

1570 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

1571 
blk
 = 
fs
->
group_desc
[
i
].
bg_block_bôm≠
;

1572 i‡(
	`ext2fs_ã°_block_bôm≠
(
bm≠
, 
blk
)) {

1573 
√w_blk
 = 
	`å™¶©e_block
(
blk
);

1574 i‡(!
√w_blk
)

1576 
fs
->
group_desc
[
i
].
bg_block_bôm≠
 = 
√w_blk
;

1579 
blk
 = 
fs
->
group_desc
[
i
].
bg_öode_bôm≠
;

1580 i‡(
	`ext2fs_ã°_block_bôm≠
(
bm≠
, 
blk
)) {

1581 
√w_blk
 = 
	`å™¶©e_block
(
blk
);

1582 i‡(!
√w_blk
)

1584 
fs
->
group_desc
[
i
].
bg_öode_bôm≠
 = 
√w_blk
;

1588 
	}
}

1590 
	$ex∑nd_öode_èbÀ
(
ext2_fûsys
 
fs
, 
√w_öo_size
)

1592 
dgΩ_t
 
i
;

1593 
blk_t
 
blk
;

1594 
îrcode_t
 
ªtvÆ
;

1595 
√w_öo_blks_≥r_gΩ
;

1596 
j
;

1597 *
ﬁd_ôabÀ
 = 
NULL
, *
√w_ôabÀ
 = NULL;

1598 *
tmp_ﬁd_ôabÀ
 = 
NULL
, *
tmp_√w_ôabÀ
 = NULL;

1599 
ﬁd_öo_size
;

1600 
ﬁd_ôabÀ_size
, 
√w_ôabÀ_size
;

1602 
ﬁd_ôabÀ_size
 = 
fs
->
öode_blocks_≥r_group
 * fs->
blocksize
;

1603 
ﬁd_öo_size
 = 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
);

1605 
√w_öo_blks_≥r_gΩ
 = 
	`ext2fs_div_˚û
(

1606 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
) *

1607 
√w_öo_size
,

1608 
fs
->
blocksize
);

1610 
√w_ôabÀ_size
 = 
√w_öo_blks_≥r_gΩ
 * 
fs
->
blocksize
;

1612 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
ﬁd_ôabÀ_size
, &
ﬁd_ôabÀ
);

1613 i‡(
ªtvÆ
)

1614  
ªtvÆ
;

1616 
ªtvÆ
 = 
	`ext2fs_gë_mem
(
√w_ôabÀ_size
, &
√w_ôabÀ
);

1617 i‡(
ªtvÆ
)

1618 
îr_out
;

1620 
tmp_ﬁd_ôabÀ
 = 
ﬁd_ôabÀ
;

1621 
tmp_√w_ôabÀ
 = 
√w_ôabÀ
;

1623 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++) {

1624 
blk
 = 
fs
->
group_desc
[
i
].
bg_öode_èbÀ
;

1625 
ªtvÆ
 = 
	`io_ch™√l_ªad_blk
(
fs
->
io
, 
blk
,

1626 
fs
->
öode_blocks_≥r_group
, 
ﬁd_ôabÀ
);

1627 i‡(
ªtvÆ
)

1628 
îr_out
;

1630 
j
 = 0; j < 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
); j++) {

1631 
	`mem˝y
(
√w_ôabÀ
, 
ﬁd_ôabÀ
, 
ﬁd_öo_size
);

1633 
	`mem£t
(
√w_ôabÀ
+
ﬁd_öo_size
, 0,

1634 
√w_öo_size
 - 
ﬁd_öo_size
);

1636 
√w_ôabÀ
 +
√w_öo_size
;

1637 
ﬁd_ôabÀ
 +
ﬁd_öo_size
;

1641 
ﬁd_ôabÀ
 = 
tmp_ﬁd_ôabÀ
;

1642 
√w_ôabÀ
 = 
tmp_√w_ôabÀ
;

1644 
ªtvÆ
 = 
	`io_ch™√l_wrôe_blk
(
fs
->
io
, 
blk
,

1645 
√w_öo_blks_≥r_gΩ
, 
√w_ôabÀ
);

1646 i‡(
ªtvÆ
)

1647 
îr_out
;

1651 
fs
->
öode_blocks_≥r_group
 = 
√w_öo_blks_≥r_gΩ
;

1652 
fs
->
su≥r
->
s_öode_size
 = 
√w_öo_size
;

1654 
îr_out
:

1655 i‡(
ﬁd_ôabÀ
)

1656 
	`ext2fs_‰ì_mem
(&
ﬁd_ôabÀ
);

1658 i‡(
√w_ôabÀ
)

1659 
	`ext2fs_‰ì_mem
(&
√w_ôabÀ
);

1661  
ªtvÆ
;

1662 
	}
}

1664 
îrcode_t
 
	$ext2fs_ˇlcuœã_summ¨y_°©s
(
ext2_fûsys
 
fs
)

1666 
blk_t
 
blk
;

1667 
ext2_öo_t
 
öo
;

1668 
group
 = 0;

1669 
cou¡
 = 0;

1670 
tŸÆ_‰ì
 = 0;

1671 
group_‰ì
 = 0;

1676 
blk
 = 
fs
->
su≥r
->
s_fú°_d©a_block
;

1677 
blk
 < 
fs
->
su≥r
->
s_blocks_cou¡
; blk++) {

1678 i‡(!
	`ext2fs_Á°_ã°_block_bôm≠
(
fs
->
block_m≠
, 
blk
)) {

1679 
group_‰ì
++;

1680 
tŸÆ_‰ì
++;

1682 
cou¡
++;

1683 i‡((
cou¡
 =
fs
->
su≥r
->
s_blocks_≥r_group
) ||

1684 (
blk
 =
fs
->
su≥r
->
s_blocks_cou¡
-1)) {

1685 
fs
->
group_desc
[
group
++].
bg_‰ì_blocks_cou¡
 =

1686 
group_‰ì
;

1687 
cou¡
 = 0;

1688 
group_‰ì
 = 0;

1691 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
 = 
tŸÆ_‰ì
;

1696 
group_‰ì
 = 0;

1697 
tŸÆ_‰ì
 = 0;

1698 
cou¡
 = 0;

1699 
group
 = 0;

1702 
öo
 = 1; inÿ<
fs
->
su≥r
->
s_öodes_cou¡
 && ino > 0; ino++) {

1703 i‡(!
	`ext2fs_Á°_ã°_öode_bôm≠
(
fs
->
öode_m≠
, 
öo
)) {

1704 
group_‰ì
++;

1705 
tŸÆ_‰ì
++;

1707 
cou¡
++;

1708 i‡((
cou¡
 =
fs
->
su≥r
->
s_öodes_≥r_group
) ||

1709 (
öo
 =
fs
->
su≥r
->
s_öodes_cou¡
)) {

1710 
fs
->
group_desc
[
group
++].
bg_‰ì_öodes_cou¡
 =

1711 
group_‰ì
;

1712 
cou¡
 = 0;

1713 
group_‰ì
 = 0;

1716 
fs
->
su≥r
->
s_‰ì_öodes_cou¡
 = 
tŸÆ_‰ì
;

1717 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1719 
	}
}

1721 
	#li°_f‹_óch_ß„
(
pos
, 
≤ext
, 
hód
) \

1722 
pos
 = (
hód
)->
√xt
, 
≤ext
 =Öos->next;Öos != (head); \

1723 
pos
 = 
≤ext
,Ö√xàpos->
√xt
)

	)

1725 
	$‰ì_blk_move_li°
()

1727 
li°_hód
 *
íåy
, *
tmp
;

1728 
blk_move
 *
bmv
;

1730 
	`li°_f‹_óch_ß„
(
íåy
, 
tmp
, &
blk_move_li°
) {

1731 
bmv
 = 
	`li°_íåy
(
íåy
, 
blk_move
, 
li°
);

1732 
	`li°_dñ
(
íåy
);

1733 
	`ext2fs_‰ì_mem
(&
bmv
);

1736 
	}
}

1738 
	$ªsize_öode
(
ext2_fûsys
 
fs
, 
√w_size
)

1740 
îrcode_t
 
ªtvÆ
;

1741 
√w_öo_blks_≥r_gΩ
;

1742 
ext2fs_block_bôm≠
 
bm≠
;

1744 
	`ext2fs_ªad_öode_bôm≠
(
fs
);

1745 
	`ext2fs_ªad_block_bôm≠
(
fs
);

1746 
	`INIT_LIST_HEAD
(&
blk_move_li°
);

1749 
√w_öo_blks_≥r_gΩ
 = 
	`ext2fs_div_˚û
(

1750 
	`EXT2_INODES_PER_GROUP
(
fs
->
su≥r
)*

1751 
√w_size
,

1752 
fs
->
blocksize
);

1758 
fs
->
su≥r
->
s_°©e
 &~
EXT2_VALID_FS
;

1760 
ªtvÆ
 = 
	`ext2fs_Æloˇã_block_bôm≠
(
fs
, 
	`_
("blocksÅo be moved"),

1761 &
bm≠
);

1762 i‡(
ªtvÆ
) {

1763 
	`Âuts
(
	`_
("FailedÅoállocate block bitmap when "

1764 "ö¸ósög inodêsize\n"), 
°dîr
);

1765  
ªtvÆ
;

1767 
ªtvÆ
 = 
	`gë_move_bôm≠s
(
fs
, 
√w_öo_blks_≥r_gΩ
, 
bm≠
);

1768 i‡(
ªtvÆ
) {

1769 
	`Âuts
(
	`_
("NŸÉnough s∑˚Åÿö¸ó£ inodêsizê\n"), 
°dîr
);

1770 
îr_out
;

1772 
ªtvÆ
 = 
	`move_block
(
fs
, 
bm≠
);

1773 i‡(
ªtvÆ
) {

1774 
	`Âuts
(
	`_
("FailedÅoÑelocate blocks during inodeÑesize \n"),

1775 
°dîr
);

1776 
îr_out
;

1778 
ªtvÆ
 = 
	`öode_sˇn_™d_fix
(
fs
, 
bm≠
);

1779 i‡(
ªtvÆ
)

1780 
îr_out_undo
;

1782 
ªtvÆ
 = 
	`group_desc_sˇn_™d_fix
(
fs
, 
bm≠
);

1783 i‡(
ªtvÆ
)

1784 
îr_out_undo
;

1786 
ªtvÆ
 = 
	`ex∑nd_öode_èbÀ
(
fs
, 
√w_size
);

1787 i‡(
ªtvÆ
)

1788 
îr_out_undo
;

1790 
	`ext2fs_ˇlcuœã_summ¨y_°©s
(
fs
);

1792 
fs
->
su≥r
->
s_°©e
 |
EXT2_VALID_FS
;

1794 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1795 
	`ext2fs_m¨k_bb_dúty
(
fs
);

1797 
îr_out
:

1798 
	`‰ì_blk_move_li°
();

1799 
	`ext2fs_‰ì_block_bôm≠
(
bm≠
);

1801  
ªtvÆ
;

1803 
îr_out_undo
:

1804 
	`‰ì_blk_move_li°
();

1805 
	`ext2fs_‰ì_block_bôm≠
(
bm≠
);

1806 
	`Âuts
(
	`_
("Error inÑesizingÅhe inode size.\n"

1808 "fûêsy°em ch™ges. \n"), 
°dîr
);

1810  
ªtvÆ
;

1811 
	}
}

1813 
	$tu√2fs_£tup_tdb
(c⁄° *
«me
, 
io_m™agî
 *
io_±r
)

1815 
îrcode_t
 
ªtvÆ
 = 0;

1816 c⁄° *
tdb_dú
;

1817 *
tdb_fûe
;

1818 *
dev_«me
, *
tmp_«me
;

1825 
	`¥ofûe_gë_°rög
(
¥ofûe
, "scratch_files",

1827 &
tdb_dú
);

1829 
tmp_«me
 = 
	`°rdup
(
«me
);

1830 i‡(!
tmp_«me
) {

1831 
Æloc_‚_Áû
:

1832 
	`com_îr
(
¥ogøm_«me
, 
ENOMEM
,

1833 
	`_
("Couldn'tállocate memory forÅdb filename\n"));

1834  
ENOMEM
;

1836 
dev_«me
 = 
	`ba£«me
(
tmp_«me
);

1838 
tdb_dú
 = 
	`gëív
("E2FSPROGS_UNDO_DIR");

1839 i‡(!
tdb_dú
)

1840 
tdb_dú
 = "/var/lib/e2fsprogs";

1842 i‡(!
	`°rcmp
(
tdb_dú
, "none") || (tdb_dir[0] == 0) ||

1843 
	`ac˚ss
(
tdb_dú
, 
W_OK
))

1846 
tdb_fûe
 = 
	`mÆloc
(
	`°æí
(
tdb_dú
Ë+ 9 + såÀn(
dev_«me
) + 7 + 1);

1847 i‡(!
tdb_fûe
)

1848 
Æloc_‚_Áû
;

1849 
	`•rötf
(
tdb_fûe
, "%s/tu√2fs-%s.e2undo", 
tdb_dú
, 
dev_«me
);

1851 i‡(!
	`ac˚ss
(
tdb_fûe
, 
F_OK
)) {

1852 i‡(
	`u∆ök
(
tdb_fûe
) < 0) {

1853 
ªtvÆ
 = 
î∫o
;

1854 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

1855 
	`_
("whileÅryingÅo delete %s"),

1856 
tdb_fûe
);

1857 
	`‰ì
(
tdb_fûe
);

1858  
ªtvÆ
;

1862 
	`£t_undo_io_backög_m™agî
(*
io_±r
);

1863 *
io_±r
 = 
undo_io_m™agî
;

1864 
	`£t_undo_io_backup_fûe
(
tdb_fûe
);

1865 
	`¥ötf
(
	`_
("To undoÅheÅune2fs operationÖleaseÑun "

1867 
tdb_fûe
, 
«me
);

1868 
	`‰ì
(
tdb_fûe
);

1869 
	`‰ì
(
tmp_«me
);

1870  
ªtvÆ
;

1871 
	}
}

1873 
	$maö
(
¨gc
, **
¨gv
)

1875 
îrcode_t
 
ªtvÆ
;

1876 
ext2_fûsys
 
fs
;

1877 
ext2_su≥r_block
 *
sb
;

1878 
io_m™agî
 
io_±r
, 
io_±r_‹ig
 = 
NULL
;

1880 #ifde‡
ENABLE_NLS


1881 
	`£éoˇÀ
(
LC_MESSAGES
, "");

1882 
	`£éoˇÀ
(
LC_CTYPE
, "");

1883 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

1884 
	`ãxtdomaö
(
NLS_CAT_NAME
);

1886 i‡(
¨gc
 && *
¨gv
)

1887 
¥ogøm_«me
 = *
¨gv
;

1888 
	`add_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

1890 #ifde‡
CONFIG_BUILD_FINDFS


1891 i‡(
	`°rcmp
(
	`gë_¥og«me
(
¨gv
[0]), "findfs") == 0)

1892 
	`do_födfs
(
¨gc
, 
¨gv
);

1894 i‡(
	`°rcmp
(
	`gë_¥og«me
(
¨gv
[0]), "e2label") == 0)

1895 
	`∑r£_e2œbñ_›ti⁄s
(
¨gc
, 
¨gv
);

1897 
	`∑r£_tu√2fs_›ti⁄s
(
¨gc
, 
¨gv
);

1899 #ifde‡
CONFIG_TESTIO_DEBUG


1900 i‡(
	`gëív
("TEST_IO_FLAGS") || getenv("TEST_IO_DEBUG")) {

1901 
io_±r
 = 
ã°_io_m™agî
;

1902 
ã°_io_backög_m™agî
 = 
unix_io_m™agî
;

1905 
io_±r
 = 
unix_io_m™agî
;

1907 
ªåy_›í
:

1908 
ªtvÆ
 = 
	`ext2fs_›í2
(
devi˚_«me
, 
io_›ti⁄s
, 
›í_Êag
,

1909 0, 0, 
io_±r
, &
fs
);

1910 i‡(
ªtvÆ
) {

1911 
	`com_îr
(
¥ogøm_«me
, 
ªtvÆ
,

1912 
	`_
("whileÅryingÅo open %s"),

1913 
devi˚_«me
);

1914 
	`Ârötf
(
°dîr
,

1915 
	`_
("Couldn't find valid filesystem superblock.\n"));

1916 
	`exô
(1);

1919 i‡(
I_Êag
 && !
io_±r_‹ig
) {

1925 i‡(
√w_öode_size
 =
	`EXT2_INODE_SIZE
(
fs
->
su≥r
)) {

1926 
	`Ârötf
(
°dîr
, 
	`_
("The inode size isálready %lu\n"),

1927 
√w_öode_size
);

1928 
	`exô
(1);

1930 i‡(
√w_öode_size
 < 
	`EXT2_INODE_SIZE
(
fs
->
su≥r
)) {

1931 
	`Ârötf
(
°dîr
, 
	`_
("ShrinkingÅhe inode size is "

1933 
	`exô
(1);

1940 
io_±r_‹ig
 = 
io_±r
;

1941 
ªtvÆ
 = 
	`tu√2fs_£tup_tdb
(
devi˚_«me
, &
io_±r
);

1942 i‡(
ªtvÆ
)

1943 
	`exô
(1);

1944 i‡(
io_±r
 !
io_±r_‹ig
) {

1945 
	`ext2fs_˛o£
(
fs
);

1946 
ªåy_›í
;

1950 
sb
 = 
fs
->
su≥r
;

1951 
fs
->
Êags
 &~
EXT2_FLAG_MASTER_SB_ONLY
;

1953 i‡(
¥öt_œbñ
) {

1955 
	`¥ötf
("%.*s\n", (Ë(
sb
->
s_vﬁume_«me
),

1956 
sb
->
s_vﬁume_«me
);

1957 
	`ªmove_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

1958 
	`exô
(0);

1961 
ªtvÆ
 = 
	`ext2fs_check_if_mou¡ed
(
devi˚_«me
, &
mou¡_Êags
);

1962 i‡(
ªtvÆ
) {

1963 
	`com_îr
("ext2fs_check_if_mou¡", 
ªtvÆ
,

1964 
	`_
("while determining whether %s is mounted."),

1965 
devi˚_«me
);

1966 
	`exô
(1);

1969 
fs
->
Êags
 |
EXT2_FLAG_SUPER_ONLY
;

1971 i‡(
c_Êag
) {

1972 
sb
->
s_max_m¡_cou¡
 = 
max_mou¡_cou¡
;

1973 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1974 
	`¥ötf
(
	`_
("Setting maximal mount countÅo %d\n"),

1975 
max_mou¡_cou¡
);

1977 i‡(
C_Êag
) {

1978 
sb
->
s_m¡_cou¡
 = 
mou¡_cou¡
;

1979 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1980 
	`¥ötf
(
	`_
("Sëtög cuºíàmou¡ cou¡Åÿ%d\n"), 
mou¡_cou¡
);

1982 i‡(
e_Êag
) {

1983 
sb
->
s_îr‹s
 = 
îr‹s
;

1984 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1985 
	`¥ötf
(
	`_
("SëtögÉº‹ behavi‹Åÿ%d\n"), 
îr‹s
);

1987 i‡(
g_Êag
) {

1988 
sb
->
s_def_ªsgid
 = 
ªsgid
;

1989 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1990 
	`¥ötf
(
	`_
("SëtögÑe£rved block†gidÅÿ%lu\n"), 
ªsgid
);

1992 i‡(
i_Êag
) {

1993 
sb
->
s_checköãrvÆ
 = 
öãrvÆ
;

1994 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

1995 
	`¥ötf
(
	`_
("Setting interval between checksÅo %lu seconds\n"),

1996 
öãrvÆ
);

1998 i‡(
m_Êag
) {

1999 
sb
->
s_r_blocks_cou¡
 = (Ë(
ª£rved_øtio
 *

2000 
sb
->
s_blocks_cou¡
 / 100.0);

2001 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2002 
	`¥ötf
(
	`_
("SettingÑeserved blocksÖercentageÅo %g%% "

2004 
ª£rved_øtio
, 
sb
->
s_r_blocks_cou¡
);

2006 i‡(
r_Êag
) {

2007 i‡(
ª£rved_blocks
 >
sb
->
s_blocks_cou¡
/2) {

2008 
	`com_îr
(
¥ogøm_«me
, 0,

2009 
	`_
("reserved blocks count isÅoo big (%lu)"),

2010 
ª£rved_blocks
);

2011 
	`exô
(1);

2013 
sb
->
s_r_blocks_cou¡
 = 
ª£rved_blocks
;

2014 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2015 
	`¥ötf
(
	`_
("SettingÑeserved blocks countÅo %lu\n"),

2016 
ª£rved_blocks
);

2018 i‡(
s_Êag
 == 1) {

2019 i‡(
sb
->
s_„©uª_ro_com∑t
 &

2020 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
)

2021 
	`Âuts
(
	`_
("\nThe filesystemálready has sparse "

2022 "su≥rblocks.\n"), 
°dîr
);

2024 
sb
->
s_„©uª_ro_com∑t
 |=

2025 
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
;

2026 
sb
->
s_°©e
 &~
EXT2_VALID_FS
;

2027 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2028 
	`¥ötf
(
	`_
("\nSparse superblock flag set. %s"),

2029 
	`_
(
∂ó£_fsck
));

2032 i‡(
s_Êag
 == 0) {

2033 
	`Âuts
(
	`_
("\nClearingÅhe sparse superflagÇot supported.\n"),

2034 
°dîr
);

2035 
	`exô
(1);

2037 i‡(
T_Êag
) {

2038 
sb
->
s_œ°check
 = 
œ°_check_time
;

2039 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2040 
	`¥ötf
(
	`_
("SettingÅime filesystemÜast checkedÅo %s\n"),

2041 
	`˘ime
(&
œ°_check_time
));

2043 i‡(
u_Êag
) {

2044 
sb
->
s_def_ªsuid
 = 
ªsuid
;

2045 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2046 
	`¥ötf
(
	`_
("SëtögÑe£rved block†uidÅÿ%lu\n"), 
ªsuid
);

2048 i‡(
L_Êag
) {

2049 i‡(
	`°æí
(
√w_œbñ
Ë> (
sb
->
s_vﬁume_«me
))

2050 
	`Âuts
(
	`_
("Warning:ÜabelÅooÜong,Åruncating.\n"),

2051 
°dîr
);

2052 
	`mem£t
(
sb
->
s_vﬁume_«me
, 0, (sb->s_volume_name));

2053 
	`°∫˝y
(
sb
->
s_vﬁume_«me
, 
√w_œbñ
,

2054 (
sb
->
s_vﬁume_«me
));

2055 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2057 i‡(
M_Êag
) {

2058 
	`mem£t
(
sb
->
s_œ°_mou¡ed
, 0, (sb->s_last_mounted));

2059 
	`°∫˝y
(
sb
->
s_œ°_mou¡ed
, 
√w_œ°_mou¡ed
,

2060 (
sb
->
s_œ°_mou¡ed
));

2061 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2063 i‡(
m¡›ts_cmd
)

2064 
	`upd©e_m¡›ts
(
fs
, 
m¡›ts_cmd
);

2065 i‡(
„©uªs_cmd
)

2066 
	`upd©e_„©uª_£t
(
fs
, 
„©uªs_cmd
);

2067 i‡(
exãnded_cmd
)

2068 
	`∑r£_exãnded_›ts
(
fs
, 
exãnded_cmd
);

2069 i‡(
jou∫Æ_size
 || 
jou∫Æ_devi˚
)

2070 
	`add_jou∫Æ
(
fs
);

2072 i‡(
U_Êag
) {

2073 
£t_csum
 = 0;

2074 
dgΩ_t
 
i
;

2076 i‡(
sb
->
s_„©uª_ro_com∑t
 &

2077 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
) {

2083 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++)

2084 i‡(!
	`ext2fs_group_desc_csum_vîify
(
fs
, 
i
))

2086 i‡(
i
 >
fs
->
group_desc_cou¡
)

2087 
£t_csum
 = 1;

2089 i‡((
	`°rˇ£cmp
(
√w_UUID
, "null") == 0) ||

2090 (
	`°rˇ£cmp
(
√w_UUID
, "clear") == 0)) {

2091 
	`uuid_˛ór
(
sb
->
s_uuid
);

2092 } i‡(
	`°rˇ£cmp
(
√w_UUID
, "time") == 0) {

2093 
	`uuid_gíî©e_time
(
sb
->
s_uuid
);

2094 } i‡(
	`°rˇ£cmp
(
√w_UUID
, "random") == 0) {

2095 
	`uuid_gíî©e
(
sb
->
s_uuid
);

2096 } i‡(
	`uuid_∑r£
(
√w_UUID
, 
sb
->
s_uuid
)) {

2097 
	`com_îr
(
¥ogøm_«me
, 0, 
	`_
("Invalid UUID format\n"));

2098 
	`exô
(1);

2100 i‡(
£t_csum
) {

2101 
i
 = 0; i < 
fs
->
group_desc_cou¡
; i++)

2102 
	`ext2fs_group_desc_csum_£t
(
fs
, 
i
);

2103 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

2105 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2107 i‡(
I_Êag
) {

2108 i‡(
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) {

2109 
	`Âuts
(
	`_
("The inode size may only be "

2111 "unmou¡ed.\n"), 
°dîr
);

2112 
	`exô
(1);

2114 i‡(
fs
->
su≥r
->
s_„©uª_öcom∑t
 &

2115 
EXT4_FEATURE_INCOMPAT_FLEX_BG
) {

2116 
	`Âuts
(
	`_
("ChangingÅhe inode sizeÇot supported for "

2119 
°dîr
);

2120 
	`exô
(1);

2126 
fs
->
Êags
 &~
EXT2_FLAG_SUPER_ONLY
;

2127 i‡(
	`ªsize_öode
(
fs
, 
√w_öode_size
) == 0) {

2128 
	`¥ötf
(
	`_
("Setting inode size %lu\n"),

2129 
√w_öode_size
);

2133 i‡(
l_Êag
)

2134 
	`li°_su≥r
(
sb
);

2135 i‡(
°ride_£t
) {

2136 
sb
->
s_øid_°ride
 = 
°ride
;

2137 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2138 
	`¥ötf
(
	`_
("Sëtög såidêsizêtÿ%d\n"), 
°ride
);

2140 i‡(
°rùe_width_£t
) {

2141 
sb
->
s_øid_°rùe_width
 = 
°rùe_width
;

2142 
	`ext2fs_m¨k_su≥r_dúty
(
fs
);

2143 
	`¥ötf
(
	`_
("Sëtög såùêwidthÅÿ%d\n"), 
°rùe_width
);

2145 
	`‰ì
(
devi˚_«me
);

2146 
	`ªmove_îr‹_èbÀ
(&
ë_ext2_îr‹_èbÀ
);

2147  (
	`ext2fs_˛o£
(
fs
) ? 1 : 0);

2148 
	}
}

	@util.c

12 
	#_LARGEFILE_SOURCE


	)

13 
	#_LARGEFILE64_SOURCE


	)

15 
	~<°dio.h
>

16 
	~<°rög.h
>

17 #ifde‡
HAVE_ERRNO_H


18 
	~<î∫o.h
>

20 #ifde‡
HAVE_LINUX_MAJOR_H


21 
	~<löux/maj‹.h
>

23 #ifde‡
HAVE_SYS_STAT_H


24 
	~<sys/°©.h
>

27 
	~"ë/com_îr.h
"

28 
	~"e2p/e2p.h
"

29 
	~"ext2fs/ext2_fs.h
"

30 
	~"ext2fs/ext2fs.h
"

31 
	~"∆s-íabÀ.h
"

32 
	~"blkid/blkid.h
"

33 
	~"utû.h
"

35 #i‚de‡
HAVE_STRCASECMP


36 
	$°rˇ£cmp
 (*
s1
, *
s2
)

38 *
s1
 && *
s2
) {

39 
ch1
 = *
s1
++, 
ch2
 = *
s2
++;

40 i‡(
	`isuµî
 (
ch1
))

41 
ch1
 = 
	`tﬁowî
 (ch1);

42 i‡(
	`isuµî
 (
ch2
))

43 
ch2
 = 
	`tﬁowî
 (ch2);

44 i‡(
ch1
 !
ch2
)

45  
ch1
 - 
ch2
;

47  *
s1
 ? 1 : *
s2
 ? -1 : 0;

48 
	}
}

54 *
	$gë_¥og«me
(*
¨gv_zîo
)

56 *
˝
;

58 
˝
 = 
	`°ºchr
(
¨gv_zîo
, '/');

59 i‡(!
˝
 )

60  
¨gv_zîo
;

62  
˝
+1;

63 
	}
}

65 
	$¥o˚ed_que°i⁄
()

67 
buf
[256];

68 c⁄° *
sh‹t_yes
 = 
	`_
("yY");

70 
	`fÊush
(
°dout
);

71 
	`fÊush
(
°dîr
);

72 
	`Âuts
(
	`_
("Pro˚edányway? (y,nË"), 
°dout
);

73 
buf
[0] = 0;

74 i‡(!
	`fgës
(
buf
, (buf), 
°dö
) ||

75 
	`°rchr
(
sh‹t_yes
, 
buf
[0]) == 0)

76 
	`exô
(1);

77 
	}
}

79 
	$check_∂ausibûôy
(c⁄° *
devi˚
)

81 
vÆ
;

82 #ifde‡
HAVE_OPEN64


83 
°©64
 
s
;

85 
vÆ
 = 
	`°©64
(
devi˚
, &
s
);

87 
°©
 
s
;

89 
vÆ
 = 
	`°©
(
devi˚
, &
s
);

92 if(
vÆ
 == -1) {

93 
	`Ârötf
(
°dîr
, 
	`_
("CouldÇot stat %s --- %s\n"),

94 
devi˚
, 
	`îr‹_mesßge
(
î∫o
));

95 i‡(
î∫o
 =
ENOENT
)

96 
	`Âuts
(
	`_
("\nThe deviceápparently doesÇotÉxist; "

97 "did you s≥cify iàc‹ª˘ly?\n"), 
°dîr
);

98 
	`exô
(1);

100 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
)

102 i‡(!
	`S_ISBLK
(
s
.
°_mode
Ë&& !
	`S_ISCHR
(s.st_mode))

104 i‡(!
	`S_ISBLK
(
s
.
°_mode
))

107 
	`¥ötf
(
	`_
("%†i†nŸá block s≥cü»devi˚.\n"), 
devi˚
);

108 
	`¥o˚ed_que°i⁄
();

112 #ifde‡
HAVE_LINUX_MAJOR_H


113 #i‚de‡
MAJOR


114 
	#MAJOR
(
dev
Ë((dev)>>8)

	)

115 
	#MINOR
(
dev
Ë((devË& 0xff)

	)

117 #i‚de‡
SCSI_BLK_MAJOR


118 #ifde‡
SCSI_DISK0_MAJOR


119 #ifde‡
SCSI_DISK8_MAJOR


120 
	#SCSI_DISK_MAJOR
(
M
Ë((MË=
SCSI_DISK0_MAJOR
 || \

121 ((
M
Ë>
SCSI_DISK1_MAJOR
 && (MË<
SCSI_DISK7_MAJOR
) || \

122 ((
M
Ë>
SCSI_DISK8_MAJOR
 && (MË<
SCSI_DISK15_MAJOR
))

	)

124 
	#SCSI_DISK_MAJOR
(
M
Ë((MË=
SCSI_DISK0_MAJOR
 || \

125 ((
M
Ë>
SCSI_DISK1_MAJOR
 && (MË<
SCSI_DISK7_MAJOR
))

	)

127 
	#SCSI_BLK_MAJOR
(
M
Ë(
	`SCSI_DISK_MAJOR
((M)Ë|| (MË=
SCSI_CDROM_MAJOR
)

	)

129 
	#SCSI_BLK_MAJOR
(
M
Ë((MË=
SCSI_DISK_MAJOR
 || (MË=
SCSI_CDROM_MAJOR
)

	)

132 i‡(((
	`MAJOR
(
s
.
°_rdev
Ë=
HD_MAJOR
 &&

133 
	`MINOR
(
s
.
°_rdev
)%64 == 0) ||

134 (
	`SCSI_BLK_MAJOR
(
	`MAJOR
(
s
.
°_rdev
)) &&

135 
	`MINOR
(
s
.
°_rdev
)%16 == 0))) {

136 
	`¥ötf
(
	`_
("%s isÉntire device,Çot just oneÖartition!\n"),

137 
devi˚
);

138 
	`¥o˚ed_que°i⁄
();

141 
	}
}

143 
	$check_mou¡
(c⁄° *
devi˚
, 
f‹˚
, c⁄° *
ty≥
)

145 
îrcode_t
 
ªtvÆ
;

146 
mou¡_Êags
;

148 
ªtvÆ
 = 
	`ext2fs_check_if_mou¡ed
(
devi˚
, &
mou¡_Êags
);

149 i‡(
ªtvÆ
) {

150 
	`com_îr
("ext2fs_check_if_mou¡", 
ªtvÆ
,

151 
	`_
("while determining whether %s is mounted."),

152 
devi˚
);

155 i‡(
mou¡_Êags
 & 
EXT2_MF_MOUNTED
) {

156 
	`Ârötf
(
°dîr
, 
	`_
("%†i†mou¡ed; "), 
devi˚
);

157 i‡(
f‹˚
 > 2) {

158 
	`Âuts
(
	`_
("mke2fs forcedányway. Hope /etc/mtab is "

159 "öc‹ª˘.\n"), 
°dîr
);

162 
ab‹t_mke2fs
:

163 
	`Ârötf
(
°dîr
, 
	`_
("wû»nŸ makê®%†hîe!\n"), 
ty≥
);

164 
	`exô
(1);

166 i‡(
mou¡_Êags
 & 
EXT2_MF_BUSY
) {

167 
	`Ârötf
(
°dîr
, 
	`_
("%s isápparently in use byÅhe system; "),

168 
devi˚
);

169 i‡(
f‹˚
 > 2) {

170 
	`Âuts
(
	`_
("mke2f†f‹˚dányway.\n"), 
°dîr
);

173 
ab‹t_mke2fs
;

175 
	}
}

177 
	$∑r£_jou∫Æ_›ts
(c⁄° *
›ts
)

179 *
buf
, *
tokí
, *
√xt
, *
p
, *
¨g
;

180 
Àn
;

181 
jou∫Æ_ußge
 = 0;

183 
Àn
 = 
	`°æí
(
›ts
);

184 
buf
 = 
	`mÆloc
(
Àn
+1);

185 i‡(!
buf
) {

186 
	`Âuts
(
	`_
("Couldn'tállocate memoryÅoÖarse journal "

187 "›ti⁄s!\n"), 
°dîr
);

188 
	`exô
(1);

190 
	`°r˝y
(
buf
, 
›ts
);

191 
tokí
 = 
buf
;Åokí && *tokí;Åokí = 
√xt
) {

192 
p
 = 
	`°rchr
(
tokí
, ',');

193 
√xt
 = 0;

194 i‡(
p
) {

195 *
p
 = 0;

196 
√xt
 = 
p
+1;

198 
¨g
 = 
	`°rchr
(
tokí
, '=');

199 i‡(
¨g
) {

200 *
¨g
 = 0;

201 
¨g
++;

204 
	`¥ötf
("Jou∫Æ o±i⁄=%s,árgumít=%s\n", 
tokí
,

205 
¨g
 ?árg : "NONE");

207 i‡(
	`°rcmp
(
tokí
, "device") == 0) {

208 
jou∫Æ_devi˚
 = 
	`blkid_gë_dev«me
(
NULL
, 
¨g
, NULL);

209 i‡(!
jou∫Æ_devi˚
) {

210 i‡(
¨g
)

211 
	`Ârötf
(
°dîr
, 
	`_
("\nCouldÇot find "

213 
¨g
);

214 
jou∫Æ_ußge
++;

217 } i‡(
	`°rcmp
(
tokí
, "size") == 0) {

218 i‡(!
¨g
) {

219 
jou∫Æ_ußge
++;

222 
jou∫Æ_size
 = 
	`°πoul
(
¨g
, &
p
, 0);

223 i‡(*
p
)

224 
jou∫Æ_ußge
++;

225 #ifde‡
EXT2FS_SNAPSHOT_BIG_JOURNAL


226 } i‡(
	`°rcmp
(
tokí
, "big") == 0) {

228 
jou∫Æ_size
 = -
NEXT3_MAX_COW_CREDITS
;

230 } i‡(
	`°rcmp
(
tokí
, "bigger") == 0) {

232 i‡(!
¨g
) {

233 
jou∫Æ_ußge
++;

236 
jou∫Æ_size
 = -
	`°πoul
(
¨g
, &
p
, 0);

237 i‡(*
p
)

238 
jou∫Æ_ußge
++;

241 } i‡(
	`°rcmp
(
tokí
, "v1_superblock") == 0) {

242 
jou∫Æ_Êags
 |
EXT2_MKJOURNAL_V1_SUPER
;

245 
jou∫Æ_ußge
++;

247 i‡(
jou∫Æ_ußge
) {

248 
	`Âuts
(
	`_
("\nBad journal options specified.\n\n"

254 #ifde‡
EXT2FS_SNAPSHOT_BIG_JOURNAL


260 "1024ánd 10240000 fûesy°em blocks.\n\n"), 
°dîr
);

261 
	`‰ì
(
buf
);

262 
	`exô
(1);

264 
	`‰ì
(
buf
);

265 
	}
}

276 
	$figuª_jou∫Æ_size
(
size
, 
ext2_fûsys
 
fs
)

278 
j_blocks
;

280 
j_blocks
 = 
	`ext2fs_deÁu…_jou∫Æ_size
(
fs
->
su≥r
->
s_blocks_cou¡
);

281 i‡(
j_blocks
 < 0) {

282 
	`Âuts
(
	`_
("\nFûesy°emÅoÿsmÆ»f‹á jou∫Æ\n"), 
°dîr
);

286 #ifde‡
EXT2FS_SNAPSHOT_BIG_JOURNAL


287 i‡(
size
 < -1) {

289 
j_blocks
 = 
	`ext2fs_big_jou∫Æ_size
(-
size
, 
fs
->
su≥r
->
s_blocks_cou¡
);

290 i‡(
j_blocks
 < 
EXT3_DEF_JOURNAL_BLOCKS
*(-
size
)) {

291 
	`Âuts
(
	`_
("\nFilesystemÅoo small forÑequested "

292 "jou∫Æ size. "), 
°dîr
);

293 i‡(
j_blocks
 < 0) {

294 
	`Âuts
(
	`_
("Ab‹tög.\n"), 
°dîr
);

295 
	`exô
(1);

297 
	`Âuts
(
	`_
("Cª©ögá smÆÀ∏jou∫Æ.\n"), 
°dîr
);

302 i‡(
size
 > 0) {

303 
j_blocks
 = 
size
 * 1024 / (
fs
->
blocksize
 / 1024);

304 i‡(
j_blocks
 < 1024 || j_blocks > 10240000) {

305 
	`Ârötf
(
°dîr
, 
	`_
("\nTheÑequested journal "

309 
j_blocks
);

310 
	`exô
(1);

312 i‡((Ë
j_blocks
 > 
fs
->
su≥r
->
s_‰ì_blocks_cou¡
 / 2) {

313 
	`Âuts
(
	`_
("\nJournal sizeÅoo big for filesystem.\n"),

314 
°dîr
);

315 
	`exô
(1);

318  
j_blocks
;

319 
	}
}

321 
	$¥öt_check_mesßge
(
ext2_fûsys
 
fs
)

323 
	`¥ötf
(
	`_
("This filesystem will beáutomatically "

327 
fs
->
su≥r
->
s_max_m¡_cou¡
,

328 ()
fs
->
su≥r
->
s_checköãrvÆ
 / (3600 * 24));

329 
	}
}

	@util.h

13 
jou∫Æ_size
;

14 
jou∫Æ_Êags
;

15 *
jou∫Æ_devi˚
;

17 #i‚de‡
HAVE_STRCASECMP


18 
°rˇ£cmp
 (*
s1
, *
s2
);

20 *
gë_¥og«me
(*
¨gv_zîo
);

21 
¥o˚ed_que°i⁄
();

22 
check_∂ausibûôy
(c⁄° *
devi˚
);

23 
∑r£_jou∫Æ_›ts
(c⁄° *
›ts
);

24 
check_mou¡
(c⁄° *
devi˚
, 
f‹˚
, c⁄° *
ty≥
);

25 
figuª_jou∫Æ_size
(
size
, 
ext2_fûsys
 
fs
);

26 
¥öt_check_mesßge
(
ext2_fûsys
 
fs
);

	@uuidd.c

12 
	#_GNU_SOURCE


	)

14 
	~<°dio.h
>

15 #ifde‡
HAVE_STDLIB_H


16 
	~<°dlib.h
>

18 
	~<uni°d.h
>

19 
	~<öây≥s.h
>

20 
	~<î∫o.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<sys/°©.h
>

23 
	~<sys/sockë.h
>

24 
	~<sys/un.h
>

25 
	~<f˙é.h
>

26 
	~<sig«l.h
>

27 
	~<°rög.h
>

28 #ifde‡
HAVE_GETOPT_H


29 
	~<gë›t.h
>

31 
gë›t
(
¨gc
, * c⁄° 
¨gv
[], c⁄° *
›t°rög
);

32 *
›èrg
;

33 
›töd
;

35 
	~"uuid/uuid.h
"

36 
	~"uuid/uuidd.h
"

37 
	~"∆s-íabÀ.h
"

39 #ifde‡
__GNUC__


40 
	#CODE_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

42 
	#CODE_ATTR
(
x
)

	)

45 
	$ußge
(c⁄° *
¥og«me
)

47 
	`Ârötf
(
°dîr
, 
	`_
("Usage: %s [-d] [-pÖidfile] [-s socketpath] "

48 "[-TÅimeout]\n"), 
¥og«me
);

49 
	`Ârötf
(
°dîr
, 
	`_
(" %s [-r|t] [-nÇum] [-s socketpath]\n"),

50 
¥og«me
);

51 
	`Ârötf
(
°dîr
, 
	`_
(" %†-k\n"), 
¥og«me
);

52 
	`exô
(1);

53 
	}
}

55 
	$dõ
(c⁄° *
msg
)

57 
	`≥º‹
(
msg
);

58 
	`exô
(1);

59 
	}
}

61 
	$¸óã_d´m⁄
()

63 
pid_t
 
pid
;

64 
uid_t
 
euid
;

66 
pid
 = 
	`f‹k
();

67 i‡(
pid
 == -1) {

68 
	`≥º‹
("fork");

69 
	`exô
(1);

70 } i‡(
pid
 != 0) {

71 
	`exô
(0);

74 
	`˛o£
(0);

75 
	`˛o£
(1);

76 
	`˛o£
(2);

77 
	`›í
("/dev/nuŒ", 
O_RDWR
);

78 
	`›í
("/dev/nuŒ", 
O_RDWR
);

79 
	`›í
("/dev/nuŒ", 
O_RDWR
);

81 i‡(
	`chdú
("/")) {}

82 (Ë
	`£tsid
();

83 
euid
 = 
	`gëeuid
();

84 i‡(
	`£åeuid
(
euid
,Éuid) < 0)

85 
	`dõ
("setreuid");

86 
	}
}

88 
ssize_t
 
	$ªad_Æl
(
fd
, *
buf
, 
size_t
 
cou¡
)

90 
ssize_t
 
ªt
;

91 
ssize_t
 
c
 = 0;

92 
åõs
 = 0;

94 
	`mem£t
(
buf
, 0, 
cou¡
);

95 
cou¡
 > 0) {

96 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
cou¡
);

97 i‡(
ªt
 <= 0) {

98 i‡((
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
 || 
ªt
 == 0) &&

99 (
åõs
++ < 5))

101  
c
 ? c : -1;

103 i‡(
ªt
 > 0)

104 
åõs
 = 0;

105 
cou¡
 -
ªt
;

106 
buf
 +
ªt
;

107 
c
 +
ªt
;

109  
c
;

110 
	}
}

112 
	$wrôe_Æl
(
fd
, *
buf
, 
size_t
 
cou¡
)

114 
ssize_t
 
ªt
;

115 
c
 = 0;

117 
cou¡
 > 0) {

118 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
cou¡
);

119 i‡(
ªt
 < 0) {

120 i‡((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EINTR
))

124 
cou¡
 -
ªt
;

125 
buf
 +
ªt
;

126 
c
 +
ªt
;

128  
c
;

129 
	}
}

131 c⁄° *
	g˛ónup_pidfûe
, *
	g˛ónup_sockë
;

133 
ãrmö©e_öå
(
signo
 
CODE_ATTR
((
unu£d
)))

135 (Ë
u∆ök
(
˛ónup_pidfûe
);

136 i‡(
	g˛ónup_sockë
)

137 (Ë
u∆ök
(
˛ónup_sockë
);

138 
exô
(0);

141 
	$ˇŒ_d´m⁄
(c⁄° *
sockë_∑th
, 
›
, *
buf
,

142 
buÊí
, *
num
, c⁄° **
îr_c⁄ãxt
)

144 
›_buf
[8];

145 
›_Àn
;

146 
s
;

147 
ssize_t
 
ªt
;

148 
öt32_t
 
ª∂y_Àn
 = 0;

149 
sockaddr_un
 
§v_addr
;

151 i‡(((
›
 =4Ë|| (› =5)Ë&& !
num
) {

152 i‡(
îr_c⁄ãxt
)

153 *
îr_c⁄ãxt
 = 
	`_
("badárguments");

154 
î∫o
 = 
EINVAL
;

158 i‡((
s
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0) {

159 i‡(
îr_c⁄ãxt
)

160 *
îr_c⁄ãxt
 = 
	`_
("socket");

164 
§v_addr
.
sun_Ámûy
 = 
AF_UNIX
;

165 
	`°∫˝y
(
§v_addr
.
sun_∑th
, 
sockë_∑th
, (srv_addr.sun_path));

166 
§v_addr
.
sun_∑th
[(srv_addr.sun_path)-1] = '\0';

168 i‡(
	`c⁄√˘
(
s
, (c⁄° 
sockaddr
 *Ë&
§v_addr
,

169 (
sockaddr_un
)) < 0) {

170 i‡(
îr_c⁄ãxt
)

171 *
îr_c⁄ãxt
 = 
	`_
("connect");

172 
	`˛o£
(
s
);

176 i‡(
›
 == 5) {

177 i‡((*
num
)*16 > 
buÊí
-4)

178 *
num
 = (
buÊí
-4) / 16;

180 
›_buf
[0] = 
›
;

181 
›_Àn
 = 1;

182 i‡((
›
 == 4) || (op == 5)) {

183 
	`mem˝y
(
›_buf
+1, 
num
, ());

184 
›_Àn
 += ();

187 
ªt
 = 
	`wrôe_Æl
(
s
, 
›_buf
, 
›_Àn
);

188 i‡(
ªt
 < 
›_Àn
) {

189 i‡(
îr_c⁄ãxt
)

190 *
îr_c⁄ãxt
 = 
	`_
("write");

191 
	`˛o£
(
s
);

195 
ªt
 = 
	`ªad_Æl
(
s
, (*Ë&
ª∂y_Àn
, (reply_len));

196 i‡(
ªt
 < 0) {

197 i‡(
îr_c⁄ãxt
)

198 *
îr_c⁄ãxt
 = 
	`_
("read count");

199 
	`˛o£
(
s
);

202 i‡(
ª∂y_Àn
 < 0 ||Ñïly_À¿> 
buÊí
) {

203 i‡(
îr_c⁄ãxt
)

204 *
îr_c⁄ãxt
 = 
	`_
("badÑesponseÜength");

205 
	`˛o£
(
s
);

208 
ªt
 = 
	`ªad_Æl
(
s
, (*Ë
buf
, 
ª∂y_Àn
);

210 i‡((
ªt
 > 0Ë&& (
›
 == 4)) {

211 i‡(
ª∂y_Àn
 >= () (16+()))

212 
	`mem˝y
(
buf
+16, 
num
, ());

214 *
num
 = -1;

216 i‡((
ªt
 > 0Ë&& (
›
 == 5)) {

217 i‡(*
num
 >= () ())

218 
	`mem˝y
(
buf
, 
num
, ());

220 *
num
 = -1;

223 
	`˛o£
(
s
);

225  
ªt
;

226 
	}
}

228 
	$£rvî_lo›
(c⁄° *
sockë_∑th
, c⁄° *
pidfûe_∑th
,

229 
debug
, 
timeout
, 
quõt
)

231 
sockaddr_un
 
my_addr
, 
‰om_addr
;

232 
Êock
 
Ê
;

233 
sockÀn_t
 
‰omÀn
;

234 
öt32_t
 
ª∂y_Àn
 = 0;

235 
uuid_t
 
uu
;

236 
mode_t
 
ßve_umask
;

237 
ª∂y_buf
[1024], *
˝
;

238 
›
, 
°r
[37];

239 
i
, 
s
, 
ns
, 
Àn
, 
num
;

240 
fd_pidfûe
, 
ªt
;

242 
fd_pidfûe
 = 
	`›í
(
pidfûe_∑th
, 
O_CREAT
 | 
O_RDWR
, 0664);

243 i‡(
fd_pidfûe
 < 0) {

244 i‡(!
quõt
)

245 
	`Ârötf
(
°dîr
, "FailedÅo open/create %s: %s\n",

246 
pidfûe_∑th
, 
	`°ªº‹
(
î∫o
));

247 
	`exô
(1);

249 
˛ónup_pidfûe
 = 
pidfûe_∑th
;

250 
˛ónup_sockë
 = 0;

251 
	`sig«l
(
SIGALRM
, 
ãrmö©e_öå
);

252 
	`Æ¨m
(30);

253 
Ê
.
l_ty≥
 = 
F_WRLCK
;

254 
Ê
.
l_whí˚
 = 
SEEK_SET
;

255 
Ê
.
l_°¨t
 = 0;

256 
Ê
.
l_Àn
 = 0;

257 
Ê
.
l_pid
 = 0;

258 
	`f˙é
(
fd_pidfûe
, 
F_SETLKW
, &
Ê
) < 0) {

259 i‡((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EINTR
))

261 i‡(!
quõt
)

262 
	`Ârötf
(
°dîr
, "FailedÅoÜock %s: %s\n",

263 
pidfûe_∑th
, 
	`°ªº‹
(
î∫o
));

264 
	`exô
(1);

266 
ªt
 = 
	`ˇŒ_d´m⁄
(
sockë_∑th
, 0, 
ª∂y_buf
, (reply_buf), 0, 0);

267 i‡(
ªt
 > 0) {

268 i‡(!
quõt
)

269 
	`¥ötf
(
	`_
("uuidd daemonálreadyÑunningátÖid %s\n"),

270 
ª∂y_buf
);

271 
	`exô
(1);

273 
	`Æ¨m
(0);

275 i‡((
s
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0)) < 0) {

276 i‡(!
quõt
)

277 
	`Ârötf
(
°dîr
, 
	`_
("Couldn't create unix stream "

278 "sockë: %s"), 
	`°ªº‹
(
î∫o
));

279 
	`exô
(1);

286 !
debug
 && 
s
 <= 2) {

287 
s
 = 
	`dup
(s);

288 i‡(
s
 < 0) {

289 
	`≥º‹
("dup");

290 
	`exô
(1);

297 
my_addr
.
sun_Ámûy
 = 
AF_UNIX
;

298 
	`°∫˝y
(
my_addr
.
sun_∑th
, 
sockë_∑th
, (my_addr.sun_path));

299 
my_addr
.
sun_∑th
[(my_addr.sun_path)-1] = '\0';

300 (Ë
	`u∆ök
(
sockë_∑th
);

301 
ßve_umask
 = 
	`umask
(0);

302 i‡(
	`böd
(
s
, (c⁄° 
sockaddr
 *Ë&
my_addr
,

303 (
sockaddr_un
)) < 0) {

304 i‡(!
quõt
)

305 
	`Ârötf
(
°dîr
,

306 
	`_
("Couldn't bind unix socket %s: %s\n"),

307 
sockë_∑th
, 
	`°ªº‹
(
î∫o
));

308 
	`exô
(1);

310 (Ë
	`umask
(
ßve_umask
);

312 i‡(
	`li°í
(
s
, 5) < 0) {

313 i‡(!
quõt
)

314 
	`Ârötf
(
°dîr
, 
	`_
("Couldn'tÜisten on unix "

315 "sockë %s: %s\n"), 
sockë_∑th
,

316 
	`°ªº‹
(
î∫o
));

317 
	`exô
(1);

320 
˛ónup_sockë
 = 
sockë_∑th
;

321 i‡(!
debug
)

322 
	`¸óã_d´m⁄
();

323 
	`sig«l
(
SIGHUP
, 
ãrmö©e_öå
);

324 
	`sig«l
(
SIGINT
, 
ãrmö©e_öå
);

325 
	`sig«l
(
SIGTERM
, 
ãrmö©e_öå
);

326 
	`sig«l
(
SIGALRM
, 
ãrmö©e_öå
);

327 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

329 
	`•rötf
(
ª∂y_buf
, "%8d\n", 
	`gëpid
());

330 i‡(
	`·runˇã
(
fd_pidfûe
, 0)) {}

331 
	`wrôe_Æl
(
fd_pidfûe
, 
ª∂y_buf
, 
	`°æí
(reply_buf));

332 i‡(
fd_pidfûe
 > 1)

333 
	`˛o£
(
fd_pidfûe
);

336 
‰omÀn
 = (
‰om_addr
);

337 i‡(
timeout
 > 0)

338 
	`Æ¨m
(
timeout
);

339 
ns
 = 
	`ac˚±
(
s
, (
sockaddr
 *Ë&
‰om_addr
, &
‰omÀn
);

340 
	`Æ¨m
(0);

341 i‡(
ns
 < 0) {

342 i‡((
î∫o
 =
EAGAIN
Ë|| (î∫ÿ=
EINTR
))

344 
	`≥º‹
("accept");

345 
	`exô
(1);

347 
Àn
 = 
	`ªad
(
ns
, &
›
, 1);

348 i‡(
Àn
 != 1) {

349 i‡(
Àn
 < 0)

350 
	`≥º‹
("read");

352 
	`¥ötf
(
	`_
("ErrorÑeading from client, "

353 "À¿%d\n"), 
Àn
);

354 
shutdown_sockë
;

356 i‡((
›
 == 4) || (op == 5)) {

357 i‡(
	`ªad_Æl
(
ns
, (*Ë&
num
, (num)) != 4)

358 
shutdown_sockë
;

359 i‡(
debug
)

360 
	`¥ötf
(
	`_
("operation %d, incomingÇum = %d\n"),

361 
›
, 
num
);

362 } i‡(
debug
)

363 
	`¥ötf
("›î©i⁄ %d\n", 
›
);

365 
›
) {

366 
UUIDD_OP_GETPID
:

367 
	`•rötf
(
ª∂y_buf
, "%d", 
	`gëpid
());

368 
ª∂y_Àn
 = 
	`°æí
(
ª∂y_buf
)+1;

370 
UUIDD_OP_GET_MAXOP
:

371 
	`•rötf
(
ª∂y_buf
, "%d", 
UUIDD_MAX_OP
);

372 
ª∂y_Àn
 = 
	`°æí
(
ª∂y_buf
)+1;

374 
UUIDD_OP_TIME_UUID
:

375 
num
 = 1;

376 
	`uuid__gíî©e_time
(
uu
, &
num
);

377 i‡(
debug
) {

378 
	`uuid_u≈¨£
(
uu
, 
°r
);

379 
	`¥ötf
(
	`_
("Gíî©edÅimêUUID: %s\n"), 
°r
);

381 
	`mem˝y
(
ª∂y_buf
, 
uu
, (uu));

382 
ª∂y_Àn
 = (
uu
);

384 
UUIDD_OP_RANDOM_UUID
:

385 
num
 = 1;

386 
	`uuid__gíî©e_øndom
(
uu
, &
num
);

387 i‡(
debug
) {

388 
	`uuid_u≈¨£
(
uu
, 
°r
);

389 
	`¥ötf
(
	`_
("Gíî©edÑ™dom UUID: %s\n"), 
°r
);

391 
	`mem˝y
(
ª∂y_buf
, 
uu
, (uu));

392 
ª∂y_Àn
 = (
uu
);

394 
UUIDD_OP_BULK_TIME_UUID
:

395 
	`uuid__gíî©e_time
(
uu
, &
num
);

396 i‡(
debug
) {

397 
	`uuid_u≈¨£
(
uu
, 
°r
);

398 
	`¥ötf
(
	`_
("GeneratedÅime UUID %sánd %d "

399 "fﬁlowög\n"), 
°r
, 
num
);

401 
	`mem˝y
(
ª∂y_buf
, 
uu
, (uu));

402 
ª∂y_Àn
 = (
uu
);

403 
	`mem˝y
(
ª∂y_buf
+
ª∂y_Àn
, &
num
, (num));

404 
ª∂y_Àn
 +(
num
);

406 
UUIDD_OP_BULK_RANDOM_UUID
:

407 i‡(
num
 < 0)

408 
num
 = 1;

409 i‡(
num
 > 1000)

410 
num
 = 1000;

411 i‡(
num
*16 > (Ë((
ª∂y_buf
)-(num)))

412 
num
 = ((
ª∂y_buf
)-(num)) / 16;

413 
	`uuid__gíî©e_øndom
((*Ë
ª∂y_buf
 +

414 (
num
), &num);

415 i‡(
debug
) {

416 
	`¥ötf
(
	`_
("Gíî©ed %d UUID's:\n"), 
num
);

417 
i
=0, 
˝
=
ª∂y_buf
+(
num
);

418 
i
 < 
num
; i++, 
˝
+=16) {

419 
	`uuid_u≈¨£
((*)
˝
, 
°r
);

420 
	`¥ötf
("\t%s\n", 
°r
);

423 
ª∂y_Àn
 = (
num
*16) + (num);

424 
	`mem˝y
(
ª∂y_buf
, &
num
, (num));

427 i‡(
debug
)

428 
	`¥ötf
(
	`_
("InvÆid o≥øti⁄ %d\n"), 
›
);

429 
shutdown_sockë
;

431 
	`wrôe_Æl
(
ns
, (*Ë&
ª∂y_Àn
, (reply_len));

432 
	`wrôe_Æl
(
ns
, 
ª∂y_buf
, 
ª∂y_Àn
);

433 
shutdown_sockë
:

434 
	`˛o£
(
ns
);

436 
	}
}

438 
	$maö
(
¨gc
, **
¨gv
)

440 c⁄° *
sockë_∑th
 = 
UUIDD_SOCKET_PATH
;

441 c⁄° *
pidfûe_∑th
 = 
UUIDD_PIDFILE_PATH
;

442 c⁄° *
îr_c⁄ãxt
;

443 
buf
[1024], *
˝
;

444 
°r
[37], *
tmp
;

445 
uuid_t
 
uu
;

446 
uid_t
 
uid
;

447 
gid_t
 
gid
;

448 
i
, 
c
, 
ªt
;

449 
debug
 = 0, 
do_ty≥
 = 0, 
do_kûl
 = 0, 
num
 = 0;

450 
timeout
 = 0, 
quõt
 = 0, 
dr›_¥ivs
 = 0;

452 #ifde‡
ENABLE_NLS


453 
	`£éoˇÀ
(
LC_MESSAGES
, "");

454 
	`£éoˇÀ
(
LC_CTYPE
, "");

455 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

456 
	`ãxtdomaö
(
NLS_CAT_NAME
);

459 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "dkn:qp:s:tT:r")Ë!
EOF
) {

460 
c
) {

462 
debug
++;

463 
dr›_¥ivs
 = 1;

466 
do_kûl
++;

467 
dr›_¥ivs
 = 1;

470 
num
 = 
	`°πﬁ
(
›èrg
, &
tmp
, 0);

471 i‡((
num
 < 0Ë|| *
tmp
) {

472 
	`Ârötf
(
°dîr
, 
	`_
("BadÇumbî: %s\n"), 
›èrg
);

473 
	`exô
(1);

476 
pidfûe_∑th
 = 
›èrg
;

477 
dr›_¥ivs
 = 1;

480 
quõt
++;

483 
sockë_∑th
 = 
›èrg
;

484 
dr›_¥ivs
 = 1;

487 
do_ty≥
 = 
UUIDD_OP_TIME_UUID
;

488 
dr›_¥ivs
 = 1;

491 
timeout
 = 
	`°πﬁ
(
›èrg
, &
tmp
, 0);

492 i‡((
timeout
 < 0Ë|| *
tmp
) {

493 
	`Ârötf
(
°dîr
, 
	`_
("BadÇumbî: %s\n"), 
›èrg
);

494 
	`exô
(1);

498 
do_ty≥
 = 
UUIDD_OP_RANDOM_UUID
;

499 
dr›_¥ivs
 = 1;

502 
	`ußge
(
¨gv
[0]);

505 
uid
 = 
	`gëuid
();

506 i‡(
uid
 && 
dr›_¥ivs
) {

507 
gid
 = 
	`gëgid
();

508 #ifde‡
HAVE_SETRESGID


509 i‡(
	`£åesgid
(
gid
, gid, gid) < 0)

510 
	`dõ
("setresgid");

512 i‡(
	`£åegid
(
gid
, gid) < 0)

513 
	`dõ
("setregid");

516 #ifde‡
HAVE_SETRESUID


517 i‡(
	`£åesuid
(
uid
, uid, uid) < 0)

518 
	`dõ
("setresuid");

520 i‡(
	`£åeuid
(
uid
, uid) < 0)

521 
	`dõ
("setreuid");

524 i‡(
num
 && 
do_ty≥
) {

525 
ªt
 = 
	`ˇŒ_d´m⁄
(
sockë_∑th
, 
do_ty≥
+2, 
buf
,

526 (
buf
), &
num
, &
îr_c⁄ãxt
);

527 i‡(
ªt
 < 0) {

528 
	`¥ötf
(
	`_
("Error calling uuidd daemon (%s): %s\n"),

529 
îr_c⁄ãxt
, 
	`°ªº‹
(
î∫o
));

530 
	`exô
(1);

532 i‡(
do_ty≥
 =
UUIDD_OP_TIME_UUID
) {

533 i‡(
ªt
 !(
uu
Ë+ (
num
))

534 
u√x≥˘ed_size
;

536 
	`uuid_u≈¨£
((*Ë
buf
, 
°r
);

538 
	`¥ötf
(
	`_
("%†™d sub£quíà%d UUID's\n"), 
°r
, 
num
);

540 
	`¥ötf
(
	`_
("List of UUID's:\n"));

541 
˝
 = 
buf
 + 4;

542 i‡(
ªt
 !(Ë((
num
Ë+Çum*(
uu
)))

543 
u√x≥˘ed_size
;

544 
i
=0; i < 
num
; i++, 
˝
+=16) {

545 
	`uuid_u≈¨£
((*Ë
˝
, 
°r
);

546 
	`¥ötf
("\t%s\n", 
°r
);

549 
	`exô
(0);

551 i‡(
do_ty≥
) {

552 
ªt
 = 
	`ˇŒ_d´m⁄
(
sockë_∑th
, 
do_ty≥
, (*Ë&
uu
,

553 (
uu
), 0, &
îr_c⁄ãxt
);

554 i‡(
ªt
 < 0) {

555 
	`¥ötf
(
	`_
("Error calling uuidd daemon (%s): %s\n"),

556 
îr_c⁄ãxt
, 
	`°ªº‹
(
î∫o
));

557 
	`exô
(1);

559 i‡(
ªt
 !(
uu
)) {

560 
u√x≥˘ed_size
:

561 
	`¥ötf
(
	`_
("UnexpectedÑeplyÜength from server %d\n"),

562 
ªt
);

563 
	`exô
(1);

565 
	`uuid_u≈¨£
(
uu
, 
°r
);

567 
	`¥ötf
("%s\n", 
°r
);

568 
	`exô
(0);

571 i‡(
do_kûl
) {

572 
ªt
 = 
	`ˇŒ_d´m⁄
(
sockë_∑th
, 0, 
buf
, (buf), 0, 0);

573 i‡((
ªt
 > 0Ë&& ((
do_kûl
 = 
	`©oi
((*Ë
buf
)) > 0)) {

574 
ªt
 = 
	`kûl
(
do_kûl
, 
SIGTERM
);

575 i‡(
ªt
 < 0) {

576 i‡(!
quõt
)

577 
	`Ârötf
(
°dîr
,

578 
	`_
("Couldn't kill uuiddÑunning "

579 "©Öid %d: %s\n"), 
do_kûl
,

580 
	`°ªº‹
(
î∫o
));

581 
	`exô
(1);

583 i‡(!
quõt
)

584 
	`¥ötf
(
	`_
("Killed uuiddÑunningátÖid %d\n"),

585 
do_kûl
);

587 
	`exô
(0);

590 
	`£rvî_lo›
(
sockë_∑th
, 
pidfûe_∑th
, 
debug
, 
timeout
, 
quõt
);

592 
	}
}

	@uuidgen.c

12 
	~<°dio.h
>

13 #ifde‡
HAVE_STDLIB_H


14 
	~<°dlib.h
>

16 #ifde‡
HAVE_GETOPT_H


17 
	~<gë›t.h
>

19 
gë›t
(
¨gc
, * c⁄° 
¨gv
[], c⁄° *
›t°rög
);

20 *
›èrg
;

21 
›töd
;

23 
	~"uuid/uuid.h
"

24 
	~"∆s-íabÀ.h
"

26 
	#DO_TYPE_TIME
 1

	)

27 
	#DO_TYPE_RANDOM
 2

	)

29 
	$ußge
(c⁄° *
¥og«me
)

31 
	`Ârötf
(
°dîr
, 
	`_
("Ußge: %†[-r] [-t]\n"), 
¥og«me
);

32 
	`exô
(1);

33 
	}
}

36 
	$maö
 (
¨gc
, *
¨gv
[])

38 
c
;

39 
do_ty≥
 = 0;

40 
°r
[37];

41 
uuid_t
 
uu
;

43 #ifde‡
ENABLE_NLS


44 
	`£éoˇÀ
(
LC_MESSAGES
, "");

45 
	`£éoˇÀ
(
LC_CTYPE
, "");

46 
	`bödãxtdomaö
(
NLS_CAT_NAME
, 
LOCALEDIR
);

47 
	`ãxtdomaö
(
NLS_CAT_NAME
);

50 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "å")Ë!
EOF
)

51 
c
) {

53 
do_ty≥
 = 
DO_TYPE_TIME
;

56 
do_ty≥
 = 
DO_TYPE_RANDOM
;

59 
	`ußge
(
¨gv
[0]);

62 
do_ty≥
) {

63 
DO_TYPE_TIME
:

64 
	`uuid_gíî©e_time
(
uu
);

66 
DO_TYPE_RANDOM
:

67 
	`uuid_gíî©e_øndom
(
uu
);

70 
	`uuid_gíî©e
(
uu
);

74 
	`uuid_u≈¨£
(
uu
, 
°r
);

76 
	`¥ötf
("%s\n", 
°r
);

79 
	}
}

	@../version.h

10 
	#E2FSPROGS_VERSION
 "1.41.14-√xt3-1.0.13-7"

	)

11 
	#E2FSPROGS_DATE
 "27-A¥-2011"

	)

	@/usr/include/blkid/blkid.h

13 #i‚de‡
_BLKID_BLKID_H


14 
	#_BLKID_BLKID_H


	)

16 
	~<sys/ty≥s.h
>

17 
	~<blkid/blkid_ty≥s.h
>

19 #ifde‡
__˝lu•lus


23 
	#BLKID_VERSION
 "1.0.0"

	)

24 
	#BLKID_DATE
 "12-Feb-2003"

	)

26 
blkid_°ru˘_dev
 *
	tblkid_dev
;

27 
blkid_°ru˘_ˇche
 *
	tblkid_ˇche
;

28 
__s64
 
	tblkid_loff_t
;

30 
blkid_°ru˘_èg_ôî©e
 *
	tblkid_èg_ôî©e
;

31 
blkid_°ru˘_dev_ôî©e
 *
	tblkid_dev_ôî©e
;

45 
	#BLKID_DEV_FIND
 0x0000

	)

46 
	#BLKID_DEV_CREATE
 0x0001

	)

47 
	#BLKID_DEV_VERIFY
 0x0002

	)

48 
	#BLKID_DEV_NORMAL
 (
BLKID_DEV_CREATE
 | 
BLKID_DEV_VERIFY
)

	)

51 
blkid_put_ˇche
(
blkid_ˇche
 
ˇche
);

52 
blkid_gë_ˇche
(
blkid_ˇche
 *
ˇche
, c⁄° *
fûíame
);

53 
blkid_gc_ˇche
(
blkid_ˇche
 
ˇche
);

56 c⁄° *
blkid_dev_dev«me
(
blkid_dev
 
dev
);

58 
blkid_dev_ôî©e
 
blkid_dev_ôî©e_begö
(
blkid_ˇche
 
ˇche
);

59 
blkid_dev_£t_£¨ch
(
blkid_dev_ôî©e
 
ôî
,

60 *
£¨ch_ty≥
, *
£¨ch_vÆue
);

61 
blkid_dev_√xt
(
blkid_dev_ôî©e
 
ôî©e
, 
blkid_dev
 *
dev
);

62 
blkid_dev_ôî©e_íd
(
blkid_dev_ôî©e
 
ôî©e
);

65 *
blkid_devno_to_dev«me
(
dev_t
 
devno
);

68 
blkid_¥obe_Æl
(
blkid_ˇche
 
ˇche
);

69 
blkid_¥obe_Æl_√w
(
blkid_ˇche
 
ˇche
);

70 
blkid_dev
 
blkid_gë_dev
(
blkid_ˇche
 
ˇche
, c⁄° *
dev«me
,

71 
Êags
);

74 
blkid_loff_t
 
blkid_gë_dev_size
(
fd
);

77 
blkid_known_f°y≥
(c⁄° *
f°y≥
);

78 
blkid_dev
 
blkid_vîify
(
blkid_ˇche
 
ˇche
, blkid_dev 
dev
);

83 *
blkid_gë_èg_vÆue
(
blkid_ˇche
 
ˇche
, c⁄° *
èg«me
,

84 c⁄° *
dev«me
);

85 *
blkid_gë_dev«me
(
blkid_ˇche
 
ˇche
, c⁄° *
tokí
,

86 c⁄° *
vÆue
);

89 
blkid_èg_ôî©e
 
blkid_èg_ôî©e_begö
(
blkid_dev
 
dev
);

90 
blkid_èg_√xt
(
blkid_èg_ôî©e
 
ôî©e
,

91 c⁄° **
ty≥
, c⁄° **
vÆue
);

92 
blkid_èg_ôî©e_íd
(
blkid_èg_ôî©e
 
ôî©e
);

93 
blkid_dev_has_èg
(
blkid_dev
 
dev
, c⁄° *
ty≥
,

94 c⁄° *
vÆue
);

95 
blkid_dev
 
blkid_föd_dev_wôh_èg
(
blkid_ˇche
 
ˇche
,

96 c⁄° *
ty≥
,

97 c⁄° *
vÆue
);

98 
blkid_∑r£_èg_°rög
(c⁄° *
tokí
, **
ªt_ty≥
,

99 **
ªt_vÆ
);

102 
blkid_∑r£_vîsi⁄_°rög
(c⁄° *
vî_°rög
);

103 
blkid_gë_libøry_vîsi⁄
(c⁄° **
vî_°rög
,

104 c⁄° **
d©e_°rög
);

106 #ifde‡
__˝lu•lus


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

251 #i‚de‡
__USE_FILE_OFFSET64


252 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

253 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

254 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

255 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

256 
__c⁄°
 
dúít
 **))

257 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__REDIRECT


260 
	`__REDIRECT
 (
sˇndú
,

261 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

262 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

263 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

264 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

265 
__c⁄°
 
dúít
 **)),

266 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

268 
	#sˇndú
 
sˇndú64


	)

272 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


275 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

276 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

277 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

278 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

279 
__c⁄°
 
dúít64
 **))

280 
	`__n⁄nuŒ
 ((1, 2));

284 #i‚de‡
__USE_FILE_OFFSET64


285 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

286 
__c⁄°
 
dúít
 **
__e2
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT_NTH
 (
Æphas‹t
,

291 (
__c⁄°
 
dúít
 **
__e1
,

292 
__c⁄°
 
dúít
 **
__e2
),

293 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 
	#Æphas‹t
 
Æphas‹t64


	)

299 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


300 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

301 
__c⁄°
 
dúít64
 **
__e2
)

302 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

307 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


312 #i‚de‡
__USE_FILE_OFFSET64


313 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

314 
size_t
 
__nbyãs
,

315 
__off_t
 *
__ª°ri˘
 
__ba£p
)

316 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

318 #ifde‡
__REDIRECT


319 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

320 (
__fd
, *
__ª°ri˘
 
__buf
,

321 
size_t
 
__nbyãs
,

322 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

323 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

325 
	#gëdúíåõs
 
gëdúíåõs64


	)

329 #ifde‡
__USE_LARGEFILE64


330 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

331 
size_t
 
__nbyãs
,

332 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

333 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

337 #ifde‡
__USE_GNU


339 #i‚de‡
__USE_FILE_OFFSET64


340 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

341 
__c⁄°
 
dúít
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 #ifde‡
__REDIRECT


345 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

346 (
__c⁄°
 
dúít
 **
__e1
,

347 
__c⁄°
 
dúít
 **
__e2
),

348 
vîsi⁄s‹t64
)

349 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

351 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

355 #ifde‡
__USE_LARGEFILE64


356 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

357 
__c⁄°
 
dúít64
 **
__e2
)

358 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

362 
__END_DECLS


	@/usr/include/e2p/e2p.h

1 
	~<sys/ty≥s.h
>

2 
	~<°dio.h
>

3 
	~<dúít.h
>

5 
	~<ext2fs/ext2_fs.h
>

7 
	#E2P_FEATURE_COMPAT
 0

	)

8 
	#E2P_FEATURE_INCOMPAT
 1

	)

9 
	#E2P_FEATURE_RO_INCOMPAT
 2

	)

10 
	#E2P_FEATURE_TYPE_MASK
 0x03

	)

12 
	#E2P_FEATURE_NEGATE_FLAG
 0x80

	)

14 
	#E2P_FS_FEATURE
 0

	)

15 
	#E2P_JOURNAL_FEATURE
 1

	)

19 
	#PFOPT_LONG
 1

	)

22 
fgëÊags
 (c⁄° * 
«me
, * 
Êags
);

23 
fgëvîsi⁄
 (c⁄° * 
«me
, * 
vîsi⁄
);

24 
f£tÊags
 (c⁄° * 
«me
, 
Êags
);

25 
f£tvîsi⁄
 (c⁄° * 
«me
, 
vîsi⁄
);

26 
gëÊags
 (
fd
, * 
Êags
);

27 
gëvîsi⁄
 (
fd
, * 
vîsi⁄
);

28 
ôî©e_⁄_dú
 (c⁄° * 
dú_«me
,

29 (*
func
Ë(c⁄° *, 
dúít
 *, *),

30 * 
¥iv©e
);

31 
	`li°_su≥r
(
ext2_su≥r_block
 * 
s
);

32 
	`li°_su≥r2
(
ext2_su≥r_block
 * 
s
, 
FILE
 *
f
);

33 
	`¥öt_fs_îr‹s
 (
FILE
 * 
f
, 
îr‹s
);

34 
	`¥öt_Êags
 (
FILE
 * 
f
, 
Êags
, 
›ti⁄s
);

35 
	`¥öt_fs_°©e
 (
FILE
 * 
f
, 
°©e
);

36 
	`£tÊags
 (
fd
, 
Êags
);

37 
	`£tvîsi⁄
 (
fd
, 
vîsi⁄
);

39 c⁄° *
	`e2p_„©uª2°rög
(
com∑t
, 
mask
);

40 c⁄° *
	`e2p_j∫l_„©uª2°rög
(
com∑t
, 
mask
);

41 
	`e2p_°rög2„©uª
(*
°rög
, *
com∑t
, *
mask
);

42 
	`e2p_j∫l_°rög2„©uª
(*
°rög
, *
com∑t_ty≥
, *
mask
);

43 
	`e2p_edô_„©uª
(c⁄° *
°r
, 
__u32
 *
com∑t_¨øy
, __u32 *
ok_¨øy
);

44 
	`e2p_edô_„©uª2
(c⁄° *
°r
, 
__u32
 *
com∑t_¨øy
, __u32 *
ok_¨øy
,

45 
__u32
 *
˛ór_ok_¨øy
, *
ty≥_îr
,

46 *
mask_îr
);

48 
	`e2p_is_nuŒ_uuid
(*
uu
);

49 
	`e2p_uuid_to_°r
(*
uu
, *
out
);

50 c⁄° *
	`e2p_uuid2°r
(*
uu
);

52 c⁄° *
	`e2p_hash2°rög
(
num
);

53 
	`e2p_°rög2hash
(*
°rög
);

55 c⁄° *
	`e2p_m¡›t2°rög
(
mask
);

56 
	`e2p_°rög2m¡›t
(*
°rög
, *
mask
);

57 
	`e2p_edô_m¡›ts
(c⁄° *
°r
, 
__u32
 *
m¡›ts
, __u32 
ok
);

59 
	`∑r£_num_blocks
(c⁄° *
¨g
, 
log_block_size
);

61 *
	`e2p_os2°rög
(
os_ty≥
);

62 
	`e2p_°rög2os
(*
°r
);

64 
	`e2p_≥r˚¡
(
≥r˚¡
, 
ba£
);

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/et/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

47 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

48 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

49 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

52 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

53 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

54 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

55 c⁄° **
mesßges
,

56 
num_îr‹s
,

57 
ba£
);

58 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

61 
	`ë_li°_lock
();

62 
	`ë_li°_u∆ock
();

64 
	#__COM_ERR_H


	)

65 
	#__COM_ERR_H__


	)

	@/usr/include/ext2fs/ext2_fs.h

16 #i‚de‡
_LINUX_EXT2_FS_H


17 
	#_LINUX_EXT2_FS_H


	)

19 
	~<ext2fs/ext2_ty≥s.h
>

28 #unde‡
EXT2FS_DEBUG


33 
	#EXT2_PREALLOCATE


	)

34 
	#EXT2_DEFAULT_PREALLOC_BLOCKS
 8

	)

39 
	#EXT2FS_DATE
 "95/08/09"

	)

40 
	#EXT2FS_VERSION
 "0.5b"

	)

45 
	#EXT2_BAD_INO
 1

	)

46 
	#EXT2_ROOT_INO
 2

	)

47 
	#EXT2_ACL_IDX_INO
 3

	)

48 
	#EXT2_ACL_DATA_INO
 4

	)

49 
	#EXT2_BOOT_LOADER_INO
 5

	)

50 
	#EXT2_UNDEL_DIR_INO
 6

	)

51 
	#EXT2_RESIZE_INO
 7

	)

52 
	#EXT2_JOURNAL_INO
 8

	)

55 
	#EXT2_GOOD_OLD_FIRST_INO
 11

	)

60 
	#EXT2_SUPER_MAGIC
 0xEF53

	)

62 #ifde‡
__KERNEL__


63 
	#EXT2_SB
(
sb
Ë(&((sb)->
u
.
ext2_sb
))

	)

68 
	#EXT2_SB
(
sb
Ë(sb)

	)

74 
	#EXT2_LINK_MAX
 65000

	)

79 
	#EXT2_MIN_BLOCK_LOG_SIZE
 10

	)

80 
	#EXT2_MAX_BLOCK_LOG_SIZE
 16

	)

81 
	#EXT2_MIN_BLOCK_SIZE
 (1 << 
EXT2_MIN_BLOCK_LOG_SIZE
)

	)

82 
	#EXT2_MAX_BLOCK_SIZE
 (1 << 
EXT2_MAX_BLOCK_LOG_SIZE
)

	)

83 #ifde‡
__KERNEL__


84 
	#EXT2_BLOCK_SIZE
(
s
Ë((s)->
s_blocksize
)

	)

85 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_blocksize_bôs
)

	)

86 
	#EXT2_ADDR_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
addr_≥r_block_bôs
)

	)

87 
	#EXT2_INODE_SIZE
(
s
Ë(
	`EXT2_SB
(s)->
s_öode_size
)

	)

88 
	#EXT2_FIRST_INO
(
s
Ë(
	`EXT2_SB
(s)->
s_fú°_öo
)

	)

90 
	#EXT2_BLOCK_SIZE
(
s
Ë(
EXT2_MIN_BLOCK_SIZE
 << (s)->
s_log_block_size
)

	)

91 
	#EXT2_BLOCK_SIZE_BITS
(
s
Ë((s)->
s_log_block_size
 + 10)

	)

92 
	#EXT2_INODE_SIZE
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

93 
EXT2_GOOD_OLD_INODE_SIZE
 : (
s
)->
s_öode_size
)

	)

94 
	#EXT2_FIRST_INO
(
s
Ë(((s)->
s_ªv_Àvñ
 =
EXT2_GOOD_OLD_REV
) ? \

95 
EXT2_GOOD_OLD_FIRST_INO
 : (
s
)->
s_fú°_öo
)

	)

97 
	#EXT2_ADDR_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ (
__u32
))

	)

102 
	#EXT2_MIN_FRAG_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

103 
	#EXT2_MAX_FRAG_SIZE
 
EXT2_MAX_BLOCK_SIZE


	)

104 
	#EXT2_MIN_FRAG_LOG_SIZE
 
EXT2_MIN_BLOCK_LOG_SIZE


	)

105 #ifde‡
__KERNEL__


106 
	#EXT2_FRAG_SIZE
(
s
Ë(
	`EXT2_SB
(s)->
s_‰ag_size
)

	)

107 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT2_SB
(s)->
s_‰ags_≥r_block
)

	)

109 
	#EXT2_FRAG_SIZE
(
s
Ë(
EXT2_MIN_FRAG_SIZE
 << (s)->
s_log_‰ag_size
)

	)

110 
	#EXT2_FRAGS_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_FRAG_SIZE
(s))

	)

116 
	sext2_a˛_hódî


118 
__u32
 
	ma˛h_size
;

119 
__u32
 
	ma˛h_fûe_cou¡
;

120 
__u32
 
	ma˛h_a˛e_cou¡
;

121 
__u32
 
	ma˛h_fú°_a˛e
;

124 
	sext2_a˛_íåy


126 
__u32
 
	ma˛e_size
;

127 
__u16
 
	ma˛e_≥rms
;

128 
__u16
 
	ma˛e_ty≥
;

129 
__u16
 
	ma˛e_èg
;

130 
__u16
 
	ma˛e_∑d1
;

131 
__u32
 
	ma˛e_√xt
;

138 
	sext2_group_desc


140 
__u32
 
	mbg_block_bôm≠
;

141 
__u32
 
	mbg_öode_bôm≠
;

142 
__u32
 
	mbg_öode_èbÀ
;

143 
__u16
 
	mbg_‰ì_blocks_cou¡
;

144 
__u16
 
	mbg_‰ì_öodes_cou¡
;

145 
__u16
 
	mbg_u£d_dús_cou¡
;

146 
__u16
 
	mbg_Êags
;

147 
__u32
 
	mbg_ª£rved
[2];

148 
__u16
 
	mbg_ôabÀ_unu£d
;

149 
__u16
 
	mbg_checksum
;

152 
	sext4_group_desc


154 
__u32
 
	mbg_block_bôm≠
;

155 
__u32
 
	mbg_öode_bôm≠
;

156 
__u32
 
	mbg_öode_èbÀ
;

157 
__u16
 
	mbg_‰ì_blocks_cou¡
;

158 
__u16
 
	mbg_‰ì_öodes_cou¡
;

159 
__u16
 
	mbg_u£d_dús_cou¡
;

160 
__u16
 
	mbg_Êags
;

161 
__u32
 
	mbg_ª£rved
[2];

162 
__u16
 
	mbg_ôabÀ_unu£d
;

163 
__u16
 
	mbg_checksum
;

164 
__u32
 
	mbg_block_bôm≠_hi
;

165 
__u32
 
	mbg_öode_bôm≠_hi
;

166 
__u32
 
	mbg_öode_èbÀ_hi
;

167 
__u16
 
	mbg_‰ì_blocks_cou¡_hi
;

168 
__u16
 
	mbg_‰ì_öodes_cou¡_hi
;

169 
__u16
 
	mbg_u£d_dús_cou¡_hi
;

170 
__u16
 
	mbg_∑d
;

171 
__u32
 
	mbg_ª£rved2
[3];

174 
	#EXT2_BG_INODE_UNINIT
 0x0001

	)

175 
	#EXT2_BG_BLOCK_UNINIT
 0x0002

	)

176 
	#EXT2_BG_INODE_ZEROED
 0x0004

	)

190 
	sext2_dx_roŸ_öfo
 {

191 
__u32
 
	mª£rved_zîo
;

192 
__u8
 
	mhash_vîsi⁄
;

193 
__u8
 
	möfo_Àngth
;

194 
__u8
 
	mödúe˘_Àvñs
;

195 
__u8
 
	munu£d_Êags
;

198 
	#EXT2_HASH_LEGACY
 0

	)

199 
	#EXT2_HASH_HALF_MD4
 1

	)

200 
	#EXT2_HASH_TEA
 2

	)

201 
	#EXT2_HASH_LEGACY_UNSIGNED
 3

	)

202 
	#EXT2_HASH_HALF_MD4_UNSIGNED
 4

	)

203 
	#EXT2_HASH_TEA_UNSIGNED
 5

	)

205 
	#EXT2_HASH_FLAG_INCOMPAT
 0x1

	)

207 
	sext2_dx_íåy
 {

208 
__u32
 
	mhash
;

209 
__u32
 
	mblock
;

212 
	sext2_dx_cou¡limô
 {

213 
__u16
 
	mlimô
;

214 
__u16
 
	mcou¡
;

221 
	#EXT2_MIN_DESC_SIZE
 32

	)

222 
	#EXT2_MIN_DESC_SIZE_64BIT
 64

	)

223 
	#EXT2_MAX_DESC_SIZE
 
EXT2_MIN_BLOCK_SIZE


	)

224 
	#EXT2_DESC_SIZE
(
s
) \

225 ((
	`EXT2_SB
(
s
)->
s_„©uª_öcom∑t
 & 
EXT4_FEATURE_INCOMPAT_64BIT
) ? \

226 (
s
)->
s_desc_size
 : 
EXT2_MIN_DESC_SIZE
)

	)

228 
	#EXT2_BLOCKS_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_blocks_≥r_group
)

	)

229 
	#EXT2_INODES_PER_GROUP
(
s
Ë(
	`EXT2_SB
(s)->
s_öodes_≥r_group
)

	)

230 
	#EXT2_INODES_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(s)/
	`EXT2_INODE_SIZE
(s))

	)

232 
	#EXT2_MAX_BLOCKS_PER_GROUP
(
s
Ë((1 << 16Ë- 8)

	)

233 
	#EXT2_MAX_INODES_PER_GROUP
(
s
Ë((1 << 16Ë- 
	`EXT2_INODES_PER_BLOCK
(s))

	)

234 #ifde‡
__KERNEL__


235 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block
)

	)

236 
	#EXT2_DESC_PER_BLOCK_BITS
(
s
Ë(
	`EXT2_SB
(s)->
s_desc_≥r_block_bôs
)

	)

238 
	#EXT2_DESC_PER_BLOCK
(
s
Ë(
	`EXT2_BLOCK_SIZE
(sË/ 
	`EXT2_DESC_SIZE
(s))

	)

244 
	#EXT2_NDIR_BLOCKS
 12

	)

245 
	#EXT2_IND_BLOCK
 
EXT2_NDIR_BLOCKS


	)

246 
	#EXT2_DIND_BLOCK
 (
EXT2_IND_BLOCK
 + 1)

	)

247 
	#EXT2_TIND_BLOCK
 (
EXT2_DIND_BLOCK
 + 1)

	)

248 
	#EXT2_N_BLOCKS
 (
EXT2_TIND_BLOCK
 + 1)

	)

253 
	#EXT2_SECRM_FL
 0x00000001

	)

254 
	#EXT2_UNRM_FL
 0x00000002

	)

255 
	#EXT2_COMPR_FL
 0x00000004

	)

256 
	#EXT2_SYNC_FL
 0x00000008

	)

257 
	#EXT2_IMMUTABLE_FL
 0x00000010

	)

258 
	#EXT2_APPEND_FL
 0x00000020

	)

259 
	#EXT2_NODUMP_FL
 0x00000040

	)

260 
	#EXT2_NOATIME_FL
 0x00000080

	)

262 
	#EXT2_DIRTY_FL
 0x00000100

	)

263 
	#EXT2_COMPRBLK_FL
 0x00000200

	)

264 
	#EXT2_NOCOMPR_FL
 0x00000400

	)

265 
	#EXT2_ECOMPR_FL
 0x00000800

	)

267 
	#EXT2_BTREE_FL
 0x00001000

	)

268 
	#EXT2_INDEX_FL
 0x00001000

	)

269 
	#EXT2_IMAGIC_FL
 0x00002000

	)

270 
	#EXT3_JOURNAL_DATA_FL
 0x00004000

	)

271 
	#EXT2_NOTAIL_FL
 0x00008000

	)

272 
	#EXT2_DIRSYNC_FL
 0x00010000

	)

273 
	#EXT2_TOPDIR_FL
 0x00020000

	)

274 
	#EXT4_HUGE_FILE_FL
 0x00040000

	)

275 
	#EXT4_EXTENTS_FL
 0x00080000

	)

276 
	#EXT4_EOFBLOCKS_FL
 0x00400000

	)

277 
	#EXT2_RESERVED_FL
 0x80000000

	)

279 
	#EXT2_FL_USER_VISIBLE
 0x004BDFFF

	)

280 
	#EXT2_FL_USER_MODIFIABLE
 0x004B80FF

	)

287 
	sext2_√w_group_öput
 {

288 
__u32
 
	mgroup
;

289 
__u32
 
	mblock_bôm≠
;

290 
__u32
 
	möode_bôm≠
;

291 
__u32
 
	möode_èbÀ
;

292 
__u32
 
	mblocks_cou¡
;

293 
__u16
 
	mª£rved_blocks
;

294 
__u16
 
	munu£d
;

297 
	sext4_√w_group_öput
 {

298 
__u32
 
	mgroup
;

299 
__u64
 
	mblock_bôm≠
;

300 
__u64
 
	möode_bôm≠
;

301 
__u64
 
	möode_èbÀ
;

302 
__u32
 
	mblocks_cou¡
;

303 
__u16
 
	mª£rved_blocks
;

304 
__u16
 
	munu£d
;

307 #ifde‡
__GNU__


308 
	#_IOT_ext2_√w_group_öput
 
	`_IOT
 (
	`_IOTS
(
__u32
), 5, _IOTS(
__u16
), 2, 0, 0)

	)

311 
	#EXT2_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

312 
	#EXT2_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

313 
	#EXT2_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

314 
	#EXT2_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

315 
	#EXT2_IOC_GETVERSION_NEW
 
	`_IOR
('f', 3, )

	)

316 
	#EXT2_IOC_SETVERSION_NEW
 
	`_IOW
('f', 4, )

	)

317 
	#EXT2_IOC_GROUP_EXTEND
 
	`_IOW
('f', 7, )

	)

318 
	#EXT2_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext2_√w_group_öput
)

	)

319 
	#EXT4_IOC_GROUP_ADD
 
	`_IOW
('f', 8,
ext4_√w_group_öput
)

	)

324 
	sext2_öode
 {

325 
__u16
 
	mi_mode
;

326 
__u16
 
	mi_uid
;

327 
__u32
 
	mi_size
;

328 
__u32
 
	mi_©ime
;

329 
__u32
 
	mi_˘ime
;

330 
__u32
 
	mi_mtime
;

331 
__u32
 
	mi_dtime
;

332 
__u16
 
	mi_gid
;

333 
__u16
 
	mi_löks_cou¡
;

334 
__u32
 
	mi_blocks
;

335 
__u32
 
	mi_Êags
;

338 
__u32
 
	ml_i_vîsi⁄
;

339 } 
	mlöux1
;

341 
__u32
 
	mh_i_å™¶©‹
;

342 } 
	mhurd1
;

343 } 
	mosd1
;

344 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

345 
__u32
 
	mi_gíî©i⁄
;

346 
__u32
 
	mi_fûe_a˛
;

347 
__u32
 
	mi_dú_a˛
;

348 
__u32
 
	mi_Áddr
;

351 
__u16
 
	ml_i_blocks_hi
;

352 
__u16
 
	ml_i_fûe_a˛_high
;

353 
__u16
 
	ml_i_uid_high
;

354 
__u16
 
	ml_i_gid_high
;

355 
__u32
 
	ml_i_ª£rved2
;

356 } 
	mlöux2
;

358 
__u8
 
	mh_i_‰ag
;

359 
__u8
 
	mh_i_fsize
;

360 
__u16
 
	mh_i_mode_high
;

361 
__u16
 
	mh_i_uid_high
;

362 
__u16
 
	mh_i_gid_high
;

363 
__u32
 
	mh_i_auth‹
;

364 } 
	mhurd2
;

365 } 
	mosd2
;

371 
	sext2_öode_œrge
 {

372 
__u16
 
	mi_mode
;

373 
__u16
 
	mi_uid
;

374 
__u32
 
	mi_size
;

375 
__u32
 
	mi_©ime
;

376 
__u32
 
	mi_˘ime
;

377 
__u32
 
	mi_mtime
;

378 
__u32
 
	mi_dtime
;

379 
__u16
 
	mi_gid
;

380 
__u16
 
	mi_löks_cou¡
;

381 
__u32
 
	mi_blocks
;

382 
__u32
 
	mi_Êags
;

385 
__u32
 
	ml_i_vîsi⁄
;

386 } 
	mlöux1
;

388 
__u32
 
	mh_i_å™¶©‹
;

389 } 
	mhurd1
;

390 } 
	mosd1
;

391 
__u32
 
	mi_block
[
EXT2_N_BLOCKS
];

392 
__u32
 
	mi_gíî©i⁄
;

393 
__u32
 
	mi_fûe_a˛
;

394 
__u32
 
	mi_dú_a˛
;

395 
__u32
 
	mi_Áddr
;

398 
__u16
 
	ml_i_blocks_hi
;

399 
__u16
 
	ml_i_fûe_a˛_high
;

400 
__u16
 
	ml_i_uid_high
;

401 
__u16
 
	ml_i_gid_high
;

402 
__u32
 
	ml_i_ª£rved2
;

403 } 
	mlöux2
;

405 
__u8
 
	mh_i_‰ag
;

406 
__u8
 
	mh_i_fsize
;

407 
__u16
 
	mh_i_mode_high
;

408 
__u16
 
	mh_i_uid_high
;

409 
__u16
 
	mh_i_gid_high
;

410 
__u32
 
	mh_i_auth‹
;

411 } 
	mhurd2
;

412 } 
	mosd2
;

413 
__u16
 
	mi_exåa_isize
;

414 
__u16
 
	mi_∑d1
;

415 
__u32
 
	mi_˘ime_exåa
;

416 
__u32
 
	mi_mtime_exåa
;

417 
__u32
 
	mi_©ime_exåa
;

418 
__u32
 
	mi_¸time
;

419 
__u32
 
	mi_¸time_exåa
;

420 
__u32
 
	mi_vîsi⁄_hi
;

423 
	#i_size_high
 
i_dú_a˛


	)

425 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__löux__
)

426 
	#i_ª£rved1
 
osd1
.
löux1
.
l_i_ª£rved1


	)

427 
	#i_‰ag
 
osd2
.
löux2
.
l_i_‰ag


	)

428 
	#i_fsize
 
osd2
.
löux2
.
l_i_fsize


	)

429 
	#i_uid_low
 
i_uid


	)

430 
	#i_gid_low
 
i_gid


	)

431 
	#i_uid_high
 
osd2
.
löux2
.
l_i_uid_high


	)

432 
	#i_gid_high
 
osd2
.
löux2
.
l_i_gid_high


	)

433 
	#i_ª£rved2
 
osd2
.
löux2
.
l_i_ª£rved2


	)

435 #i‡
deföed
(
__GNU__
)

437 
	#i_å™¶©‹
 
osd1
.
hurd1
.
h_i_å™¶©‹


	)

438 
	#i_‰ag
 
osd2
.
hurd2
.
h_i_‰ag
;

	)

439 
	#i_fsize
 
osd2
.
hurd2
.
h_i_fsize
;

	)

440 
	#i_uid_high
 
osd2
.
hurd2
.
h_i_uid_high


	)

441 
	#i_gid_high
 
osd2
.
hurd2
.
h_i_gid_high


	)

442 
	#i_auth‹
 
osd2
.
hurd2
.
h_i_auth‹


	)

447 
	#öode_uid
(
öode
Ë((öode).
i_uid
 | (öode).
osd2
.
löux2
.
l_i_uid_high
 << 16)

	)

448 
	#öode_gid
(
öode
Ë((öode).
i_gid
 | (öode).
osd2
.
löux2
.
l_i_gid_high
 << 16)

	)

449 
	#ext2fs_£t_i_uid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_uid_high
 = (x))

	)

450 
	#ext2fs_£t_i_gid_high
(
öode
,
x
Ë((öode).
osd2
.
löux2
.
l_i_gid_high
 = (x))

	)

455 
	#EXT2_VALID_FS
 0x0001

	)

456 
	#EXT2_ERROR_FS
 0x0002

	)

457 
	#EXT3_ORPHAN_FS
 0x0004

	)

462 
	#EXT2_FLAGS_SIGNED_HASH
 0x0001

	)

463 
	#EXT2_FLAGS_UNSIGNED_HASH
 0x0002

	)

464 
	#EXT2_FLAGS_TEST_FILESYS
 0x0004

	)

469 
	#EXT2_MOUNT_CHECK
 0x0001

	)

470 
	#EXT2_MOUNT_GRPID
 0x0004

	)

471 
	#EXT2_MOUNT_DEBUG
 0x0008

	)

472 
	#EXT2_MOUNT_ERRORS_CONT
 0x0010

	)

473 
	#EXT2_MOUNT_ERRORS_RO
 0x0020

	)

474 
	#EXT2_MOUNT_ERRORS_PANIC
 0x0040

	)

475 
	#EXT2_MOUNT_MINIX_DF
 0x0080

	)

476 
	#EXT2_MOUNT_NO_UID32
 0x0200

	)

478 
	#˛ór_›t
(
o
, 
›t
Ëÿ&~
EXT2_MOUNT_
##
	)
opt

479 
	#£t_›t
(
o
, 
›t
Ëÿ|
EXT2_MOUNT_
##
	)
opt

480 
	#ã°_›t
(
sb
, 
›t
Ë(
	`EXT2_SB
(sb)->
s_mou¡_›t
 & \

481 
EXT2_MOUNT_
##
›t
)

	)

485 
	#EXT2_DFL_MAX_MNT_COUNT
 20

	)

486 
	#EXT2_DFL_CHECKINTERVAL
 0

	)

491 
	#EXT2_ERRORS_CONTINUE
 1

	)

492 
	#EXT2_ERRORS_RO
 2

	)

493 
	#EXT2_ERRORS_PANIC
 3

	)

494 
	#EXT2_ERRORS_DEFAULT
 
EXT2_ERRORS_CONTINUE


	)

499 
	sext2_su≥r_block
 {

500 
__u32
 
	ms_öodes_cou¡
;

501 
__u32
 
	ms_blocks_cou¡
;

502 
__u32
 
	ms_r_blocks_cou¡
;

503 
__u32
 
	ms_‰ì_blocks_cou¡
;

504 
__u32
 
	ms_‰ì_öodes_cou¡
;

505 
__u32
 
	ms_fú°_d©a_block
;

506 
__u32
 
	ms_log_block_size
;

507 
__s32
 
	ms_log_‰ag_size
;

508 
__u32
 
	ms_blocks_≥r_group
;

509 
__u32
 
	ms_‰ags_≥r_group
;

510 
__u32
 
	ms_öodes_≥r_group
;

511 
__u32
 
	ms_mtime
;

512 
__u32
 
	ms_wtime
;

513 
__u16
 
	ms_m¡_cou¡
;

514 
__s16
 
	ms_max_m¡_cou¡
;

515 
__u16
 
	ms_magic
;

516 
__u16
 
	ms_°©e
;

517 
__u16
 
	ms_îr‹s
;

518 
__u16
 
	ms_mö‹_ªv_Àvñ
;

519 
__u32
 
	ms_œ°check
;

520 
__u32
 
	ms_checköãrvÆ
;

521 
__u32
 
	ms_¸ót‹_os
;

522 
__u32
 
	ms_ªv_Àvñ
;

523 
__u16
 
	ms_def_ªsuid
;

524 
__u16
 
	ms_def_ªsgid
;

538 
__u32
 
	ms_fú°_öo
;

539 
__u16
 
	ms_öode_size
;

540 
__u16
 
	ms_block_group_ƒ
;

541 
__u32
 
	ms_„©uª_com∑t
;

542 
__u32
 
	ms_„©uª_öcom∑t
;

543 
__u32
 
	ms_„©uª_ro_com∑t
;

544 
__u8
 
	ms_uuid
[16];

545 
	ms_vﬁume_«me
[16];

546 
	ms_œ°_mou¡ed
[64];

547 
__u32
 
	ms_Æg‹ôhm_ußge_bôm≠
;

552 
__u8
 
	ms_¥óŒoc_blocks
;

553 
__u8
 
	ms_¥óŒoc_dú_blocks
;

554 
__u16
 
	ms_ª£rved_gdt_blocks
;

558 
__u8
 
	ms_jou∫Æ_uuid
[16];

559 
__u32
 
	ms_jou∫Æ_öum
;

560 
__u32
 
	ms_jou∫Æ_dev
;

561 
__u32
 
	ms_œ°_‹ph™
;

562 
__u32
 
	ms_hash_£ed
[4];

563 
__u8
 
	ms_def_hash_vîsi⁄
;

564 
__u8
 
	ms_j∆_backup_ty≥
;

565 
__u16
 
	ms_desc_size
;

566 
__u32
 
	ms_deÁu…_mou¡_›ts
;

567 
__u32
 
	ms_fú°_mëa_bg
;

568 
__u32
 
	ms_mkfs_time
;

569 
__u32
 
	ms_j∆_blocks
[17];

570 
__u32
 
	ms_blocks_cou¡_hi
;

571 
__u32
 
	ms_r_blocks_cou¡_hi
;

572 
__u32
 
	ms_‰ì_blocks_hi
;

573 
__u16
 
	ms_mö_exåa_isize
;

574 
__u16
 
	ms_w™t_exåa_isize
;

575 
__u32
 
	ms_Êags
;

576 
__u16
 
	ms_øid_°ride
;

577 
__u16
 
	ms_mmp_öãrvÆ
;

578 
__u64
 
	ms_mmp_block
;

579 
__u32
 
	ms_øid_°rùe_width
;

580 
__u8
 
	ms_log_groups_≥r_Êex
;

581 
__u8
 
	ms_ª£rved_ch¨_∑d
;

582 
__u16
 
	ms_ª£rved_∑d
;

583 
__u64
 
	ms_kbyãs_wrôãn
;

584 
__u32
 
	ms_ª£rved
[160];

590 
	#EXT2_OS_LINUX
 0

	)

591 
	#EXT2_OS_HURD
 1

	)

592 
	#EXT2_OBSO_OS_MASIX
 2

	)

593 
	#EXT2_OS_FREEBSD
 3

	)

594 
	#EXT2_OS_LITES
 4

	)

599 
	#EXT2_GOOD_OLD_REV
 0

	)

600 
	#EXT2_DYNAMIC_REV
 1

	)

602 
	#EXT2_CURRENT_REV
 
EXT2_GOOD_OLD_REV


	)

603 
	#EXT2_MAX_SUPP_REV
 
EXT2_DYNAMIC_REV


	)

605 
	#EXT2_GOOD_OLD_INODE_SIZE
 128

	)

610 
	#EXT3_JNL_BACKUP_BLOCKS
 1

	)

616 
	#EXT2_HAS_COMPAT_FEATURE
(
sb
,
mask
) \

617 –
	`EXT2_SB
(
sb
)->
s_„©uª_com∑t
 & (
mask
Ë)

	)

618 
	#EXT2_HAS_RO_COMPAT_FEATURE
(
sb
,
mask
) \

619 –
	`EXT2_SB
(
sb
)->
s_„©uª_ro_com∑t
 & (
mask
Ë)

	)

620 
	#EXT2_HAS_INCOMPAT_FEATURE
(
sb
,
mask
) \

621 –
	`EXT2_SB
(
sb
)->
s_„©uª_öcom∑t
 & (
mask
Ë)

	)

623 
	#EXT2_FEATURE_COMPAT_DIR_PREALLOC
 0x0001

	)

624 
	#EXT2_FEATURE_COMPAT_IMAGIC_INODES
 0x0002

	)

625 
	#EXT3_FEATURE_COMPAT_HAS_JOURNAL
 0x0004

	)

626 
	#EXT2_FEATURE_COMPAT_EXT_ATTR
 0x0008

	)

627 
	#EXT2_FEATURE_COMPAT_RESIZE_INODE
 0x0010

	)

628 
	#EXT2_FEATURE_COMPAT_DIR_INDEX
 0x0020

	)

629 
	#EXT2_FEATURE_COMPAT_LAZY_BG
 0x0040

	)

631 
	#EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
 0x0001

	)

632 
	#EXT2_FEATURE_RO_COMPAT_LARGE_FILE
 0x0002

	)

634 
	#EXT4_FEATURE_RO_COMPAT_HUGE_FILE
 0x0008

	)

635 
	#EXT4_FEATURE_RO_COMPAT_GDT_CSUM
 0x0010

	)

636 
	#EXT4_FEATURE_RO_COMPAT_DIR_NLINK
 0x0020

	)

637 
	#EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
 0x0040

	)

639 
	#EXT2_FEATURE_INCOMPAT_COMPRESSION
 0x0001

	)

640 
	#EXT2_FEATURE_INCOMPAT_FILETYPE
 0x0002

	)

641 
	#EXT3_FEATURE_INCOMPAT_RECOVER
 0x0004

	)

642 
	#EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
 0x0008

	)

643 
	#EXT2_FEATURE_INCOMPAT_META_BG
 0x0010

	)

644 
	#EXT3_FEATURE_INCOMPAT_EXTENTS
 0x0040

	)

645 
	#EXT4_FEATURE_INCOMPAT_64BIT
 0x0080

	)

646 
	#EXT4_FEATURE_INCOMPAT_MMP
 0x0100

	)

647 
	#EXT4_FEATURE_INCOMPAT_FLEX_BG
 0x0200

	)

650 
	#EXT2_FEATURE_COMPAT_SUPP
 0

	)

651 
	#EXT2_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
)

	)

652 
	#EXT2_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
| \

653 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
| \

654 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
| \

655 
EXT2_FEATURE_RO_COMPAT_BTREE_DIR
)

	)

660 
	#EXT2_DEF_RESUID
 0

	)

661 
	#EXT2_DEF_RESGID
 0

	)

666 
	#EXT2_DEFM_DEBUG
 0x0001

	)

667 
	#EXT2_DEFM_BSDGROUPS
 0x0002

	)

668 
	#EXT2_DEFM_XATTR_USER
 0x0004

	)

669 
	#EXT2_DEFM_ACL
 0x0008

	)

670 
	#EXT2_DEFM_UID16
 0x0010

	)

671 
	#EXT3_DEFM_JMODE
 0x0060

	)

672 
	#EXT3_DEFM_JMODE_DATA
 0x0020

	)

673 
	#EXT3_DEFM_JMODE_ORDERED
 0x0040

	)

674 
	#EXT3_DEFM_JMODE_WBACK
 0x0060

	)

679 
	#EXT2_NAME_LEN
 255

	)

681 
	sext2_dú_íåy
 {

682 
__u32
 
	möode
;

683 
__u16
 
	mªc_Àn
;

684 
__u16
 
	m«me_Àn
;

685 
	m«me
[
EXT2_NAME_LEN
];

694 
	sext2_dú_íåy_2
 {

695 
__u32
 
	möode
;

696 
__u16
 
	mªc_Àn
;

697 
__u8
 
	m«me_Àn
;

698 
__u8
 
	mfûe_ty≥
;

699 
	m«me
[
EXT2_NAME_LEN
];

706 
	#EXT2_FT_UNKNOWN
 0

	)

707 
	#EXT2_FT_REG_FILE
 1

	)

708 
	#EXT2_FT_DIR
 2

	)

709 
	#EXT2_FT_CHRDEV
 3

	)

710 
	#EXT2_FT_BLKDEV
 4

	)

711 
	#EXT2_FT_FIFO
 5

	)

712 
	#EXT2_FT_SOCK
 6

	)

713 
	#EXT2_FT_SYMLINK
 7

	)

715 
	#EXT2_FT_MAX
 8

	)

722 
	#EXT2_DIR_PAD
 4

	)

723 
	#EXT2_DIR_ROUND
 (
EXT2_DIR_PAD
 - 1)

	)

724 
	#EXT2_DIR_REC_LEN
(
«me_Àn
Ë((“ame_ÀnË+ 8 + 
EXT2_DIR_ROUND
) & \

725 ~
EXT2_DIR_ROUND
)

	)

732 
	#EXT2_MMP_MAGIC
 0x004D4D50

	)

733 
	#EXT2_MMP_CLEAN
 0xFF4D4D50

	)

734 
	#EXT2_MMP_FSCK_ON
 0xE24D4D50

	)

736 
	smmp_°ru˘
 {

737 
__u32
 
	mmmp_magic
;

738 
__u32
 
	mmmp_£q
;

739 
__u64
 
	mmmp_time
;

740 
	mmmp_nodíame
[64];

741 
	mmmp_bdev«me
[32];

742 
__u16
 
	mmmp_öãrvÆ
;

743 
__u16
 
	mmmp_∑d1
;

744 
__u32
 
	mmmp_∑d2
;

750 
	#EXT2_MMP_DEF_INTERVAL
 5

	)

	@/usr/include/ext2fs/ext2_io.h

12 #i‚de‡
_EXT2FS_EXT2_IO_H


13 
	#_EXT2FS_EXT2_IO_H


	)

18 #i‡
deföed
(
__GNUC__
Ë|| deföed(
HAS_LONG_LONG
)

19 
	text2_loff_t
;

21 
	text2_loff_t
;

25 
ext2_loff_t
 
ext2fs_Œ£ek
 (,Éxt2_loff_t, );

27 
°ru˘_io_m™agî
 *
	tio_m™agî
;

28 
°ru˘_io_ch™√l
 *
	tio_ch™√l
;

29 
°ru˘_io_°©s
 *
	tio_°©s
;

31 
	#CHANNEL_FLAGS_WRITETHROUGH
 0x01

	)

33 
	s°ru˘_io_ch™√l
 {

34 
îrcode_t
 
	mmagic
;

35 
io_m™agî
 
	mm™agî
;

36 *
	m«me
;

37 
	mblock_size
;

38 
îrcode_t
 (*
ªad_îr‹
)(
io_ch™√l
 
	mch™√l
,

39 
	mblock
,

40 
	mcou¡
,

41 *
	md©a
,

42 
size_t
 
	msize
,

43 
	ma˘uÆ_byãs_ªad
,

44 
îrcode_t
 
	mîr‹
);

45 
îrcode_t
 (*
wrôe_îr‹
)(
io_ch™√l
 
	mch™√l
,

46 
	mblock
,

47 
	mcou¡
,

48 c⁄° *
	md©a
,

49 
size_t
 
	msize
,

50 
	ma˘uÆ_byãs_wrôãn
,

51 
îrcode_t
 
	mîr‹
);

52 
	mªfcou¡
;

53 
	mÊags
;

54 
	mª£rved
[14];

55 *
	m¥iv©e_d©a
;

56 *
	m≠p_d©a
;

59 
	s°ru˘_io_°©s
 {

60 
	mnum_fõlds
;

61 
	mª£rved
;

62 
	mbyãs_ªad
;

63 
	mbyãs_wrôãn
;

66 
	s°ru˘_io_m™agî
 {

67 
îrcode_t
 
	mmagic
;

68 c⁄° *
	m«me
;

69 
îrcode_t
 (*
›í
)(c⁄° *
	m«me
, 
	mÊags
, 
io_ch™√l
 *
	mch™√l
);

70 
îrcode_t
 (*
˛o£
)(
io_ch™√l
 
	mch™√l
);

71 
îrcode_t
 (*
£t_blksize
)(
io_ch™√l
 
	mch™√l
, 
	mblksize
);

72 
îrcode_t
 (*
ªad_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

73 
	mcou¡
, *
	md©a
);

74 
îrcode_t
 (*
wrôe_blk
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

75 
	mcou¡
, c⁄° *
	md©a
);

76 
îrcode_t
 (*
Êush
)(
io_ch™√l
 
	mch™√l
);

77 
îrcode_t
 (*
wrôe_byã
)(
io_ch™√l
 
	mch™√l
, 
	moff£t
,

78 
	mcou¡
, c⁄° *
	md©a
);

79 
îrcode_t
 (*
£t_›ti⁄
)(
io_ch™√l
 
	mch™√l
, c⁄° *
	m›ti⁄
,

80 c⁄° *
	m¨g
);

81 
îrcode_t
 (*
gë_°©s
)(
io_ch™√l
 
	mch™√l
, 
io_°©s
 *
	mio_°©s
);

82 
îrcode_t
 (*
ªad_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

83 
	mcou¡
, *
	md©a
);

84 
îrcode_t
 (*
wrôe_blk64
)(
io_ch™√l
 
	mch™√l
, 
	mblock
,

85 
	mcou¡
, c⁄° *
	md©a
);

86 
	mª£rved
[16];

89 
	#IO_FLAG_RW
 0x0001

	)

90 
	#IO_FLAG_EXCLUSIVE
 0x0002

	)

95 
	#io_ch™√l_˛o£
(
c
Ë((c)->
m™agî
->
	`˛o£
((c)))

	)

96 
	#io_ch™√l_£t_blksize
(
c
,
s
Ë((c)->
m™agî
->
	`£t_blksize
((c),s))

	)

97 
	#io_ch™√l_ªad_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`ªad_blk
((c),b,n,d))

	)

98 
	#io_ch™√l_wrôe_blk
(
c
,
b
,
n
,
d
Ë((c)->
m™agî
->
	`wrôe_blk
((c),b,n,d))

	)

99 
	#io_ch™√l_Êush
(
c
Ë((c)->
m™agî
->
	`Êush
((c)))

	)

100 
	#io_ch™√l_bumpcou¡
(
c
Ë((c)->
ªfcou¡
++)

	)

103 
îrcode_t
 
io_ch™√l_£t_›ti⁄s
(
io_ch™√l
 
ch™√l
,

104 c⁄° *
›ti⁄s
);

105 
îrcode_t
 
io_ch™√l_wrôe_byã
(
io_ch™√l
 
ch™√l
,

106 
off£t
,

107 
cou¡
, c⁄° *
d©a
);

108 
îrcode_t
 
io_ch™√l_ªad_blk64
(
io_ch™√l
 
ch™√l
,

109 
block
,

110 
cou¡
, *
d©a
);

111 
îrcode_t
 
io_ch™√l_wrôe_blk64
(
io_ch™√l
 
ch™√l
,

112 
block
,

113 
cou¡
, c⁄° *
d©a
);

116 
io_m™agî
 
unix_io_m™agî
;

119 
io_m™agî
 
undo_io_m™agî
;

120 
îrcode_t
 
£t_undo_io_backög_m™agî
(
io_m™agî
 
m™agî
);

121 
îrcode_t
 
£t_undo_io_backup_fûe
(*
fûe_«me
);

124 
io_m™agî
 
ã°_io_m™agî
, 
ã°_io_backög_m™agî
;

125 (*
ã°_io_cb_ªad_blk
)

126 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

127 (*
ã°_io_cb_wrôe_blk
)

128 (
block
, 
cou¡
, 
îrcode_t
 
îr
);

129 (*
ã°_io_cb_£t_blksize
)

130 (
blksize
, 
îrcode_t
 
îr
);

	@/usr/include/ext2fs/ext2_types.h

6 #i‡(!
deföed
(
_LINUX_TYPES_H
Ë&& !deföed(
_BLKID_TYPES_H
) && \

7 !
	$deföed
(
_EXT2_TYPES_H
))

8 
	#_EXT2_TYPES_H


	)

10 
	#__S8_TYPEDEF
 
__sig√d__
 

	)

11 
	#__U8_TYPEDEF
 

	)

12 
	#__S16_TYPEDEF
 
__sig√d__
 

	)

13 
	#__U16_TYPEDEF
 

	)

14 
	#__S32_TYPEDEF
 
__sig√d__
 

	)

15 
	#__U32_TYPEDEF
 

	)

16 
	#__S64_TYPEDEF
 
__sig√d__
 

	)

17 
	#__U64_TYPEDEF
 

	)

19 #ifde‡
__U8_TYPEDEF


20 
__U8_TYPEDEF
 
	t__u8
;

22 
	t__u8
;

25 #ifde‡
__S8_TYPEDEF


26 
__S8_TYPEDEF
 
	t__s8
;

28 sig√d 
	t__s8
;

31 #ifde‡
__U16_TYPEDEF


32 
__U16_TYPEDEF
 
	t__u16
;

35 
	t__u16
;

38 
	t__u16
;

40 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


45 #ifde‡
__S16_TYPEDEF


46 
__S16_TYPEDEF
 
	t__s16
;

49 
	t__s16
;

52 
	t__s16
;

54 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


60 #ifde‡
__U32_TYPEDEF


61 
__U32_TYPEDEF
 
	t__u32
;

64 
	t__u32
;

67 
	t__u32
;

70 
	t__u32
;

72 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


78 #ifde‡
__S32_TYPEDEF


79 
__S32_TYPEDEF
 
	t__s32
;

82 
	t__s32
;

85 
	t__s32
;

88 
	t__s32
;

90 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


96 #ifde‡
__U64_TYPEDEF


97 
__U64_TYPEDEF
 
	t__u64
;

100 
	t__u64
;

103 
	t__u64
;

106 
	t__u64
;

112 #ifde‡
__S64_TYPEDEF


113 
__S64_TYPEDEF
 
	t__s64
;

116 
	t__s64
;

119 
	t__s64
;

122 #i‡
	`deföed
(
__GNUC__
)

123 
__sig√d__
 
	t__s64
;

125 sig√d 
	t__s64
;

132 #unde‡
__S8_TYPEDEF


133 #unde‡
__U8_TYPEDEF


134 #unde‡
__S16_TYPEDEF


135 #unde‡
__U16_TYPEDEF


136 #unde‡
__S32_TYPEDEF


137 #unde‡
__U32_TYPEDEF


138 #unde‡
__S64_TYPEDEF


139 #unde‡
__U64_TYPEDEF


144 
	#HAVE_SYS_TYPES_H
 1

	)

145 #unde‡
WORDS_BIGENDIAN


	@/usr/include/ext2fs/ext2fs.h

12 #i‚de‡
_EXT2FS_EXT2FS_H


13 
	#_EXT2FS_EXT2FS_H


	)

15 #ifde‡
__GNUC__


16 
	#EXT2FS_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

18 
	#EXT2FS_ATTR
(
x
)

	)

21 #ifde‡
__˝lu•lus


28 #i‡(!
deföed
(
__GNUC__
Ë&& !deföed(
__WATCOMC__
))

29 
	#NO_INLINE_FUNCS


	)

39 
	#SUPERBLOCK_OFFSET
 1024

	)

40 
	#SUPERBLOCK_SIZE
 1024

	)

46 
	#EXT2_LIB_CURRENT_REV
 
EXT2_DYNAMIC_REV


	)

48 #ifde‡
HAVE_SYS_TYPES_H


49 
	~<sys/ty≥s.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<°rög.h
>

56 #i‡
EXT2_FLAT_INCLUDES


57 
	~"e2_ty≥s.h
"

58 
	~"ext2_fs.h
"

59 
	~"ext3_exã¡s.h
"

61 
	~<ext2fs/ext2_ty≥s.h
>

62 
	~<ext2fs/ext2_fs.h
>

63 
	~<ext2fs/ext3_exã¡s.h
>

66 
__u32
 
	text2_öo_t
;

67 
__u32
 
	tblk_t
;

68 
__u64
 
	tblk64_t
;

69 
__u32
 
	tdgΩ_t
;

70 
__u32
 
	text2_off_t
;

71 
__s64
 
	te2_blk˙t_t
;

72 
__u32
 
	text2_dúhash_t
;

74 #i‡
EXT2_FLAT_INCLUDES


75 
	~"com_îr.h
"

76 
	~"ext2_io.h
"

77 
	~"ext2_îr.h
"

78 
	~"ext2_ext_©å.h
"

80 
	~<ë/com_îr.h
>

81 
	~<ext2fs/ext2_io.h
>

82 
	~<ext2fs/ext2_îr.h
>

83 
	~<ext2fs/ext2_ext_©å.h
>

89 #ifde‡
_MSC_VER


90 
	#EXT2_QSORT_TYPE
 
__cde˛


	)

92 
	#EXT2_QSORT_TYPE
 

	)

95 
°ru˘_ext2_fûsys
 *
	text2_fûsys
;

97 
	#EXT2FS_MARK_ERROR
 0

	)

98 
	#EXT2FS_UNMARK_ERROR
 1

	)

99 
	#EXT2FS_TEST_ERROR
 2

	)

101 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_gíîic_bôm≠
;

102 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_öode_bôm≠
;

103 
ext2fs_°ru˘_gíîic_bôm≠
 *
	text2fs_block_bôm≠
;

105 
	#EXT2_FIRST_INODE
(
s
Ë
	`EXT2_FIRST_INO
(s)

	)

112 
ext2_°ru˘_u32_li°
 *
	text2_badblocks_li°
;

113 
ext2_°ru˘_u32_ôî©e
 *
	text2_badblocks_ôî©e
;

115 
ext2_°ru˘_u32_li°
 *
	text2_u32_li°
;

116 
ext2_°ru˘_u32_ôî©e
 *
	text2_u32_ôî©e
;

119 
ext2_°ru˘_u32_li°
 *
	tbadblocks_li°
;

120 
ext2_°ru˘_u32_ôî©e
 *
	tbadblocks_ôî©e
;

122 
	#BADBLOCKS_FLAG_DIRTY
 1

	)

127 
	sext2_db_íåy
 {

128 
ext2_öo_t
 
öo
;

129 
blk_t
 
blk
;

130 
block˙t
;

133 
ext2_°ru˘_dbli°
 *
	text2_dbli°
;

135 
	#DBLIST_ABORT
 1

	)

141 
	#EXT2_FILE_WRITE
 0x0001

	)

142 
	#EXT2_FILE_CREATE
 0x0002

	)

144 
	#EXT2_FILE_MASK
 0x00FF

	)

146 
	#EXT2_FILE_BUF_DIRTY
 0x4000

	)

147 
	#EXT2_FILE_BUF_VALID
 0x2000

	)

149 
ext2_fûe
 *
	text2_fûe_t
;

151 
	#EXT2_SEEK_SET
 0

	)

152 
	#EXT2_SEEK_CUR
 1

	)

153 
	#EXT2_SEEK_END
 2

	)

158 
	#EXT2_FLAG_RW
 0x01

	)

159 
	#EXT2_FLAG_CHANGED
 0x02

	)

160 
	#EXT2_FLAG_DIRTY
 0x04

	)

161 
	#EXT2_FLAG_VALID
 0x08

	)

162 
	#EXT2_FLAG_IB_DIRTY
 0x10

	)

163 
	#EXT2_FLAG_BB_DIRTY
 0x20

	)

164 
	#EXT2_FLAG_SWAP_BYTES
 0x40

	)

165 
	#EXT2_FLAG_SWAP_BYTES_READ
 0x80

	)

166 
	#EXT2_FLAG_SWAP_BYTES_WRITE
 0x100

	)

167 
	#EXT2_FLAG_MASTER_SB_ONLY
 0x200

	)

168 
	#EXT2_FLAG_FORCE
 0x400

	)

169 
	#EXT2_FLAG_SUPER_ONLY
 0x800

	)

170 
	#EXT2_FLAG_JOURNAL_DEV_OK
 0x1000

	)

171 
	#EXT2_FLAG_IMAGE_FILE
 0x2000

	)

172 
	#EXT2_FLAG_EXCLUSIVE
 0x4000

	)

173 
	#EXT2_FLAG_SOFTSUPP_FEATURES
 0x8000

	)

174 
	#EXT2_FLAG_NOFREE_ON_ERROR
 0x10000

	)

180 
	#EXT2_NEW_INODE_FL
 0x80000000

	)

187 
	#EXT2_MKJOURNAL_V1_SUPER
 0x0000001

	)

189 
	s°ru˘_ext2_fûsys
 {

190 
îrcode_t
 
magic
;

191 
io_ch™√l
 
io
;

192 
Êags
;

193 * 
devi˚_«me
;

194 
ext2_su≥r_block
 * 
su≥r
;

195 
blocksize
;

196 
‰agsize
;

197 
dgΩ_t
 
group_desc_cou¡
;

198 
desc_blocks
;

199 
ext2_group_desc
 * 
group_desc
;

200 
öode_blocks_≥r_group
;

201 
ext2fs_öode_bôm≠
 
öode_m≠
;

202 
ext2fs_block_bôm≠
 
block_m≠
;

203 
îrcode_t
 (*
gë_blocks
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

204 
îrcode_t
 (*
check_dúe˘‹y
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

205 
îrcode_t
 (*
wrôe_bôm≠s
)(
ext2_fûsys
 
fs
);

206 
îrcode_t
 (*
ªad_öode
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

207 
ext2_öode
 *
öode
);

208 
îrcode_t
 (*
wrôe_öode
)(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

209 
ext2_öode
 *
öode
);

210 
ext2_badblocks_li°
 
badblocks
;

211 
ext2_dbli°
 
dbli°
;

212 
__u32
 
°ride
;

213 
ext2_su≥r_block
 * 
‹ig_su≥r
;

214 
ext2_image_hdr
 * 
image_hódî
;

215 
__u32
 
umask
;

216 
time_t
 
now
;

220 
__u32
 
ª£rved
[7];

225 * 
¥iv_d©a
;

230 
ext2_öode_ˇche
 *
iˇche
;

231 
io_ch™√l
 
image_io
;

236 
îrcode_t
 (*
gë_Æloc_block
)(
ext2_fûsys
 
fs
, 
blk64_t
 
gﬂl
,

237 
blk64_t
 *
ªt
);

238 (*
block_Æloc_°©s
)(
ext2_fûsys
 
fs
, 
blk64_t
 
blk
, 
öu£
);

241 #i‡
EXT2_FLAT_INCLUDES


242 
	~"e2_bô›s.h
"

244 
	~<ext2fs/bô›s.h
>

250 
	#BLOCK_CHANGED
 1

	)

251 
	#BLOCK_ABORT
 2

	)

252 
	#BLOCK_ERROR
 4

	)

278 
	#BLOCK_FLAG_APPEND
 1

	)

279 
	#BLOCK_FLAG_HOLE
 1

	)

280 
	#BLOCK_FLAG_DEPTH_TRAVERSE
 2

	)

281 
	#BLOCK_FLAG_DATA_ONLY
 4

	)

282 
	#BLOCK_FLAG_READ_ONLY
 8

	)

284 
	#BLOCK_FLAG_NO_LARGE
 0x1000

	)

289 
	#BLOCK_COUNT_IND
 (-1)

	)

290 
	#BLOCK_COUNT_DIND
 (-2)

	)

291 
	#BLOCK_COUNT_TIND
 (-3)

	)

292 
	#BLOCK_COUNT_TRANSLATOR
 (-4)

	)

298 
	#EXT2_BMOVE_GET_DBLIST
 0x0001

	)

299 
	#EXT2_BMOVE_DEBUG
 0x0002

	)

306 
	#EXT2_EXTENT_FLAGS_LEAF
 0x0001

	)

307 
	#EXT2_EXTENT_FLAGS_UNINIT
 0x0002

	)

308 
	#EXT2_EXTENT_FLAGS_SECOND_VISIT
 0x0004

	)

310 
	sext2fs_exã¡
 {

311 
blk64_t
 
e_pblk
;

312 
blk64_t
 
e_lblk
;

313 
__u32
 
e_Àn
;

314 
__u32
 
e_Êags
;

317 
ext2_exã¡_h™dÀ
 *
	text2_exã¡_h™dÀ_t
;

318 
ext2_exã¡_∑th
 *
	text2_exã¡_∑th_t
;

323 
	#EXT2_EXTENT_CURRENT
 0x0000

	)

324 
	#EXT2_EXTENT_MOVE_MASK
 0x000F

	)

325 
	#EXT2_EXTENT_ROOT
 0x0001

	)

326 
	#EXT2_EXTENT_LAST_LEAF
 0x0002

	)

327 
	#EXT2_EXTENT_FIRST_SIB
 0x0003

	)

328 
	#EXT2_EXTENT_LAST_SIB
 0x0004

	)

329 
	#EXT2_EXTENT_NEXT_SIB
 0x0005

	)

330 
	#EXT2_EXTENT_PREV_SIB
 0x0006

	)

331 
	#EXT2_EXTENT_NEXT_LEAF
 0x0007

	)

332 
	#EXT2_EXTENT_PREV_LEAF
 0x0008

	)

333 
	#EXT2_EXTENT_NEXT
 0x0009

	)

334 
	#EXT2_EXTENT_PREV
 0x000A

	)

335 
	#EXT2_EXTENT_UP
 0x000B

	)

336 
	#EXT2_EXTENT_DOWN
 0x000C

	)

337 
	#EXT2_EXTENT_DOWN_AND_LAST
 0x000D

	)

342 
	#EXT2_EXTENT_INSERT_AFTER
 0x0001

	)

343 
	#EXT2_EXTENT_INSERT_NOSPLIT
 0x0002

	)

348 
	#EXT2_EXTENT_DELETE_KEEP_EMPTY
 0x001

	)

353 
	#EXT2_EXTENT_SET_BMAP_UNINIT
 0x0001

	)

358 
	sext2_exã¡_öfo
 {

359 
cuº_íåy
;

360 
cuº_Àvñ
;

361 
num_íåõs
;

362 
max_íåõs
;

363 
max_dïth
;

364 
byãs_avaû
;

365 
blk64_t
 
max_lblk
;

366 
blk64_t
 
max_pblk
;

367 
__u32
 
max_Àn
;

368 
__u32
 
max_unöô_Àn
;

374 
	#EXT2_DIRBLOCK_V2_STRUCT
 0x0001

	)

379 
	#DIRENT_CHANGED
 1

	)

380 
	#DIRENT_ABORT
 2

	)

381 
	#DIRENT_ERROR
 3

	)

387 
	#DIRENT_FLAG_INCLUDE_EMPTY
 1

	)

388 
	#DIRENT_FLAG_INCLUDE_REMOVED
 2

	)

390 
	#DIRENT_DOT_FILE
 1

	)

391 
	#DIRENT_DOT_DOT_FILE
 2

	)

392 
	#DIRENT_OTHER_FILE
 3

	)

393 
	#DIRENT_DELETED_FILE
 4

	)

398 
ext2_°ru˘_öode_sˇn
 *
	text2_öode_sˇn
;

403 
	#EXT2_SF_CHK_BADBLOCKS
 0x0001

	)

404 
	#EXT2_SF_BAD_INODE_BLK
 0x0002

	)

405 
	#EXT2_SF_BAD_EXTRA_BYTES
 0x0004

	)

406 
	#EXT2_SF_SKIP_MISSING_ITABLE
 0x0008

	)

407 
	#EXT2_SF_DO_LAZY
 0x0010

	)

412 
	#EXT2_MF_MOUNTED
 1

	)

413 
	#EXT2_MF_ISROOT
 2

	)

414 
	#EXT2_MF_READONLY
 4

	)

415 
	#EXT2_MF_SWAP
 8

	)

416 
	#EXT2_MF_BUSY
 16

	)

423 
	#LINUX_S_IFMT
 00170000

	)

424 
	#LINUX_S_IFSOCK
 0140000

	)

425 
	#LINUX_S_IFLNK
 0120000

	)

426 
	#LINUX_S_IFREG
 0100000

	)

427 
	#LINUX_S_IFBLK
 0060000

	)

428 
	#LINUX_S_IFDIR
 0040000

	)

429 
	#LINUX_S_IFCHR
 0020000

	)

430 
	#LINUX_S_IFIFO
 0010000

	)

431 
	#LINUX_S_ISUID
 0004000

	)

432 
	#LINUX_S_ISGID
 0002000

	)

433 
	#LINUX_S_ISVTX
 0001000

	)

435 
	#LINUX_S_IRWXU
 00700

	)

436 
	#LINUX_S_IRUSR
 00400

	)

437 
	#LINUX_S_IWUSR
 00200

	)

438 
	#LINUX_S_IXUSR
 00100

	)

440 
	#LINUX_S_IRWXG
 00070

	)

441 
	#LINUX_S_IRGRP
 00040

	)

442 
	#LINUX_S_IWGRP
 00020

	)

443 
	#LINUX_S_IXGRP
 00010

	)

445 
	#LINUX_S_IRWXO
 00007

	)

446 
	#LINUX_S_IROTH
 00004

	)

447 
	#LINUX_S_IWOTH
 00002

	)

448 
	#LINUX_S_IXOTH
 00001

	)

450 
	#LINUX_S_ISLNK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFLNK
)

	)

451 
	#LINUX_S_ISREG
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFREG
)

	)

452 
	#LINUX_S_ISDIR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFDIR
)

	)

453 
	#LINUX_S_ISCHR
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFCHR
)

	)

454 
	#LINUX_S_ISBLK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFBLK
)

	)

455 
	#LINUX_S_ISFIFO
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFIFO
)

	)

456 
	#LINUX_S_ISSOCK
(
m
Ë(((mË& 
LINUX_S_IFMT
Ë=
LINUX_S_IFSOCK
)

	)

461 
	#EXT2_I_SIZE
(
i
Ë((i)->
i_size
 | ((
__u64
Ë(i)->
i_size_high
 << 32))

	)

466 
	#EXT2_ICOUNT_OPT_INCREMENT
 0x01

	)

468 
ext2_icou¡
 *
	text2_icou¡_t
;

473 
	#BMAP_ALLOC
 0x0001

	)

474 
	#BMAP_SET
 0x0002

	)

479 
	#BMAP_RET_UNINIT
 0x0001

	)

484 
	#IMAGER_FLAG_INODEMAP
 1

	)

485 
	#IMAGER_FLAG_SPARSEWRITE
 2

	)

491 
	#EXT2_CHECK_MAGIC
(, 
code
) \

492 i‡(()->
magic
 !(
code
)Ë (code)

	)

498 
	#EXT2FS_COMPRESSED_BLKADDR
 ((
blk_t
Ë-1)

	)

499 
	#HOLE_BLKADDR
(
_b
Ë((_bË=0 || (_bË=
EXT2FS_COMPRESSED_BLKADDR
)

	)

504 
	#EXT2_LIB_FEATURE_COMPAT_SUPP
 (
EXT2_FEATURE_COMPAT_DIR_PREALLOC
|\

505 
EXT2_FEATURE_COMPAT_IMAGIC_INODES
|\

506 
EXT3_FEATURE_COMPAT_HAS_JOURNAL
|\

507 
EXT2_FEATURE_COMPAT_RESIZE_INODE
|\

508 
EXT2_FEATURE_COMPAT_DIR_INDEX
|\

509 
EXT2_FEATURE_COMPAT_EXT_ATTR
)

	)

512 #ifde‡
ENABLE_COMPRESSION


513 #i‚de‡
I_KNOW_THAT_COMPRESSION_IS_EXPERIMENTAL


519 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

520 
EXT2_FEATURE_INCOMPAT_COMPRESSION
|\

521 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

522 
EXT2_FEATURE_INCOMPAT_META_BG
|\

523 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

524 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

525 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)

	)

527 
	#EXT2_LIB_FEATURE_INCOMPAT_SUPP
 (
EXT2_FEATURE_INCOMPAT_FILETYPE
|\

528 
EXT3_FEATURE_INCOMPAT_JOURNAL_DEV
|\

529 
EXT2_FEATURE_INCOMPAT_META_BG
|\

530 
EXT3_FEATURE_INCOMPAT_RECOVER
|\

531 
EXT3_FEATURE_INCOMPAT_EXTENTS
|\

532 
EXT4_FEATURE_INCOMPAT_FLEX_BG
)

	)

534 
	#EXT2_LIB_FEATURE_RO_COMPAT_SUPP
 (
EXT2_FEATURE_RO_COMPAT_SPARSE_SUPER
|\

535 
EXT4_FEATURE_RO_COMPAT_HUGE_FILE
|\

536 
EXT2_FEATURE_RO_COMPAT_LARGE_FILE
|\

537 
EXT4_FEATURE_RO_COMPAT_DIR_NLINK
|\

538 
EXT4_FEATURE_RO_COMPAT_EXTRA_ISIZE
|\

539 
EXT4_FEATURE_RO_COMPAT_GDT_CSUM
)

	)

545 
	#EXT2_LIB_SOFTSUPP_INCOMPAT
 (0)

	)

546 
	#EXT2_LIB_SOFTSUPP_RO_COMPAT
 (0)

	)

553 
îrcode_t
 
ext2fs_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, 
mode
,

554 
ext2fs_öode_bôm≠
 
m≠
, 
ext2_öo_t
 *
ªt
);

555 
îrcode_t
 
ext2fs_√w_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

556 
ext2fs_block_bôm≠
 
m≠
, 
blk_t
 *
ªt
);

557 
îrcode_t
 
ext2fs_gë_‰ì_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
°¨t
,

558 
blk_t
 
föish
, 
num
,

559 
ext2fs_block_bôm≠
 
m≠
,

560 
blk_t
 *
ªt
);

561 
îrcode_t
 
ext2fs_Æloc_block
(
ext2_fûsys
 
fs
, 
blk_t
 
gﬂl
,

562 *
block_buf
, 
blk_t
 *
ªt
);

563 
ext2fs_£t_Æloc_block_ˇŒback
(
ext2_fûsys
 
fs
,

564 
îrcode_t
 (*
func
)(
ext2_fûsys
 
fs
,

565 
blk64_t
 
gﬂl
,

566 
blk64_t
 *
ªt
),

567 
îrcode_t
 (**
ﬁd
)(
ext2_fûsys
 
fs
,

568 
blk64_t
 
gﬂl
,

569 
blk64_t
 *
ªt
));

572 
ext2fs_ª£rve_su≥r_™d_bgd
(
ext2_fûsys
 
fs
,

573 
dgΩ_t
 
group
,

574 
ext2fs_block_bôm≠
 
bm≠
);

575 
ext2fs_£t_block_Æloc_°©s_ˇŒback
(
ext2_fûsys
 
fs
,

576 (*
func
)(
ext2_fûsys
 
fs
,

577 
blk64_t
 
blk
,

578 
öu£
),

579 (**
ﬁd
)(
ext2_fûsys
 
fs
,

580 
blk64_t
 
blk
,

581 
öu£
));

584 
ext2fs_öode_Æloc_°©s
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
öu£
);

585 
ext2fs_öode_Æloc_°©s2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

586 
öu£
, 
isdú
);

587 
ext2fs_block_Æloc_°©s
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
öu£
);

590 
îrcode_t
 
ext2fs_Æloˇã_èbÀs
(
ext2_fûsys
 
fs
);

591 
îrcode_t
 
ext2fs_Æloˇã_group_èbÀ
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
,

592 
ext2fs_block_bôm≠
 
bm≠
);

595 
îrcode_t
 
ext2fs_u32_li°_¸óã
(
ext2_u32_li°
 *
ªt
, 
size
);

596 
îrcode_t
 
ext2fs_u32_li°_add
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

597 
ext2fs_u32_li°_föd
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

598 
ext2fs_u32_li°_ã°
(
ext2_u32_li°
 
bb
, 
blk_t
 
blk
);

599 
îrcode_t
 
ext2fs_u32_li°_ôî©e_begö
(
ext2_u32_li°
 
bb
,

600 
ext2_u32_ôî©e
 *
ªt
);

601 
ext2fs_u32_li°_ôî©e
(
ext2_u32_ôî©e
 
ôî
, 
blk_t
 *
blk
);

602 
ext2fs_u32_li°_ôî©e_íd
(
ext2_u32_ôî©e
 
ôî
);

603 
îrcode_t
 
ext2fs_u32_c›y
(
ext2_u32_li°
 
§c
,Éxt2_u32_li° *
de°
);

604 
ext2fs_u32_li°_equÆ
(
ext2_u32_li°
 
bb1
,Éxt2_u32_li° 
bb2
);

606 
îrcode_t
 
ext2fs_badblocks_li°_¸óã
(
ext2_badblocks_li°
 *
ªt
,

607 
size
);

608 
îrcode_t
 
ext2fs_badblocks_li°_add
(
ext2_badblocks_li°
 
bb
,

609 
blk_t
 
blk
);

610 
ext2fs_badblocks_li°_ã°
(
ext2_badblocks_li°
 
bb
,

611 
blk_t
 
blk
);

612 
ext2fs_u32_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

613 
ext2fs_badblocks_li°_dñ
(
ext2_u32_li°
 
bb
, 
__u32
 
blk
);

614 
îrcode_t


615 
ext2fs_badblocks_li°_ôî©e_begö
(
ext2_badblocks_li°
 
bb
,

616 
ext2_badblocks_ôî©e
 *
ªt
);

617 
ext2fs_badblocks_li°_ôî©e
(
ext2_badblocks_ôî©e
 
ôî
,

618 
blk_t
 *
blk
);

619 
ext2fs_badblocks_li°_ôî©e_íd
(
ext2_badblocks_ôî©e
 
ôî
);

620 
îrcode_t
 
ext2fs_badblocks_c›y
(
ext2_badblocks_li°
 
§c
,

621 
ext2_badblocks_li°
 *
de°
);

622 
ext2fs_badblocks_equÆ
(
ext2_badblocks_li°
 
bb1
,

623 
ext2_badblocks_li°
 
bb2
);

624 
ext2fs_u32_li°_cou¡
(
ext2_u32_li°
 
bb
);

627 
îrcode_t
 
badblocks_li°_¸óã
(
badblocks_li°
 *
ªt
, 
size
);

628 
îrcode_t
 
badblocks_li°_add
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

629 
badblocks_li°_ã°
(
badblocks_li°
 
bb
, 
blk_t
 
blk
);

630 
îrcode_t
 
badblocks_li°_ôî©e_begö
(
badblocks_li°
 
bb
,

631 
badblocks_ôî©e
 *
ªt
);

632 
badblocks_li°_ôî©e
(
badblocks_ôî©e
 
ôî
, 
blk_t
 *
blk
);

633 
badblocks_li°_ôî©e_íd
(
badblocks_ôî©e
 
ôî
);

634 
badblocks_li°_‰ì
(
badblocks_li°
 
bb
);

637 
îrcode_t
 
ext2fs_upd©e_bb_öode
(
ext2_fûsys
 
fs
,

638 
ext2_badblocks_li°
 
bb_li°
);

641 
ext2fs_‰ì_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

642 
ext2fs_‰ì_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

643 
îrcode_t
 
ext2fs_c›y_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

644 
ext2fs_gíîic_bôm≠
 *
de°
);

645 
îrcode_t
 
ext2fs_wrôe_öode_bôm≠
(
ext2_fûsys
 
fs
);

646 
îrcode_t
 
ext2fs_wrôe_block_bôm≠
 (
ext2_fûsys
 
fs
);

647 
îrcode_t
 
ext2fs_ªad_öode_bôm≠
 (
ext2_fûsys
 
fs
);

648 
îrcode_t
 
ext2fs_ªad_block_bôm≠
(
ext2_fûsys
 
fs
);

649 
îrcode_t
 
ext2fs_Æloˇã_block_bôm≠
(
ext2_fûsys
 
fs
,

650 c⁄° *
des¸
,

651 
ext2fs_block_bôm≠
 *
ªt
);

652 
îrcode_t
 
ext2fs_Æloˇã_öode_bôm≠
(
ext2_fûsys
 
fs
,

653 c⁄° *
des¸
,

654 
ext2fs_öode_bôm≠
 *
ªt
);

655 
îrcode_t
 
ext2fs_fudge_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

656 
ext2_öo_t
 
íd
,Éxt2_öo_à*
€nd
);

657 
îrcode_t
 
ext2fs_fudge_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
,

658 
blk_t
 
íd
, blk_à*
€nd
);

659 
ext2fs_˛ór_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

660 
ext2fs_˛ór_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
);

661 
îrcode_t
 
ext2fs_ªad_bôm≠s
(
ext2_fûsys
 
fs
);

662 
îrcode_t
 
ext2fs_wrôe_bôm≠s
(
ext2_fûsys
 
fs
);

663 
îrcode_t
 
ext2fs_ªsize_öode_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

664 
ext2fs_öode_bôm≠
 
bm≠
);

665 
îrcode_t
 
ext2fs_ªsize_block_bôm≠
(
__u32
 
√w_íd
, __u32 
√w_ªÆ_íd
,

666 
ext2fs_block_bôm≠
 
bm≠
);

667 
îrcode_t
 
ext2fs_com∑ª_block_bôm≠
(
ext2fs_block_bôm≠
 
bm1
,

668 
ext2fs_block_bôm≠
 
bm2
);

669 
îrcode_t
 
ext2fs_com∑ª_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bm1
,

670 
ext2fs_öode_bôm≠
 
bm2
);

671 
îrcode_t
 
ext2fs_£t_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

672 
ext2_öo_t
 
°¨t
, 
num
,

673 *
ö
);

674 
îrcode_t
 
ext2fs_gë_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bm≠
,

675 
ext2_öo_t
 
°¨t
, 
num
,

676 *
out
);

677 
îrcode_t
 
ext2fs_£t_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

678 
blk_t
 
°¨t
, 
num
,

679 *
ö
);

680 
îrcode_t
 
ext2fs_gë_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bm≠
,

681 
blk_t
 
°¨t
, 
num
,

682 *
out
);

686 
îrcode_t
 
ext2fs_block_ôî©e
(
ext2_fûsys
 
fs
,

687 
ext2_öo_t
 
öo
,

688 
Êags
,

689 *
block_buf
,

690 (*
func
)(
ext2_fûsys
 
fs
,

691 
blk_t
 *
blockƒ
,

692 
block˙t
,

693 *
¥iv_d©a
),

694 *
¥iv_d©a
);

695 
îrcode_t
 
ext2fs_block_ôî©e2
(
ext2_fûsys
 
fs
,

696 
ext2_öo_t
 
öo
,

697 
Êags
,

698 *
block_buf
,

699 (*
func
)(
ext2_fûsys
 
fs
,

700 
blk_t
 *
blockƒ
,

701 
e2_blk˙t_t
 
block˙t
,

702 
blk_t
 
ªf_blk
,

703 
ªf_off£t
,

704 *
¥iv_d©a
),

705 *
¥iv_d©a
);

708 
îrcode_t
 
ext2fs_bm≠
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

709 
ext2_öode
 *
öode
,

710 *
block_buf
, 
bm≠_Êags
,

711 
blk_t
 
block
, blk_à*
phys_blk
);

712 
îrcode_t
 
ext2fs_bm≠2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

713 
ext2_öode
 *
öode
,

714 *
block_buf
, 
bm≠_Êags
, 
blk64_t
 
block
,

715 *
ªt_Êags
, 
blk64_t
 *
phys_blk
);

719 
îrcode_t
 
ext2fs_move_blocks
(
ext2_fûsys
 
fs
,

720 
ext2fs_block_bôm≠
 
ª£rve
,

721 
ext2fs_block_bôm≠
 
Æloc_m≠
,

722 
Êags
);

726 
îrcode_t
 
ext2fs_check_desc
(
ext2_fûsys
 
fs
);

729 
îrcode_t
 
ext2fs_˛o£
(
ext2_fûsys
 
fs
);

730 
îrcode_t
 
ext2fs_Êush
(
ext2_fûsys
 
fs
);

731 
ext2fs_bg_has_su≥r
(
ext2_fûsys
 
fs
, 
group_block
);

732 
ext2fs_su≥r_™d_bgd_loc
(
ext2_fûsys
 
fs
,

733 
dgΩ_t
 
group
,

734 
blk_t
 *
ªt_su≥r_blk
,

735 
blk_t
 *
ªt_ﬁd_desc_blk
,

736 
blk_t
 *
ªt_√w_desc_blk
,

737 *
ªt_mëa_bg
);

738 
ext2fs_upd©e_dy«mic_ªv
(
ext2_fûsys
 
fs
);

741 
ext2fs_group_desc_csum_£t
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

742 
ext2fs_group_desc_csum_vîify
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

743 
îrcode_t
 
ext2fs_£t_gdt_csum
(
ext2_fûsys
 
fs
);

747 
îrcode_t
 
ext2fs_gë_num_dús
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 *
ªt_num_dús
);

748 
îrcode_t
 
ext2fs_öô_dbli°
(
ext2_fûsys
 
fs
, 
ext2_dbli°
 *
ªt_dbli°
);

749 
îrcode_t
 
ext2fs_add_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

750 
blk_t
 
blk
, 
block˙t
);

751 
ext2fs_dbli°_s‹t
(
ext2_dbli°
 
dbli°
,

752 
EXT2_QSORT_TYPE
 (*
s‹tfunc
)(const *,

754 
îrcode_t
 
ext2fs_dbli°_ôî©e
(
ext2_dbli°
 
dbli°
,

755 (*
func
)(
ext2_fûsys
 
fs
, 
ext2_db_íåy
 *
db_öfo
,

756 *
¥iv_d©a
),

757 *
¥iv_d©a
);

758 
îrcode_t
 
ext2fs_£t_dú_block
(
ext2_dbli°
 
dbli°
, 
ext2_öo_t
 
öo
,

759 
blk_t
 
blk
, 
block˙t
);

760 
îrcode_t
 
ext2fs_c›y_dbli°
(
ext2_dbli°
 
§c
,

761 
ext2_dbli°
 *
de°
);

762 
ext2fs_dbli°_cou¡
(
ext2_dbli°
 
dbli°
);

763 
îrcode_t
 
ext2fs_dbli°_gë_œ°
(
ext2_dbli°
 
dbli°
,

764 
ext2_db_íåy
 **
íåy
);

765 
îrcode_t
 
ext2fs_dbli°_dr›_œ°
(
ext2_dbli°
 
dbli°
);

768 
îrcode_t


769 
ext2fs_dbli°_dú_ôî©e
(
ext2_dbli°
 
dbli°
,

770 
Êags
,

771 *
block_buf
,

772 (*
func
)(
ext2_öo_t
 
dú
,

773 
íåy
,

774 
ext2_dú_íåy
 *
dúít
,

775 
off£t
,

776 
blocksize
,

777 *
buf
,

778 *
¥iv_d©a
),

779 *
¥iv_d©a
);

782 
îrcode_t
 
ext2fs_ªad_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

783 *
buf
);

784 
îrcode_t
 
ext2fs_ªad_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

785 *
buf
, 
Êags
);

786 
îrcode_t
 
ext2fs_wrôe_dú_block
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

787 *
buf
);

788 
îrcode_t
 
ext2fs_wrôe_dú_block2
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

789 *
buf
, 
Êags
);

792 
îrcode_t
 
ext2fs_dúhash
(
vîsi⁄
, c⁄° *
«me
, 
Àn
,

793 c⁄° 
__u32
 *
£ed
,

794 
ext2_dúhash_t
 *
ªt_hash
,

795 
ext2_dúhash_t
 *
ªt_mö‹_hash
);

799 
îrcode_t
 
ext2fs_gë_ªc_Àn
(
ext2_fûsys
 
fs
,

800 
ext2_dú_íåy
 *
dúít
,

801 *
ªc_Àn
);

802 
îrcode_t
 
ext2fs_£t_ªc_Àn
(
ext2_fûsys
 
fs
,

803 
Àn
,

804 
ext2_dú_íåy
 *
dúít
);

805 
îrcode_t
 
ext2fs_dú_ôî©e
(
ext2_fûsys
 
fs
,

806 
ext2_öo_t
 
dú
,

807 
Êags
,

808 *
block_buf
,

809 (*
func
)(
ext2_dú_íåy
 *
dúít
,

810 
off£t
,

811 
blocksize
,

812 *
buf
,

813 *
¥iv_d©a
),

814 *
¥iv_d©a
);

815 
îrcode_t
 
ext2fs_dú_ôî©e2
(
ext2_fûsys
 
fs
,

816 
ext2_öo_t
 
dú
,

817 
Êags
,

818 *
block_buf
,

819 (*
func
)(
ext2_öo_t
 
dú
,

820 
íåy
,

821 
ext2_dú_íåy
 *
dúít
,

822 
off£t
,

823 
blocksize
,

824 *
buf
,

825 *
¥iv_d©a
),

826 *
¥iv_d©a
);

829 
îrcode_t
 
ext2fs_dup_h™dÀ
(
ext2_fûsys
 
§c
,Éxt2_fûsy†*
de°
);

832 
îrcode_t
 
ext2fs_ex∑nd_dú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
);

835 
__u32
 
ext2fs_ext_©å_hash_íåy
(
ext2_ext_©å_íåy
 *
íåy
,

836 *
d©a
);

837 
îrcode_t
 
ext2fs_ªad_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
, *
buf
);

838 
îrcode_t
 
ext2fs_wrôe_ext_©å
(
ext2_fûsys
 
fs
, 
blk_t
 
block
,

839 *
buf
);

840 
îrcode_t
 
ext2fs_adju°_ó_ªfcou¡
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
,

841 *
block_buf
,

842 
adju°
, 
__u32
 *
√wcou¡
);

845 
îrcode_t
 
ext2fs_exã¡_hódî_vîify
(*
±r
, 
size
);

846 
îrcode_t
 
ext2fs_exã¡_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

847 
ext2_exã¡_h™dÀ_t
 *
h™dÀ
);

848 
îrcode_t
 
ext2fs_exã¡_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

849 
ext2_öode
 *
öode
,

850 
ext2_exã¡_h™dÀ_t
 *
ªt_h™dÀ
);

851 
ext2fs_exã¡_‰ì
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
);

852 
îrcode_t
 
ext2fs_exã¡_gë
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

853 
Êags
, 
ext2fs_exã¡
 *
exã¡
);

854 
îrcode_t
 
ext2fs_exã¡_ª∂a˚
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

855 
ext2fs_exã¡
 *
exã¡
);

856 
îrcode_t
 
ext2fs_exã¡_ö£π
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
,

857 
ext2fs_exã¡
 *
exã¡
);

858 
îrcode_t
 
ext2fs_exã¡_£t_bm≠
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

859 
blk64_t
 
logiˇl
, blk64_à
physiˇl
,

860 
Êags
);

861 
îrcode_t
 
ext2fs_exã¡_dñëe
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
, 
Êags
);

862 
îrcode_t
 
ext2fs_exã¡_gë_öfo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

863 
ext2_exã¡_öfo
 *
öfo
);

864 
îrcode_t
 
ext2fs_exã¡_gŸo
(
ext2_exã¡_h™dÀ_t
 
h™dÀ
,

865 
blk64_t
 
blk
);

868 
îrcode_t
 
ext2fs_fûe_›í2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

869 
ext2_öode
 *
öode
,

870 
Êags
, 
ext2_fûe_t
 *
ªt
);

871 
îrcode_t
 
ext2fs_fûe_›í
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

872 
Êags
, 
ext2_fûe_t
 *
ªt
);

873 
ext2_fûsys
 
ext2fs_fûe_gë_fs
(
ext2_fûe_t
 
fûe
);

874 
îrcode_t
 
ext2fs_fûe_˛o£
(
ext2_fûe_t
 
fûe
);

875 
îrcode_t
 
ext2fs_fûe_Êush
(
ext2_fûe_t
 
fûe
);

876 
îrcode_t
 
ext2fs_fûe_ªad
(
ext2_fûe_t
 
fûe
, *
buf
,

877 
w™ãd
, *
gŸ
);

878 
îrcode_t
 
ext2fs_fûe_wrôe
(
ext2_fûe_t
 
fûe
, c⁄° *
buf
,

879 
nbyãs
, *
wrôãn
);

880 
îrcode_t
 
ext2fs_fûe_Œ£ek
(
ext2_fûe_t
 
fûe
, 
__u64
 
off£t
,

881 
whí˚
, 
__u64
 *
ªt_pos
);

882 
îrcode_t
 
ext2fs_fûe_l£ek
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
off£t
,

883 
whí˚
, 
ext2_off_t
 *
ªt_pos
);

884 
îrcode_t
 
ext2fs_fûe_gë_lsize
(
ext2_fûe_t
 
fûe
, 
__u64
 *
ªt_size
);

885 
ext2_off_t
 
ext2fs_fûe_gë_size
(
ext2_fûe_t
 
fûe
);

886 
îrcode_t
 
ext2fs_fûe_£t_size
(
ext2_fûe_t
 
fûe
, 
ext2_off_t
 
size
);

889 *
ext2fs_föd_block_devi˚
(
dev_t
 
devi˚
);

892 
îrcode_t
 
ext2fs_sync_devi˚
(
fd
, 
Êushb
);

895 
ext2fs_‰ì
(
ext2_fûsys
 
fs
);

896 
ext2fs_‰ì_dbli°
(
ext2_dbli°
 
dbli°
);

897 
ext2fs_badblocks_li°_‰ì
(
ext2_badblocks_li°
 
bb
);

898 
ext2fs_u32_li°_‰ì
(
ext2_u32_li°
 
bb
);

901 
ext2fs_‰ì_gíîic_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
);

902 
îrcode_t
 
ext2fs_make_gíîic_bôm≠
”ºcode_à
magic
, 
ext2_fûsys
 
fs
,

903 
__u32
 
°¨t
, __u32 
íd
,

904 
__u32
 
ªÆ_íd
,

905 c⁄° *
des¸
, *
öô_m≠
,

906 
ext2fs_gíîic_bôm≠
 *
ªt
);

907 
îrcode_t
 
ext2fs_Æloˇã_gíîic_bôm≠
(
__u32
 
°¨t
,

908 
__u32
 
íd
,

909 
__u32
 
ªÆ_íd
,

910 c⁄° *
des¸
,

911 
ext2fs_gíîic_bôm≠
 *
ªt
);

912 
îrcode_t
 
ext2fs_c›y_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
§c
,

913 
ext2fs_gíîic_bôm≠
 *
de°
);

914 
ext2fs_˛ór_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

915 
îrcode_t
 
ext2fs_fudge_gíîic_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
,

916 
îrcode_t
 
magic
,

917 
îrcode_t
 
√q
,

918 
ext2_öo_t
 
íd
,

919 
ext2_öo_t
 *
€nd
);

920 
ext2fs_£t_gíîic_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
);

921 
îrcode_t
 
ext2fs_ªsize_gíîic_bôm≠
”ºcode_à
magic
,

922 
__u32
 
√w_íd
,

923 
__u32
 
√w_ªÆ_íd
,

924 
ext2fs_gíîic_bôm≠
 
bm≠
);

925 
îrcode_t
 
ext2fs_com∑ª_gíîic_bôm≠
”ºcode_à
magic
,Éºcode_à
√q
,

926 
ext2fs_gíîic_bôm≠
 
bm1
,

927 
ext2fs_gíîic_bôm≠
 
bm2
);

928 
îrcode_t
 
ext2fs_gë_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

929 
îrcode_t
 
magic
,

930 
__u32
 
°¨t
, __u32 
num
,

931 *
out
);

932 
îrcode_t
 
ext2fs_£t_gíîic_bôm≠_ønge
(
ext2fs_gíîic_bôm≠
 
bm≠
,

933 
îrcode_t
 
magic
,

934 
__u32
 
°¨t
, __u32 
num
,

935 *
ö
);

938 
îrcode_t
 
ext2fs_gë_devi˚_size
(c⁄° *
fûe
, 
blocksize
,

939 
blk_t
 *
ªtblocks
);

940 
îrcode_t
 
ext2fs_gë_devi˚_size2
(c⁄° *
fûe
, 
blocksize
,

941 
blk64_t
 *
ªtblocks
);

944 
îrcode_t
 
ext2fs_gë_devi˚_£˘size
(c⁄° *
fûe
, *
£˘size
);

947 
îrcode_t
 
ext2fs_iblk_add_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

948 
blk64_t
 
num_blocks
);

949 
îrcode_t
 
ext2fs_iblk_sub_blocks
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
,

950 
blk64_t
 
num_blocks
);

951 
îrcode_t
 
ext2fs_iblk_£t
(
ext2_fûsys
 
fs
, 
ext2_öode
 *
öode
, 
blk64_t
 
b
);

954 
îrcode_t
 
ext2fs_image_öode_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

955 
îrcode_t
 
ext2fs_image_öode_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

956 
îrcode_t
 
ext2fs_image_su≥r_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

957 
îrcode_t
 
ext2fs_image_su≥r_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

958 
îrcode_t
 
ext2fs_image_bôm≠_wrôe
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

959 
îrcode_t
 
ext2fs_image_bôm≠_ªad
(
ext2_fûsys
 
fs
, 
fd
, 
Êags
);

962 
îrcode_t
 
ext2fs_ªad_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

963 
îrcode_t
 
ext2fs_wrôe_öd_block
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, *
buf
);

966 
îrcode_t
 
ext2fs_öôülize
(c⁄° *
«me
, 
Êags
,

967 
ext2_su≥r_block
 *
∑øm
,

968 
io_m™agî
 
m™agî
, 
ext2_fûsys
 *
ªt_fs
);

971 
ext2fs_‰ì_icou¡
(
ext2_icou¡_t
 
icou¡
);

972 
îrcode_t
 
ext2fs_¸óã_icou¡_tdb
(
ext2_fûsys
 
fs
, *
tdb_dú
,

973 
Êags
, 
ext2_icou¡_t
 *
ªt
);

974 
îrcode_t
 
ext2fs_¸óã_icou¡2
(
ext2_fûsys
 
fs
, 
Êags
,

975 
size
,

976 
ext2_icou¡_t
 
höt
,Éxt2_icou¡_à*
ªt
);

977 
îrcode_t
 
ext2fs_¸óã_icou¡
(
ext2_fûsys
 
fs
, 
Êags
,

978 
size
,

979 
ext2_icou¡_t
 *
ªt
);

980 
îrcode_t
 
ext2fs_icou¡_„tch
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

981 
__u16
 *
ªt
);

982 
îrcode_t
 
ext2fs_icou¡_ö¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

983 
__u16
 *
ªt
);

984 
îrcode_t
 
ext2fs_icou¡_de¸emít
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

985 
__u16
 *
ªt
);

986 
îrcode_t
 
ext2fs_icou¡_°‹e
(
ext2_icou¡_t
 
icou¡
, 
ext2_öo_t
 
öo
,

987 
__u16
 
cou¡
);

988 
ext2_öo_t
 
ext2fs_gë_icou¡_size
(
ext2_icou¡_t
 
icou¡
);

989 
îrcode_t
 
ext2fs_icou¡_vÆid©e
(
ext2_icou¡_t
 
icou¡
, 
FILE
 *);

992 
îrcode_t
 
ext2fs_Êush_iˇche
(
ext2_fûsys
 
fs
);

993 
îrcode_t
 
ext2fs_gë_√xt_öode_fuŒ
(
ext2_öode_sˇn
 
sˇn
,

994 
ext2_öo_t
 *
öo
,

995 
ext2_öode
 *
öode
,

996 
bufsize
);

997 
îrcode_t
 
ext2fs_›í_öode_sˇn
(
ext2_fûsys
 
fs
, 
buf„r_blocks
,

998 
ext2_öode_sˇn
 *
ªt_sˇn
);

999 
ext2fs_˛o£_öode_sˇn
(
ext2_öode_sˇn
 
sˇn
);

1000 
îrcode_t
 
ext2fs_gë_√xt_öode
(
ext2_öode_sˇn
 
sˇn
, 
ext2_öo_t
 *
öo
,

1001 
ext2_öode
 *
öode
);

1002 
îrcode_t
 
ext2fs_öode_sˇn_gŸo_blockgroup
(
ext2_öode_sˇn
 
sˇn
,

1003 
group
);

1004 
ext2fs_£t_öode_ˇŒback


1005 (
ext2_öode_sˇn
 
sˇn
,

1006 
îrcode_t
 (*
d⁄e_group
)(
ext2_fûsys
 
fs
,

1007 
ext2_öode_sˇn
 
sˇn
,

1008 
dgΩ_t
 
group
,

1009 * 
¥iv_d©a
),

1010 *
d⁄e_group_d©a
);

1011 
ext2fs_öode_sˇn_Êags
(
ext2_öode_sˇn
 
sˇn
, 
£t_Êags
,

1012 
˛ór_Êags
);

1013 
îrcode_t
 
ext2fs_ªad_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1014 
ext2_öode
 * 
öode
,

1015 
bufsize
);

1016 
îrcode_t
 
ext2fs_ªad_öode
 (
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1017 
ext2_öode
 * 
öode
);

1018 
îrcode_t
 
ext2fs_wrôe_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1019 
ext2_öode
 * 
öode
,

1020 
bufsize
);

1021 
îrcode_t
 
ext2fs_wrôe_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1022 
ext2_öode
 * 
öode
);

1023 
îrcode_t
 
ext2fs_wrôe_√w_öode
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1024 
ext2_öode
 * 
öode
);

1025 
îrcode_t
 
ext2fs_gë_blocks
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
, 
blk_t
 *
blocks
);

1026 
îrcode_t
 
ext2fs_check_dúe˘‹y
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1029 
io_m™agî
 
öode_io_m™agî
;

1030 
îrcode_t
 
ext2fs_öode_io_öã∫
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1031 **
«me
);

1032 
îrcode_t
 
ext2fs_öode_io_öã∫2
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
,

1033 
ext2_öode
 *
öode
,

1034 **
«me
);

1037 
îrcode_t
 
ext2fs_check_if_mou¡ed
(c⁄° *
fûe
, *
mou¡_Êags
);

1038 
îrcode_t
 
ext2fs_check_mou¡_poöt
(c⁄° *
devi˚
, *
mou¡_Êags
,

1039 *
mçt
, 
méí
);

1042 
îrcode_t
 
ext2fs_lookup
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1043 
«mñí
, *
buf
, 
ext2_öo_t
 *
öode
);

1044 
îrcode_t
 
ext2fs_«mei
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1045 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1046 
îrcode_t
 
ext2fs_«mei_fﬁlow
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1047 c⁄° *
«me
, 
ext2_öo_t
 *
öode
);

1048 
îrcode_t
 
ext2fs_fﬁlow_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
roŸ
,Éxt2_öo_à
cwd
,

1049 
ext2_öo_t
 
öode
,Éxt2_öo_à*
ªs_öode
);

1052 
ext2fs_«tive_Êag
();

1055 
îrcode_t
 
ext2fs_√w_dú_block
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú_öo
,

1056 
ext2_öo_t
 
∑ª¡_öo
, **
block
);

1059 
îrcode_t
 
ext2fs_mkdú
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
∑ª¡
,Éxt2_öo_à
öum
,

1060 c⁄° *
«me
);

1063 
îrcode_t
 
ext2fs_zîo_blocks
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
, 
num
,

1064 
blk_t
 *
ªt_blk
, *
ªt_cou¡
);

1065 
îrcode_t
 
ext2fs_¸óã_jou∫Æ_su≥rblock
(
ext2_fûsys
 
fs
,

1066 
__u32
 
size
, 
Êags
,

1067 **
ªt_jsb
);

1068 
îrcode_t
 
ext2fs_add_jou∫Æ_devi˚
(
ext2_fûsys
 
fs
,

1069 
ext2_fûsys
 
jou∫Æ_dev
);

1070 
îrcode_t
 
ext2fs_add_jou∫Æ_öode
(
ext2_fûsys
 
fs
, 
blk_t
 
size
,

1071 
Êags
);

1072 
ext2fs_deÁu…_jou∫Æ_size
(
__u64
 
blocks
);

1075 
îrcode_t
 
ext2fs_›í
(c⁄° *
«me
, 
Êags
, 
su≥rblock
,

1076 
block_size
, 
io_m™agî
 
m™agî
,

1077 
ext2_fûsys
 *
ªt_fs
);

1078 
îrcode_t
 
ext2fs_›í2
(c⁄° *
«me
, c⁄° *
io_›ti⁄s
,

1079 
Êags
, 
su≥rblock
,

1080 
block_size
, 
io_m™agî
 
m™agî
,

1081 
ext2_fûsys
 *
ªt_fs
);

1082 
blk_t
 
ext2fs_des¸ùt‹_block_loc
(
ext2_fûsys
 
fs
, blk_à
group_block
,

1083 
dgΩ_t
 
i
);

1084 
îrcode_t
 
ext2fs_gë_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 *
ﬁd_io
);

1085 
îrcode_t
 
ext2fs_£t_d©a_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1086 
îrcode_t
 
ext2fs_ªwrôe_to_io
(
ext2_fûsys
 
fs
, 
io_ch™√l
 
√w_io
);

1089 
îrcode_t
 
ext2fs_gë_∑th«me
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
,Éxt2_öo_à
öo
,

1090 **
«me
);

1093 
îrcode_t
 
ext2fs_lök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1094 
ext2_öo_t
 
öo
, 
Êags
);

1095 
îrcode_t
 
ext2fs_u∆ök
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
dú
, c⁄° *
«me
,

1096 
ext2_öo_t
 
öo
, 
Êags
);

1099 
îrcode_t
 
ext2fs_ªad_bb_öode
(
ext2_fûsys
 
fs
,

1100 
ext2_badblocks_li°
 *
bb_li°
);

1103 
îrcode_t
 
ext2fs_ªad_bb_FILE2
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1104 
ext2_badblocks_li°
 *
bb_li°
,

1105 *
¥iv_d©a
,

1106 (*
övÆid
)(
ext2_fûsys
 
fs
,

1107 
blk_t
 
blk
,

1108 *
bad°r
,

1109 *
¥iv_d©a
));

1110 
îrcode_t
 
ext2fs_ªad_bb_FILE
(
ext2_fûsys
 
fs
, 
FILE
 *
f
,

1111 
ext2_badblocks_li°
 *
bb_li°
,

1112 (*
övÆid
)(
ext2_fûsys
 
fs
,

1113 
blk_t
 
blk
));

1116 
îrcode_t
 
ext2fs_¸óã_ªsize_öode
(
ext2_fûsys
 
fs
);

1119 
ext2fs_sw≠_ext_©å
(*
to
, *
‰om
, 
bufsize
,

1120 
has_hódî
);

1121 
ext2fs_sw≠_ext_©å_hódî
(
ext2_ext_©å_hódî
 *
to_hódî
,

1122 
ext2_ext_©å_hódî
 *
‰om_hdr
);

1123 
ext2fs_sw≠_ext_©å_íåy
(
ext2_ext_©å_íåy
 *
to_íåy
,

1124 
ext2_ext_©å_íåy
 *
‰om_íåy
);

1125 
ext2fs_sw≠_su≥r
(
ext2_su≥r_block
 * 
su≥r
);

1126 
ext2fs_sw≠_group_desc
(
ext2_group_desc
 *
gdp
);

1127 
ext2fs_sw≠_öode_fuŒ
(
ext2_fûsys
 
fs
, 
ext2_öode_œrge
 *
t
,

1128 
ext2_öode_œrge
 *
f
, 
ho°‹dî
,

1129 
bufsize
);

1130 
ext2fs_sw≠_öode
(
ext2_fûsys
 
fs
,
ext2_öode
 *
t
,

1131 
ext2_öode
 *
f
, 
ho°‹dî
);

1134 
ext2fs_öode_has_vÆid_blocks
(
ext2_öode
 *
öode
);

1137 
ext2fs_∑r£_vîsi⁄_°rög
(c⁄° *
vî_°rög
);

1138 
ext2fs_gë_libøry_vîsi⁄
(c⁄° **
vî_°rög
,

1139 c⁄° **
d©e_°rög
);

1142 
îrcode_t
 
ext2fs_wrôe_bb_FILE
(
ext2_badblocks_li°
 
bb_li°
,

1143 
Êags
,

1144 
FILE
 *
f
);

1148 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
);

1149 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
, 
size
, *
±r
);

1150 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
);

1151 
îrcode_t
 
ext2fs_ªsize_mem
(
ﬁd_size
,

1152 
size
, *
±r
);

1153 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
);

1154 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
);

1155 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
);

1156 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
);

1157 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
);

1158 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
);

1159 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
);

1160 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
);

1161 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
);

1162 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
);

1163 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
);

1164 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
);

1165 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1166 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
);

1167 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1168 
ext2_öode
 *
öode
);

1169 
ext2fs_div_˚û
(
a
, 
b
);

1177 #i‡(
deföed
(
INCLUDE_INLINE_FUNCS
Ë|| !deföed(
NO_INLINE_FUNCS
))

1178 #ifde‡
INCLUDE_INLINE_FUNCS


1179 
	#_INLINE_
 

	)

1181 #ifde‡
__GNUC__


1182 
	#_INLINE_
 
__ölöe__


	)

1184 
	#_INLINE_
 
ölöe


	)

1188 #i‚de‡
EXT2_CUSTOM_MEMORY_ROUTINES


1189 
	~<°rög.h
>

1193 
_INLINE_
 
îrcode_t
 
ext2fs_gë_mem
(
size
, *
±r
)

1195 *
µ
;

1197 
µ
 = 
mÆloc
(
size
);

1198 i‡(!
µ
)

1199  
EXT2_ET_NO_MEMORY
;

1200 
mem˝y
(
±r
, &
µ
,  (pp));

1204 
_INLINE_
 
îrcode_t
 
ext2fs_gë_¨øy
(
cou¡
, 
size
, *
±r
)

1206 i‡(
cou¡
 && (-1UL)/cou¡<
size
)

1207  
EXT2_ET_NO_MEMORY
;

1208  
ext2fs_gë_mem
(
cou¡
*
size
, 
±r
);

1214 
_INLINE_
 
îrcode_t
 
ext2fs_‰ì_mem
(*
±r
)

1216 *
p
;

1218 
mem˝y
(&
p
, 
±r
, (p));

1219 
‰ì
(
p
);

1220 
p
 = 0;

1221 
mem˝y
(
±r
, &
p
, (p));

1228 
_INLINE_
 
îrcode_t
 
ext2fs_ªsize_mem
(
EXT2FS_ATTR
((
unu£d
)Ë
ﬁd_size
,

1229 
size
, *
±r
)

1231 *
p
;

1235 
mem˝y
(&
p
, 
±r
, (p));

1236 
p
 = 
ªÆloc
’, 
size
);

1237 i‡(!
p
)

1238  
EXT2_ET_NO_MEMORY
;

1239 
mem˝y
(
±r
, &
p
, (p));

1247 
_INLINE_
 
ext2fs_m¨k_su≥r_dúty
(
ext2_fûsys
 
fs
)

1249 
fs
->
Êags
 |
EXT2_FLAG_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1255 
_INLINE_
 
ext2fs_m¨k_ch™ged
(
ext2_fûsys
 
fs
)

1257 
fs
->
Êags
 |
EXT2_FLAG_CHANGED
;

1263 
_INLINE_
 
ext2fs_ã°_ch™ged
(
ext2_fûsys
 
fs
)

1265  (
fs
->
Êags
 & 
EXT2_FLAG_CHANGED
);

1271 
_INLINE_
 
ext2fs_m¨k_vÆid
(
ext2_fûsys
 
fs
)

1273 
fs
->
Êags
 |
EXT2_FLAG_VALID
;

1279 
_INLINE_
 
ext2fs_unm¨k_vÆid
(
ext2_fûsys
 
fs
)

1281 
fs
->
Êags
 &~
EXT2_FLAG_VALID
;

1287 
_INLINE_
 
ext2fs_ã°_vÆid
(
ext2_fûsys
 
fs
)

1289  (
fs
->
Êags
 & 
EXT2_FLAG_VALID
);

1295 
_INLINE_
 
ext2fs_m¨k_ib_dúty
(
ext2_fûsys
 
fs
)

1297 
fs
->
Êags
 |
EXT2_FLAG_IB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1303 
_INLINE_
 
ext2fs_m¨k_bb_dúty
(
ext2_fûsys
 
fs
)

1305 
fs
->
Êags
 |
EXT2_FLAG_BB_DIRTY
 | 
EXT2_FLAG_CHANGED
;

1311 
_INLINE_
 
ext2fs_ã°_ib_dúty
(
ext2_fûsys
 
fs
)

1313  (
fs
->
Êags
 & 
EXT2_FLAG_IB_DIRTY
);

1319 
_INLINE_
 
ext2fs_ã°_bb_dúty
(
ext2_fûsys
 
fs
)

1321  (
fs
->
Êags
 & 
EXT2_FLAG_BB_DIRTY
);

1327 
_INLINE_
 
ext2fs_group_of_blk
(
ext2_fûsys
 
fs
, 
blk_t
 
blk
)

1329  (
blk
 - 
fs
->
su≥r
->
s_fú°_d©a_block
) /

1330 
fs
->
su≥r
->
s_blocks_≥r_group
;

1336 
_INLINE_
 
ext2fs_group_of_öo
(
ext2_fûsys
 
fs
, 
ext2_öo_t
 
öo
)

1338  (
öo
 - 1Ë/ 
fs
->
su≥r
->
s_öodes_≥r_group
;

1344 
_INLINE_
 
blk_t
 
ext2fs_group_fú°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1346  
fs
->
su≥r
->
s_fú°_d©a_block
 +

1347 (
group
 * 
fs
->
su≥r
->
s_blocks_≥r_group
);

1353 
_INLINE_
 
blk_t
 
ext2fs_group_œ°_block
(
ext2_fûsys
 
fs
, 
dgΩ_t
 
group
)

1355  (
group
 =
fs
->
group_desc_cou¡
 - 1 ?

1356 
fs
->
su≥r
->
s_blocks_cou¡
 - 1 :

1357 
ext2fs_group_fú°_block
(
fs
, 
group
) +

1358 (
fs
->
su≥r
->
s_blocks_≥r_group
 - 1));

1361 
_INLINE_
 
blk_t
 
ext2fs_öode_d©a_blocks
(
ext2_fûsys
 
fs
,

1362 
ext2_öode
 *
öode
)

1364  
öode
->
i_blocks
 -

1365 (
öode
->
i_fûe_a˛
 ? 
fs
->
blocksize
 >> 9 : 0);

1371 
_INLINE_
 
ext2fs_div_˚û
(
a
, 
b
)

1373 i‡(!
a
)

1375  ((
a
 - 1Ë/ 
b
) + 1;

1377 #unde‡
_INLINE_


1380 #ifde‡
__˝lu•lus


	@/usr/include/ext2fs/tdb.h

1 #i‚de‡
__TDB_H__


2 
	#__TDB_H__


	)

30 #ifde‡ 
__˝lu•lus


36 
	#TDB_REPLACE
 1

	)

37 
	#TDB_INSERT
 2

	)

38 
	#TDB_MODIFY
 3

	)

41 
	#TDB_DEFAULT
 0

	)

42 
	#TDB_CLEAR_IF_FIRST
 1

	)

43 
	#TDB_INTERNAL
 2

	)

44 
	#TDB_NOLOCK
 4

	)

45 
	#TDB_NOMMAP
 8

	)

46 
	#TDB_CONVERT
 16

	)

47 
	#TDB_BIGENDIAN
 32

	)

48 
	#TDB_NOSYNC
 64

	)

49 
	#TDB_SEQNUM
 128

	)

51 
	#TDB_ERRCODE
(
code
, 
ªt
Ë((
tdb
->
ecode
 = (code)),Ñë)

	)

54 
	eTDB_ERROR
 {
TDB_SUCCESS
=0, 
TDB_ERR_CORRUPT
, 
TDB_ERR_IO
, 
TDB_ERR_LOCK
,

55 
TDB_ERR_OOM
, 
TDB_ERR_EXISTS
, 
TDB_ERR_NOLOCK
, 
TDB_ERR_LOCK_TIMEOUT
,

56 
TDB_ERR_NOEXIST
, 
TDB_ERR_EINVAL
, 
TDB_ERR_RDONLY
};

59 
	etdb_debug_Àvñ
 {
TDB_DEBUG_FATAL
 = 0, 
TDB_DEBUG_ERROR
,

60 
TDB_DEBUG_WARNING
, 
TDB_DEBUG_TRACE
};

62 
	sTDB_DATA
 {

63 *
d±r
;

64 
size_t
 
dsize
;

65 } 
	tTDB_DATA
;

67 #i‚de‡
PRINTF_ATTRIBUTE


68 #i‡(
__GNUC__
 >= 3)

73 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
Ë
	`__©åibuã__
 ((
	`f‹m©
 (
__¥ötf__
,á1,á2)))

	)

75 
	#PRINTF_ATTRIBUTE
(
a1
, 
a2
)

	)

80 
	#tdb_›í
 
ext2fs_tdb_›í


	)

81 
	#tdb_›í_ex
 
ext2fs_tdb_›í_ex


	)

82 
	#tdb_£t_max_dód
 
ext2fs_tdb_£t_max_dód


	)

83 
	#tdb_ª›í
 
ext2fs_tdb_ª›í


	)

84 
	#tdb_ª›í_Æl
 
ext2fs_tdb_ª›í_Æl


	)

85 
	#tdb_£t_loggög_fun˘i⁄
 
ext2fs_tdb_£t_loggög_fun˘i⁄


	)

86 
	#tdb_îr‹
 
ext2fs_tdb_îr‹


	)

87 
	#tdb_îr‹°r
 
ext2fs_tdb_îr‹°r


	)

88 
	#tdb_„tch
 
ext2fs_tdb_„tch


	)

89 
	#tdb_∑r£_ªc‹d
 
ext2fs_tdb_∑r£_ªc‹d


	)

90 
	#tdb_dñëe
 
ext2fs_tdb_dñëe


	)

91 
	#tdb_°‹e
 
ext2fs_tdb_°‹e


	)

92 
	#tdb_≠≥nd
 
ext2fs_tdb_≠≥nd


	)

93 
	#tdb_˛o£
 
ext2fs_tdb_˛o£


	)

94 
	#tdb_fú°key
 
ext2fs_tdb_fú°key


	)

95 
	#tdb_√xtkey
 
ext2fs_tdb_√xtkey


	)

96 
	#tdb_åavî£
 
ext2fs_tdb_åavî£


	)

97 
	#tdb_åavî£_ªad
 
ext2fs_tdb_åavî£_ªad


	)

98 
	#tdb_exi°s
 
ext2fs_tdb_exi°s


	)

99 
	#tdb_lockÆl
 
ext2fs_tdb_lockÆl


	)

100 
	#tdb_u∆ockÆl
 
ext2fs_tdb_u∆ockÆl


	)

101 
	#tdb_lockÆl_ªad
 
ext2fs_tdb_lockÆl_ªad


	)

102 
	#tdb_u∆ockÆl_ªad
 
ext2fs_tdb_u∆ockÆl_ªad


	)

103 
	#tdb_«me
 
ext2fs_tdb_«me


	)

104 
	#tdb_fd
 
ext2fs_tdb_fd


	)

105 
	#tdb_log_‚
 
ext2fs_tdb_log_‚


	)

106 
	#tdb_gë_loggög_¥iv©e
 
ext2fs_tdb_gë_loggög_¥iv©e


	)

107 
	#tdb_å™ß˘i⁄_°¨t
 
ext2fs_tdb_å™ß˘i⁄_°¨t


	)

108 
	#tdb_å™ß˘i⁄_commô
 
ext2fs_tdb_å™ß˘i⁄_commô


	)

109 
	#tdb_å™ß˘i⁄_ˇn˚l
 
ext2fs_tdb_å™ß˘i⁄_ˇn˚l


	)

110 
	#tdb_å™ß˘i⁄_ªcovî
 
ext2fs_tdb_å™ß˘i⁄_ªcovî


	)

111 
	#tdb_gë_£qnum
 
ext2fs_tdb_gë_£qnum


	)

112 
	#tdb_hash_size
 
ext2fs_tdb_hash_size


	)

113 
	#tdb_m≠_size
 
ext2fs_tdb_m≠_size


	)

114 
	#tdb_gë_Êags
 
ext2fs_tdb_gë_Êags


	)

115 
	#tdb_chaölock
 
ext2fs_tdb_chaölock


	)

116 
	#tdb_chaöu∆ock
 
ext2fs_tdb_chaöu∆ock


	)

117 
	#tdb_chaölock_ªad
 
ext2fs_tdb_chaölock_ªad


	)

118 
	#tdb_chaöu∆ock_ªad
 
ext2fs_tdb_chaöu∆ock_ªad


	)

119 
	#tdb_dump_Æl
 
ext2fs_tdb_dump_Æl


	)

120 
	#tdb_¥öt‰ìli°
 
ext2fs_tdb_¥öt‰ìli°


	)

121 
	#tdb_vÆid©e_‰ìli°
 
ext2fs_tdb_vÆid©e_‰ìli°


	)

122 
	#tdb_chaölock_m¨k
 
ext2fs_tdb_chaölock_m¨k


	)

123 
	#tdb_chaölock_n⁄block
 
ext2fs_tdb_chaölock_n⁄block


	)

124 
	#tdb_chaölock_unm¨k
 
ext2fs_tdb_chaölock_unm¨k


	)

125 
	#tdb_íabÀ_£qnum
 
ext2fs_tdb_íabÀ_£qnum


	)

126 
	#tdb_ö¸emít_£qnum_n⁄block
 
ext2fs_tdb_ö¸emít_£qnum_n⁄block


	)

127 
	#tdb_lock_n⁄block
 
ext2fs_tdb_lock_n⁄block


	)

128 
	#tdb_lockÆl_m¨k
 
ext2fs_tdb_lockÆl_m¨k


	)

129 
	#tdb_lockÆl_n⁄block
 
ext2fs_tdb_lockÆl_n⁄block


	)

130 
	#tdb_lockÆl_ªad_n⁄block
 
ext2fs_tdb_lockÆl_ªad_n⁄block


	)

131 
	#tdb_lockÆl_unm¨k
 
ext2fs_tdb_lockÆl_unm¨k


	)

134 
tdb_c⁄ãxt
 
	tTDB_CONTEXT
;

136 (*
tdb_åavî£_func
)(
	ttdb_c⁄ãxt
 *, 
	tTDB_DATA
, TDB_DATA, *);

137 (*
tdb_log_func
)(
	ttdb_c⁄ãxt
 *, 
	ttdb_debug_Àvñ
, c⁄° *, ...Ë
	tPRINTF_ATTRIBUTE
(3, 4);

138 (*
	ttdb_hash_func
)(
	tTDB_DATA
 *
	tkey
);

140 
	stdb_loggög_c⁄ãxt
 {

141 
tdb_log_func
 
log_‚
;

142 *
log_¥iv©e
;

145 
tdb_c⁄ãxt
 *
tdb_›í
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

146 
›í_Êags
, 
mode_t
 
mode
);

147 
tdb_c⁄ãxt
 *
tdb_›í_ex
(c⁄° *
«me
, 
hash_size
, 
tdb_Êags
,

148 
›í_Êags
, 
mode_t
 
mode
,

149 c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
,

150 
tdb_hash_func
 
hash_‚
);

151 
tdb_£t_max_dód
(
tdb_c⁄ãxt
 *
tdb
, 
max_dód
);

153 
tdb_ª›í
(
tdb_c⁄ãxt
 *
tdb
);

154 
tdb_ª›í_Æl
(
∑ª¡_l⁄glived
);

155 
tdb_£t_loggög_fun˘i⁄
(
tdb_c⁄ãxt
 *
tdb
, c⁄° 
tdb_loggög_c⁄ãxt
 *
log_˘x
);

156 
TDB_ERROR
 
tdb_îr‹
(
tdb_c⁄ãxt
 *
tdb
);

157 c⁄° *
tdb_îr‹°r
(
tdb_c⁄ãxt
 *
tdb
);

158 
TDB_DATA
 
tdb_„tch
(
tdb_c⁄ãxt
 *
tdb
, TDB_DATA 
key
);

159 
tdb_∑r£_ªc‹d
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
,

160 (*
∑r£r
)(
TDB_DATA
 
key
, TDB_DATA 
d©a
,

161 *
¥iv©e_d©a
),

162 *
¥iv©e_d©a
);

163 
tdb_dñëe
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

164 
tdb_°‹e
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
dbuf
, 
Êag
);

165 
tdb_≠≥nd
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
, TDB_DATA 
√w_dbuf
);

166 
tdb_˛o£
(
tdb_c⁄ãxt
 *
tdb
);

167 
TDB_DATA
 
tdb_fú°key
(
tdb_c⁄ãxt
 *
tdb
);

168 
TDB_DATA
 
tdb_√xtkey
(
tdb_c⁄ãxt
 *
tdb
, TDB_DATA 
key
);

169 
tdb_åavî£
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_åavî£_func
 
‚
, *);

170 
tdb_åavî£_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
tdb_åavî£_func
 
‚
, *);

171 
tdb_exi°s
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

172 
tdb_lockÆl
(
tdb_c⁄ãxt
 *
tdb
);

173 
tdb_lockÆl_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

174 
tdb_u∆ockÆl
(
tdb_c⁄ãxt
 *
tdb
);

175 
tdb_lockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
);

176 
tdb_lockÆl_ªad_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

177 
tdb_u∆ockÆl_ªad
(
tdb_c⁄ãxt
 *
tdb
);

178 
tdb_lockÆl_m¨k
(
tdb_c⁄ãxt
 *
tdb
);

179 
tdb_lockÆl_unm¨k
(
tdb_c⁄ãxt
 *
tdb
);

180 c⁄° *
tdb_«me
(
tdb_c⁄ãxt
 *
tdb
);

181 
tdb_fd
(
tdb_c⁄ãxt
 *
tdb
);

182 
tdb_log_func
 
tdb_log_‚
(
tdb_c⁄ãxt
 *
tdb
);

183 *
tdb_gë_loggög_¥iv©e
(
tdb_c⁄ãxt
 *
tdb
);

184 
tdb_å™ß˘i⁄_°¨t
(
tdb_c⁄ãxt
 *
tdb
);

185 
tdb_å™ß˘i⁄_commô
(
tdb_c⁄ãxt
 *
tdb
);

186 
tdb_å™ß˘i⁄_ˇn˚l
(
tdb_c⁄ãxt
 *
tdb
);

187 
tdb_å™ß˘i⁄_ªcovî
(
tdb_c⁄ãxt
 *
tdb
);

188 
tdb_gë_£qnum
(
tdb_c⁄ãxt
 *
tdb
);

189 
tdb_hash_size
(
tdb_c⁄ãxt
 *
tdb
);

190 
size_t
 
tdb_m≠_size
(
tdb_c⁄ãxt
 *
tdb
);

191 
tdb_gë_Êags
(
tdb_c⁄ãxt
 *
tdb
);

192 
tdb_íabÀ_£qnum
(
tdb_c⁄ãxt
 *
tdb
);

193 
tdb_ö¸emít_£qnum_n⁄block
(
tdb_c⁄ãxt
 *
tdb
);

196 
tdb_chaölock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

197 
tdb_chaölock_n⁄block
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

198 
tdb_chaöu∆ock
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

199 
tdb_chaölock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

200 
tdb_chaöu∆ock_ªad
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

201 
tdb_chaölock_m¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

202 
tdb_chaölock_unm¨k
(
tdb_c⁄ãxt
 *
tdb
, 
TDB_DATA
 
key
);

205 
tdb_dump_Æl
(
tdb_c⁄ãxt
 *
tdb
);

206 
tdb_¥öt‰ìli°
(
tdb_c⁄ãxt
 *
tdb
);

207 
tdb_vÆid©e_‰ìli°
(
tdb_c⁄ãxt
 *
tdb
, *
≤um_íåõs
);

209 
TDB_DATA
 
tdb_nuŒ
;

211 #ifde‡ 
__˝lu•lus


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

64 
f˙é
 (
__fd
, 
__cmd
, ...);

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__REDIRECT


76 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

77 
	`__n⁄nuŒ
 ((1));

79 
	#›í
 
›í64


	)

82 #ifde‡
__USE_LARGEFILE64


83 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

86 #ifde‡
__USE_ATFILE


96 #i‚de‡
__USE_FILE_OFFSET64


97 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

98 
	`__n⁄nuŒ
 ((2));

100 #ifde‡
__REDIRECT


101 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

102 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

104 
	#›í©
 
›í©64


	)

108 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

109 
	`__n⁄nuŒ
 ((2));

117 #i‚de‡
__USE_FILE_OFFSET64


118 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

120 #ifde‡
__REDIRECT


121 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

122 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

124 
	#¸ót
 
¸ót64


	)

127 #ifde‡
__USE_LARGEFILE64


128 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

131 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

132 && !
deföed
 
__USE_POSIX
))

141 
	#F_ULOCK
 0

	)

142 
	#F_LOCK
 1

	)

143 
	#F_TLOCK
 2

	)

144 
	#F_TEST
 3

	)

146 #i‚de‡
__USE_FILE_OFFSET64


147 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

149 #ifde‡
__REDIRECT


150 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

152 
	#lockf
 
lockf64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

160 #ifde‡
__USE_XOPEN2K


163 #i‚de‡
__USE_FILE_OFFSET64


164 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

165 
__advi£
Ë
__THROW
;

167 #ifde‡
__REDIRECT_NTH


168 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

169 
__off64_t
 
__Àn
, 
__advi£
),

170 
posix_Ádvi£64
);

172 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

175 #ifde‡
__USE_LARGEFILE64


176 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

177 
__advi£
Ë
__THROW
;

185 #i‚de‡
__USE_FILE_OFFSET64


186 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

190 
__off64_t
 
__Àn
),

191 
posix_ÁŒoˇã64
);

193 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

196 #ifde‡
__USE_LARGEFILE64


197 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

203 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

204 && 
deföed
 
__va_¨g_∑ck_Àn


205 
	~<bôs/f˙é2.h
>

208 
__END_DECLS


	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/grp.h

23 #i‚def 
_GRP_H


24 
	#_GRP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

37 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

43 
	sgroup


45 *
	mgr_«me
;

46 *
	mgr_∑sswd
;

47 
__gid_t
 
	mgr_gid
;

48 **
	mgr_mem
;

52 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


53 
	#__√ed_FILE


	)

54 
	~<°dio.h
>

58 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


63 
£tgª¡
 ();

69 
ídgª¡
 ();

75 
group
 *
gëgª¡
 ();

78 #ifdef 
__USE_SVID


85 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

88 #ifde‡
__USE_GNU


95 
putgª¡
 (
__c⁄°
 
group
 *
__ª°ri˘
 
__p
,

96 
FILE
 *
__ª°ri˘
 
__f
);

103 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

109 
group
 *
gëg∫am
 (
__c⁄°
 *
__«me
);

111 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


113 #ifde‡
__USE_MISC


116 
	#NSS_BUFLEN_GROUP
 1024

	)

132 #ifde‡
__USE_GNU


133 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

134 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

135 
group
 **
__ª°ri˘
 
__ªsu…
);

142 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

143 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

144 
group
 **
__ª°ri˘
 
__ªsu…
);

150 
gëg∫am_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
group
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
group
 **
__ª°ri˘
 
__ªsu…
);

155 #ifdef 
__USE_SVID


163 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

164 
group
 *
__ª°ri˘
 
__ªsu…buf
,

165 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

166 
group
 **
__ª°ri˘
 
__ªsu…
);

172 #ifdef 
__USE_BSD


174 
	#__√ed_size_t


	)

175 
	~<°ddef.h
>

178 
	$£tgroups
 (
size_t
 
__n
, 
__c⁄°
 
__gid_t
 *
__groups
Ë
__THROW
;

188 
	`gëgrou∂i°
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
,

189 
__gid_t
 *
__groups
, *
__ngroups
);

199 
	`öôgroups
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
);

203 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libgen.h

19 #i‚de‡
_LIBGEN_H


20 
	#_LIBGEN_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


27 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

35 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

36 
	#ba£«me
 
__xpg_ba£«me


	)

38 
__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/fd.h

1 #i‚de‡
_LINUX_FD_H


2 
	#_LINUX_FD_H


	)

4 
	~<löux/io˘l.h
>

13 
	sÊ›py_°ru˘
 {

14 
	msize
,

15 
	m£˘
,

16 
	mhód
,

17 
	måack
,

18 
	m°ªtch
;

22 
	#FD_STRETCH
 1

	)

23 
	#FD_SWAPSIDES
 2

	)

24 
	#FD_ZEROBASED
 4

	)

25 
	#FD_SECTBASEMASK
 0x3FC

	)

26 
	#FD_MKSECTBASE
(
s
Ë(((sË^ 1Ë<< 2)

	)

27 
	#FD_SECTBASE
(
Ê›py
Ë((((Ê›py)->
°ªtch
 & 
FD_SECTBASEMASK
Ë>> 2Ë^ 1)

	)

29 
	mg≠
,

31 
	møã
,

32 
	#FD_2M
 0x4

	)

33 
	#FD_SIZECODEMASK
 0x38

	)

34 
	#FD_SIZECODE
(
Ê›py
Ë(((((Ê›py)->
øã
&
FD_SIZECODEMASK
)>> 3)+ 2Ë%8)

	)

35 
	#FD_SECTSIZE
(
Ê›py
Ë–(Ê›py)->
øã
 & 
FD_2M
 ? \

36 512 : 128 << 
	`FD_SIZECODE
(
Ê›py
Ë)

	)

37 
	#FD_PERP
 0x40

	)

39 
	m•ec1
,

40 
	mfmt_g≠
;

41 c⁄° * 
	m«me
;

48 
	#FDCLRPRM
 
	`_IO
(2, 0x41)

	)

51 
	#FDSETPRM
 
	`_IOW
(2, 0x42, 
Ê›py_°ru˘
)

	)

52 
	#FDSETMEDIAPRM
 
FDSETPRM


	)

55 
	#FDDEFPRM
 
	`_IOW
(2, 0x43, 
Ê›py_°ru˘
)

	)

56 
	#FDGETPRM
 
	`_IOR
(2, 0x04, 
Ê›py_°ru˘
)

	)

57 
	#FDDEFMEDIAPRM
 
FDDEFPRM


	)

58 
	#FDGETMEDIAPRM
 
FDGETPRM


	)

62 
	#FDMSGON
 
	`_IO
(2,0x45)

	)

63 
	#FDMSGOFF
 
	`_IO
(2,0x46)

	)

70 
	#FD_FILL_BYTE
 0xF6

	)

72 
	sf‹m©_des¸
 {

73 
	mdevi˚
,
	mhód
,
	måack
;

76 
	#FDFMTBEG
 
	`_IO
(2,0x47)

	)

78 
	#FDFMTTRK
 
	`_IOW
(2,0x48, 
f‹m©_des¸
)

	)

80 
	#FDFMTEND
 
	`_IO
(2,0x49)

	)

87 
	sÊ›py_max_îr‹s
 {

89 
	mab‹t
,

90 
	mªad_åack
,

92 
	mª£t
,

93 
	mªˇl
,

101 
	mªp‹tög
;

105 
	#FDSETEMSGTRESH
 
	`_IO
(2,0x4a)

	)

108 
	#FDFLUSH
 
	`_IO
(2,0x4b)

	)

112 
	#FDSETMAXERRS
 
	`_IOW
(2, 0x4c, 
Ê›py_max_îr‹s
)

	)

113 
	#FDGETMAXERRS
 
	`_IOR
(2, 0x0e, 
Ê›py_max_îr‹s
)

	)

118 
	tÊ›py_drive_«me
[16];

119 
	#FDGETDRVTYP
 
	`_IOR
(2, 0x0f, 
Ê›py_drive_«me
)

	)

126 
	sÊ›py_drive_∑øms
 {

127 sig√d 
	mcmos
;

132 
	mmax_då
;

133 
	mh…
;

134 
	mhut
;

136 
	m§t
;

138 
	m•öup
;

140 
	m•ödown
;

141 
	m•ödown_off£t
;

143 
	m£À˘_dñay
;

144 
	mΩs
;

145 
	måacks
;

146 
	mtimeout
;

148 
	möãæóve_£˘
;

151 
Ê›py_max_îr‹s
 
	mmax_îr‹s
;

153 
	mÊags
;

160 
	#FTD_MSG
 0x10

	)

161 
	#FD_BROKEN_DCL
 0x20

	)

162 
	#FD_DEBUG
 0x02

	)

163 
	#FD_SILENT_DCL_CLEAR
 0x4

	)

164 
	#FD_INVERTED_DCL
 0x80

	)

167 
	mªad_åack
;

174 
	mautodëe˘
[8];

176 
	mcheck‰eq
;

178 
	m«tive_f‹m©
;

182 
	mFD_NEED_TWADDLE_BIT
,

183 
	mFD_VERIFY_BIT
,

184 
	mFD_DISK_NEWCHANGE_BIT
,

186 
	mFD_UNUSED_BIT
,

187 
	mFD_DISK_CHANGED_BIT
,

188 
	mFD_DISK_WRITABLE_BIT


191 
	#FDSETDRVPRM
 
	`_IOW
(2, 0x90, 
Ê›py_drive_∑øms
)

	)

192 
	#FDGETDRVPRM
 
	`_IOR
(2, 0x11, 
Ê›py_drive_∑øms
)

	)

199 
	sÊ›py_drive_°ru˘
 {

200 
	mÊags
;

202 
	#FD_NEED_TWADDLE
 (1 << 
FD_NEED_TWADDLE_BIT
)

	)

203 
	#FD_VERIFY
 (1 << 
FD_VERIFY_BIT
)

	)

204 
	#FD_DISK_NEWCHANGE
 (1 << 
FD_DISK_NEWCHANGE_BIT
)

	)

205 
	#FD_DISK_CHANGED
 (1 << 
FD_DISK_CHANGED_BIT
)

	)

206 
	#FD_DISK_WRITABLE
 (1 << 
FD_DISK_WRITABLE_BIT
)

	)

208 
	m•öup_d©e
;

209 
	m£À˘_d©e
;

210 
	mfú°_ªad_d©e
;

211 
	m¥obed_f‹m©
;

212 
	måack
;

213 
	mmaxblock
;

214 
	mmaxåack
;

215 
	mgíî©i⁄
;

222 
	mkìp_d©a
;

225 
	mfd_ªf
;

226 
	mfd_devi˚
;

227 
	mœ°_checked
;

230 *
	mdmabuf
;

231 
	mbufblocks
;

234 
	#FDGETDRVSTAT
 
	`_IOR
(2, 0x12, 
Ê›py_drive_°ru˘
)

	)

235 
	#FDPOLLDRVSTAT
 
	`_IOR
(2, 0x13, 
Ê›py_drive_°ru˘
)

	)

242 
	eª£t_mode
 {

243 
	mFD_RESET_IF_NEEDED
,

244 
	mFD_RESET_IF_RAWCMD
,

245 
	mFD_RESET_ALWAYS


247 
	#FDRESET
 
	`_IO
(2, 0x54)

	)

253 
	sÊ›py_fdc_°©e
 {

254 
	m•ec1
;

255 
	m•ec2
;

256 
	mdå
;

257 
	mvîsi⁄
;

258 
	md‹
;

259 
	maddªss
;

260 
	møwcmd
:2;

261 
	mª£t
:1;

262 
	m√ed_c⁄figuª
:1;

263 
	m≥Ω_mode
:2;

264 
	mhas_fifo
:1;

265 
	mdrivî_vîsi⁄
;

266 
	#FD_DRIVER_VERSION
 0x100

	)

274 
	måack
[4];

285 
	#FDGETFDCSTAT
 
	`_IOR
(2, 0x15, 
Ê›py_fdc_°©e
)

	)

291 
	sÊ›py_wrôe_îr‹s
 {

300 
	mwrôe_îr‹s
;

304 
	mfú°_îr‹_£˘‹
;

305 
	mfú°_îr‹_gíî©i⁄
;

306 
	mœ°_îr‹_£˘‹
;

307 
	mœ°_îr‹_gíî©i⁄
;

309 
	mbad√ss
;

313 
	#FDWERRORCLR
 
	`_IO
(2, 0x56)

	)

315 
	#FDWERRORGET
 
	`_IOR
(2, 0x17, 
Ê›py_wrôe_îr‹s
)

	)

323 
	#FDHAVEBATCHEDRAWCMD


	)

325 
	sÊ›py_øw_cmd
 {

326 
	mÊags
;

327 
	#FD_RAW_READ
 1

	)

328 
	#FD_RAW_WRITE
 2

	)

329 
	#FD_RAW_NO_MOTOR
 4

	)

330 
	#FD_RAW_DISK_CHANGE
 4

	)

331 
	#FD_RAW_INTR
 8

	)

332 
	#FD_RAW_SPIN
 0x10

	)

333 
	#FD_RAW_NO_MOTOR_AFTER
 0x20

	)

335 
	#FD_RAW_NEED_DISK
 0x40

	)

336 
	#FD_RAW_NEED_SEEK
 0x80

	)

339 
	#FD_RAW_MORE
 0x100

	)

340 
	#FD_RAW_STOP_IF_FAILURE
 0x200

	)

341 
	#FD_RAW_STOP_IF_SUCCESS
 0x400

	)

342 
	#FD_RAW_SOFTFAILURE
 0x800

	)

346 
	#FD_RAW_FAILURE
 0x10000

	)

347 
	#FD_RAW_HARDFAILURE
 0x20000

	)

349 *
	md©a
;

350 *
	mkî√l_d©a
;

351 
Ê›py_øw_cmd
 *
	m√xt
;

353 
	mÀngth
;

354 
	mphys_Àngth
;

355 
	mbuf„r_Àngth
;

357 
	møã
;

358 
	mcmd_cou¡
;

359 
	mcmd
[16];

360 
	mª∂y_cou¡
;

361 
	mª∂y
[16];

362 
	måack
;

363 
	mªsu…code
;

365 
	mª£rved1
;

366 
	mª£rved2
;

369 
	#FDRAWCMD
 
	`_IO
(2, 0x58)

	)

373 
	#FDTWADDLE
 
	`_IO
(2, 0x59)

	)

377 
	#FDEJECT
 
	`_IO
(2, 0x5a)

	)

	@/usr/include/linux/fiemap.h

11 #i‚de‡
_LINUX_FIEMAP_H


12 
	#_LINUX_FIEMAP_H


	)

14 
	~<löux/ty≥s.h
>

16 
	sfõm≠_exã¡
 {

17 
__u64
 
	m„_logiˇl
;

19 
__u64
 
	m„_physiˇl
;

21 
__u64
 
	m„_Àngth
;

22 
__u64
 
	m„_ª£rved64
[2];

23 
__u32
 
	m„_Êags
;

24 
__u32
 
	m„_ª£rved
[3];

27 
	sfõm≠
 {

28 
__u64
 
	mfm_°¨t
;

30 
__u64
 
	mfm_Àngth
;

32 
__u32
 
	mfm_Êags
;

33 
__u32
 
	mfm_m≠≥d_exã¡s
;

34 
__u32
 
	mfm_exã¡_cou¡
;

35 
__u32
 
	mfm_ª£rved
;

36 
fõm≠_exã¡
 
	mfm_exã¡s
[0];

39 
	#FIEMAP_MAX_OFFSET
 (~0ULL)

	)

41 
	#FIEMAP_FLAG_SYNC
 0x00000001

	)

42 
	#FIEMAP_FLAG_XATTR
 0x00000002

	)

44 
	#FIEMAP_FLAGS_COMPAT
 (
FIEMAP_FLAG_SYNC
 | 
FIEMAP_FLAG_XATTR
)

	)

46 
	#FIEMAP_EXTENT_LAST
 0x00000001

	)

47 
	#FIEMAP_EXTENT_UNKNOWN
 0x00000002

	)

48 
	#FIEMAP_EXTENT_DELALLOC
 0x00000004

	)

50 
	#FIEMAP_EXTENT_ENCODED
 0x00000008

	)

52 
	#FIEMAP_EXTENT_DATA_ENCRYPTED
 0x00000080

	)

54 
	#FIEMAP_EXTENT_NOT_ALIGNED
 0x00000100

	)

56 
	#FIEMAP_EXTENT_DATA_INLINE
 0x00000200

	)

58 
	#FIEMAP_EXTENT_DATA_TAIL
 0x00000400

	)

60 
	#FIEMAP_EXTENT_UNWRITTEN
 0x00000800

	)

62 
	#FIEMAP_EXTENT_MERGED
 0x00001000

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

23 #unde‡
NR_OPEN


24 
	#INR_OPEN
 1024

	)

26 
	#BLOCK_SIZE_BITS
 10

	)

27 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

29 
	#SEEK_SET
 0

	)

30 
	#SEEK_CUR
 1

	)

31 
	#SEEK_END
 2

	)

32 
	#SEEK_MAX
 
SEEK_END


	)

35 
	sfûes_°©_°ru˘
 {

36 
	mƒ_fûes
;

37 
	mƒ_‰ì_fûes
;

38 
	mmax_fûes
;

41 
	söodes_°©_t
 {

42 
	mƒ_öodes
;

43 
	mƒ_unu£d
;

44 
	mdummy
[5];

48 
	#NR_FILE
 8192

	)

50 
	#MAY_EXEC
 1

	)

51 
	#MAY_WRITE
 2

	)

52 
	#MAY_READ
 4

	)

53 
	#MAY_APPEND
 8

	)

54 
	#MAY_ACCESS
 16

	)

55 
	#MAY_OPEN
 32

	)

63 
	#FMODE_READ
 ((
fmode_t
)1)

	)

65 
	#FMODE_WRITE
 ((
fmode_t
)2)

	)

67 
	#FMODE_LSEEK
 ((
fmode_t
)4)

	)

69 
	#FMODE_PREAD
 ((
fmode_t
)8)

	)

71 
	#FMODE_PWRITE
 ((
fmode_t
)16)

	)

73 
	#FMODE_EXEC
 ((
fmode_t
)32)

	)

75 
	#FMODE_NDELAY
 ((
fmode_t
)64)

	)

77 
	#FMODE_EXCL
 ((
fmode_t
)128)

	)

80 
	#FMODE_WRITE_IOCTL
 ((
fmode_t
)256)

	)

88 
	#FMODE_NOCMTIME
 ((
fmode_t
)2048)

	)

91 
	#FMODE_RANDOM
 ((
fmode_t
)4096)

	)

147 
	#RW_MASK
 1

	)

148 
	#RWA_MASK
 16

	)

149 
	#READ
 0

	)

150 
	#WRITE
 1

	)

151 
	#READA
 16

	)

152 
	#SWRITE
 17

	)

153 
	#READ_SYNC
 (
READ
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

154 
	#READ_META
 (
READ
 | (1 << 
BIO_RW_META
))

	)

155 
	#WRITE_SYNC_PLUG
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

156 
	#WRITE_SYNC
 (
WRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

157 
	#WRITE_ODIRECT
 (
WRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_UNPLUG
))

	)

158 
	#SWRITE_SYNC_PLUG
 \

159 (
SWRITE
 | (1 << 
BIO_RW_SYNCIO
Ë| (1 << 
BIO_RW_NOIDLE
))

	)

160 
	#SWRITE_SYNC
 (
SWRITE_SYNC_PLUG
 | (1 << 
BIO_RW_UNPLUG
))

	)

161 
	#WRITE_BARRIER
 (
WRITE
 | (1 << 
BIO_RW_BARRIER
))

	)

167 
	#DISCARD_NOBARRIER
 (
WRITE
 | (1 << 
BIO_RW_DISCARD
))

	)

168 
	#DISCARD_BARRIER
 (
DISCARD_NOBARRIER
 | (1 << 
BIO_RW_BARRIER
))

	)

170 
	#SEL_IN
 1

	)

171 
	#SEL_OUT
 2

	)

172 
	#SEL_EX
 4

	)

175 
	#FS_REQUIRES_DEV
 1

	)

176 
	#FS_BINARY_MOUNTDATA
 2

	)

177 
	#FS_HAS_SUBTYPE
 4

	)

178 
	#FS_REVAL_DOT
 16384

	)

179 
	#FS_RENAME_DOES_D_MOVE
 32768

	)

186 
	#MS_RDONLY
 1

	)

187 
	#MS_NOSUID
 2

	)

188 
	#MS_NODEV
 4

	)

189 
	#MS_NOEXEC
 8

	)

190 
	#MS_SYNCHRONOUS
 16

	)

191 
	#MS_REMOUNT
 32

	)

192 
	#MS_MANDLOCK
 64

	)

193 
	#MS_DIRSYNC
 128

	)

194 
	#MS_NOATIME
 1024

	)

195 
	#MS_NODIRATIME
 2048

	)

196 
	#MS_BIND
 4096

	)

197 
	#MS_MOVE
 8192

	)

198 
	#MS_REC
 16384

	)

199 
	#MS_VERBOSE
 32768

	)

201 
	#MS_SILENT
 32768

	)

202 
	#MS_POSIXACL
 (1<<16Ë

	)

203 
	#MS_UNBINDABLE
 (1<<17Ë

	)

204 
	#MS_PRIVATE
 (1<<18Ë

	)

205 
	#MS_SLAVE
 (1<<19Ë

	)

206 
	#MS_SHARED
 (1<<20Ë

	)

207 
	#MS_RELATIME
 (1<<21Ë

	)

208 
	#MS_KERNMOUNT
 (1<<22Ë

	)

209 
	#MS_I_VERSION
 (1<<23Ë

	)

210 
	#MS_STRICTATIME
 (1<<24Ë

	)

211 
	#MS_ACTIVE
 (1<<30)

	)

212 
	#MS_NOUSER
 (1<<31)

	)

217 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

222 
	#MS_MGC_VAL
 0xC0ED0000

	)

223 
	#MS_MGC_MSK
 0xffff0000

	)

227 
	#S_SYNC
 1

	)

228 
	#S_NOATIME
 2

	)

229 
	#S_APPEND
 4

	)

230 
	#S_IMMUTABLE
 8

	)

231 
	#S_DEAD
 16

	)

232 
	#S_NOQUOTA
 32

	)

233 
	#S_DIRSYNC
 64

	)

234 
	#S_NOCMTIME
 128

	)

235 
	#S_SWAPFILE
 256

	)

236 
	#S_PRIVATE
 512

	)

251 
	#__IS_FLG
(
öode
,
Êg
Ë((öode)->
i_sb
->
s_Êags
 & (Êg))

	)

253 
	#IS_RDONLY
(
öode
Ë((öode)->
i_sb
->
s_Êags
 & 
MS_RDONLY
)

	)

254 
	#IS_SYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
) || \

255 ((
öode
)->
i_Êags
 & 
S_SYNC
))

	)

256 
	#IS_DIRSYNC
(
öode
Ë(
	`__IS_FLG
(öode, 
MS_SYNCHRONOUS
|
MS_DIRSYNC
) || \

257 ((
öode
)->
i_Êags
 & (
S_SYNC
|
S_DIRSYNC
)))

	)

258 
	#IS_MANDLOCK
(
öode
Ë
	`__IS_FLG
(öode, 
MS_MANDLOCK
)

	)

259 
	#IS_NOATIME
(
öode
Ë
	`__IS_FLG
(öode, 
MS_RDONLY
|
MS_NOATIME
)

	)

260 
	#IS_I_VERSION
(
öode
Ë
	`__IS_FLG
(öode, 
MS_I_VERSION
)

	)

262 
	#IS_NOQUOTA
(
öode
Ë((öode)->
i_Êags
 & 
S_NOQUOTA
)

	)

263 
	#IS_APPEND
(
öode
Ë((öode)->
i_Êags
 & 
S_APPEND
)

	)

264 
	#IS_IMMUTABLE
(
öode
Ë((öode)->
i_Êags
 & 
S_IMMUTABLE
)

	)

265 
	#IS_POSIXACL
(
öode
Ë
	`__IS_FLG
(öode, 
MS_POSIXACL
)

	)

267 
	#IS_DEADDIR
(
öode
Ë((öode)->
i_Êags
 & 
S_DEAD
)

	)

268 
	#IS_NOCMTIME
(
öode
Ë((öode)->
i_Êags
 & 
S_NOCMTIME
)

	)

269 
	#IS_SWAPFILE
(
öode
Ë((öode)->
i_Êags
 & 
S_SWAPFILE
)

	)

270 
	#IS_PRIVATE
(
öode
Ë((öode)->
i_Êags
 & 
S_PRIVATE
)

	)

275 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

276 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

277 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

278 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

279 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

280 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

281 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

282 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

283 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

284 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

285 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

286 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

288 
	#BLKPG
 
	`_IO
(0x12,105)

	)

292 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

293 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

298 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

299 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

300 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

301 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

302 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

303 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

304 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

305 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

306 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

307 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

308 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

309 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

311 
	#BMAP_IOCTL
 1

	)

312 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

313 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

314 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

315 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

317 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

318 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

319 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

320 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

321 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

322 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

323 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

324 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

325 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

330 
	#FS_SECRM_FL
 0x00000001

	)

331 
	#FS_UNRM_FL
 0x00000002

	)

332 
	#FS_COMPR_FL
 0x00000004

	)

333 
	#FS_SYNC_FL
 0x00000008

	)

334 
	#FS_IMMUTABLE_FL
 0x00000010

	)

335 
	#FS_APPEND_FL
 0x00000020

	)

336 
	#FS_NODUMP_FL
 0x00000040

	)

337 
	#FS_NOATIME_FL
 0x00000080

	)

339 
	#FS_DIRTY_FL
 0x00000100

	)

340 
	#FS_COMPRBLK_FL
 0x00000200

	)

341 
	#FS_NOCOMP_FL
 0x00000400

	)

342 
	#FS_ECOMPR_FL
 0x00000800

	)

344 
	#FS_BTREE_FL
 0x00001000

	)

345 
	#FS_INDEX_FL
 0x00001000

	)

346 
	#FS_IMAGIC_FL
 0x00002000

	)

347 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

348 
	#FS_NOTAIL_FL
 0x00008000

	)

349 
	#FS_DIRSYNC_FL
 0x00010000

	)

350 
	#FS_TOPDIR_FL
 0x00020000

	)

351 
	#FS_EXTENT_FL
 0x00080000

	)

352 
	#FS_DIRECTIO_FL
 0x00100000

	)

353 
	#FS_RESERVED_FL
 0x80000000

	)

355 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

356 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

359 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

360 
	#SYNC_FILE_RANGE_WRITE
 2

	)

361 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/hdreg.h

1 #i‚de‡
_LINUX_HDREG_H


2 
	#_LINUX_HDREG_H


	)

4 
	~<löux/ty≥s.h
>

10 
	#HDIO_DRIVE_CMD_HDR_SIZE
 (4 * (
__u8
))

	)

11 
	#HDIO_DRIVE_HOB_HDR_SIZE
 (8 * (
__u8
))

	)

12 
	#HDIO_DRIVE_TASK_HDR_SIZE
 (8 * (
__u8
))

	)

14 
	#IDE_DRIVE_TASK_NO_DATA
 0

	)

15 
	#IDE_DRIVE_TASK_INVALID
 -1

	)

16 
	#IDE_DRIVE_TASK_SET_XFER
 1

	)

17 
	#IDE_DRIVE_TASK_IN
 2

	)

18 
	#IDE_DRIVE_TASK_OUT
 3

	)

19 
	#IDE_DRIVE_TASK_RAW_WRITE
 4

	)

24 
	#IDE_TASKFILE_STD_IN_FLAGS
 0xFE

	)

25 
	#IDE_HOB_STD_IN_FLAGS
 0x3C

	)

26 
	#IDE_TASKFILE_STD_OUT_FLAGS
 0xFE

	)

27 
	#IDE_HOB_STD_OUT_FLAGS
 0x3C

	)

29 
	tèsk_i‹eg_t
;

30 
	tßè_i‹eg_t
;

32 
	uide_ªg_vÆid_s
 {

33 
	mÆl
 : 16;

35 
	md©a
 : 1;

36 
	mîr‹_„©uª
 : 1;

37 
	m£˘‹
 : 1;

38 
	mn£˘‹
 : 1;

39 
	mlcyl
 : 1;

40 
	mhcyl
 : 1;

41 
	m£À˘
 : 1;

42 
	m°©us_comm™d
 : 1;

44 
	md©a_hob
 : 1;

45 
	mîr‹_„©uª_hob
 : 1;

46 
	m£˘‹_hob
 : 1;

47 
	mn£˘‹_hob
 : 1;

48 
	mlcyl_hob
 : 1;

49 
	mhcyl_hob
 : 1;

50 
	m£À˘_hob
 : 1;

51 
	mc⁄åﬁ_hob
 : 1;

52 } 
	mb
;

53 } 
	tide_ªg_vÆid_t
;

55 
	side_èsk_ªque°_s
 {

56 
__u8
 
	mio_p‹ts
[8];

57 
__u8
 
	mhob_p‹ts
[8];

58 
ide_ªg_vÆid_t
 
	mout_Êags
;

59 
ide_ªg_vÆid_t
 
	mö_Êags
;

60 
	md©a_pha£
;

61 
	mªq_cmd
;

62 
	mout_size
;

63 
	mö_size
;

64 } 
	tide_èsk_ªque°_t
;

66 
	side_io˘l_ªque°_s
 {

67 
ide_èsk_ªque°_t
 *
	mèsk_ªque°
;

68 *
	mout_buf„r
;

69 *
	mö_buf„r
;

70 } 
	tide_io˘l_ªque°_t
;

72 
	shd_drive_cmd_hdr
 {

73 
__u8
 
	mcomm™d
;

74 
__u8
 
	m£˘‹_numbî
;

75 
__u8
 
	m„©uª
;

76 
__u8
 
	m£˘‹_cou¡
;

79 
	shd_drive_èsk_hdr
 {

80 
__u8
 
	md©a
;

81 
__u8
 
	m„©uª
;

82 
__u8
 
	m£˘‹_cou¡
;

83 
__u8
 
	m£˘‹_numbî
;

84 
__u8
 
	mlow_cylödî
;

85 
__u8
 
	mhigh_cylödî
;

86 
__u8
 
	mdevi˚_hód
;

87 
__u8
 
	mcomm™d
;

88 } 
	tèsk_°ru˘_t
;

90 
	shd_drive_hob_hdr
 {

91 
__u8
 
	md©a
;

92 
__u8
 
	m„©uª
;

93 
__u8
 
	m£˘‹_cou¡
;

94 
__u8
 
	m£˘‹_numbî
;

95 
__u8
 
	mlow_cylödî
;

96 
__u8
 
	mhigh_cylödî
;

97 
__u8
 
	mdevi˚_hód
;

98 
__u8
 
	mc⁄åﬁ
;

99 } 
	thob_°ru˘_t
;

101 
	#TASKFILE_NO_DATA
 0x0000

	)

103 
	#TASKFILE_IN
 0x0001

	)

104 
	#TASKFILE_MULTI_IN
 0x0002

	)

106 
	#TASKFILE_OUT
 0x0004

	)

107 
	#TASKFILE_MULTI_OUT
 0x0008

	)

108 
	#TASKFILE_IN_OUT
 0x0010

	)

110 
	#TASKFILE_IN_DMA
 0x0020

	)

111 
	#TASKFILE_OUT_DMA
 0x0040

	)

112 
	#TASKFILE_IN_DMAQ
 0x0080

	)

113 
	#TASKFILE_OUT_DMAQ
 0x0100

	)

115 
	#TASKFILE_P_IN
 0x0200

	)

116 
	#TASKFILE_P_OUT
 0x0400

	)

117 
	#TASKFILE_P_IN_DMA
 0x0800

	)

118 
	#TASKFILE_P_OUT_DMA
 0x1000

	)

119 
	#TASKFILE_P_IN_DMAQ
 0x2000

	)

120 
	#TASKFILE_P_OUT_DMAQ
 0x4000

	)

121 
	#TASKFILE_48
 0x8000

	)

122 
	#TASKFILE_INVALID
 0x7fff

	)

125 
	#WIN_NOP
 0x00

	)

129 
	#CFA_REQ_EXT_ERROR_CODE
 0x03

	)

133 
	#WIN_SRST
 0x08

	)

134 
	#WIN_DEVICE_RESET
 0x08

	)

138 
	#WIN_RECAL
 0x10

	)

139 
	#WIN_RESTORE
 
WIN_RECAL


	)

143 
	#WIN_READ
 0x20

	)

144 
	#WIN_READ_ONCE
 0x21

	)

145 
	#WIN_READ_LONG
 0x22

	)

146 
	#WIN_READ_LONG_ONCE
 0x23

	)

147 
	#WIN_READ_EXT
 0x24

	)

148 
	#WIN_READDMA_EXT
 0x25

	)

149 
	#WIN_READDMA_QUEUED_EXT
 0x26

	)

150 
	#WIN_READ_NATIVE_MAX_EXT
 0x27

	)

154 
	#WIN_MULTREAD_EXT
 0x29

	)

158 
	#WIN_WRITE
 0x30

	)

159 
	#WIN_WRITE_ONCE
 0x31

	)

160 
	#WIN_WRITE_LONG
 0x32

	)

161 
	#WIN_WRITE_LONG_ONCE
 0x33

	)

162 
	#WIN_WRITE_EXT
 0x34

	)

163 
	#WIN_WRITEDMA_EXT
 0x35

	)

164 
	#WIN_WRITEDMA_QUEUED_EXT
 0x36

	)

165 
	#WIN_SET_MAX_EXT
 0x37

	)

166 
	#CFA_WRITE_SECT_WO_ERASE
 0x38

	)

167 
	#WIN_MULTWRITE_EXT
 0x39

	)

171 
	#WIN_WRITE_VERIFY
 0x3C

	)

175 
	#WIN_VERIFY
 0x40

	)

176 
	#WIN_VERIFY_ONCE
 0x41

	)

177 
	#WIN_VERIFY_EXT
 0x42

	)

181 
	#WIN_FORMAT
 0x50

	)

185 
	#WIN_INIT
 0x60

	)

189 
	#WIN_SEEK
 0x70

	)

191 
	#CFA_TRANSLATE_SECTOR
 0x87

	)

192 
	#WIN_DIAGNOSE
 0x90

	)

193 
	#WIN_SPECIFY
 0x91

	)

194 
	#WIN_DOWNLOAD_MICROCODE
 0x92

	)

195 
	#WIN_STANDBYNOW2
 0x94

	)

196 
	#WIN_STANDBY2
 0x96

	)

197 
	#WIN_SETIDLE2
 0x97

	)

198 
	#WIN_CHECKPOWERMODE2
 0x98

	)

199 
	#WIN_SLEEPNOW2
 0x99

	)

203 
	#WIN_PACKETCMD
 0xA0

	)

204 
	#WIN_PIDENTIFY
 0xA1

	)

205 
	#WIN_QUEUED_SERVICE
 0xA2

	)

206 
	#WIN_SMART
 0xB0

	)

207 
	#CFA_ERASE_SECTORS
 0xC0

	)

208 
	#WIN_MULTREAD
 0xC4

	)

209 
	#WIN_MULTWRITE
 0xC5

	)

210 
	#WIN_SETMULT
 0xC6

	)

211 
	#WIN_READDMA_QUEUED
 0xC7

	)

212 
	#WIN_READDMA
 0xC8

	)

213 
	#WIN_READDMA_ONCE
 0xC9

	)

214 
	#WIN_WRITEDMA
 0xCA

	)

215 
	#WIN_WRITEDMA_ONCE
 0xCB

	)

216 
	#WIN_WRITEDMA_QUEUED
 0xCC

	)

217 
	#CFA_WRITE_MULTI_WO_ERASE
 0xCD

	)

218 
	#WIN_GETMEDIASTATUS
 0xDA

	)

219 
	#WIN_ACKMEDIACHANGE
 0xDB

	)

220 
	#WIN_POSTBOOT
 0xDC

	)

221 
	#WIN_PREBOOT
 0xDD

	)

222 
	#WIN_DOORLOCK
 0xDE

	)

223 
	#WIN_DOORUNLOCK
 0xDF

	)

224 
	#WIN_STANDBYNOW1
 0xE0

	)

225 
	#WIN_IDLEIMMEDIATE
 0xE1

	)

226 
	#WIN_STANDBY
 0xE2

	)

227 
	#WIN_SETIDLE1
 0xE3

	)

228 
	#WIN_READ_BUFFER
 0xE4

	)

229 
	#WIN_CHECKPOWERMODE1
 0xE5

	)

230 
	#WIN_SLEEPNOW1
 0xE6

	)

231 
	#WIN_FLUSH_CACHE
 0xE7

	)

232 
	#WIN_WRITE_BUFFER
 0xE8

	)

233 
	#WIN_WRITE_SAME
 0xE9

	)

235 
	#WIN_FLUSH_CACHE_EXT
 0xEA

	)

236 
	#WIN_IDENTIFY
 0xEC

	)

237 
	#WIN_MEDIAEJECT
 0xED

	)

238 
	#WIN_IDENTIFY_DMA
 0xEE

	)

239 
	#WIN_SETFEATURES
 0xEF

	)

240 
	#EXABYTE_ENABLE_NEST
 0xF0

	)

241 
	#WIN_SECURITY_SET_PASS
 0xF1

	)

242 
	#WIN_SECURITY_UNLOCK
 0xF2

	)

243 
	#WIN_SECURITY_ERASE_PREPARE
 0xF3

	)

244 
	#WIN_SECURITY_ERASE_UNIT
 0xF4

	)

245 
	#WIN_SECURITY_FREEZE_LOCK
 0xF5

	)

246 
	#WIN_SECURITY_DISABLE
 0xF6

	)

247 
	#WIN_READ_NATIVE_MAX
 0xF8

	)

248 
	#WIN_SET_MAX
 0xF9

	)

249 
	#DISABLE_SEAGATE
 0xFB

	)

253 
	#SMART_READ_VALUES
 0xD0

	)

254 
	#SMART_READ_THRESHOLDS
 0xD1

	)

255 
	#SMART_AUTOSAVE
 0xD2

	)

256 
	#SMART_SAVE
 0xD3

	)

257 
	#SMART_IMMEDIATE_OFFLINE
 0xD4

	)

258 
	#SMART_READ_LOG_SECTOR
 0xD5

	)

259 
	#SMART_WRITE_LOG_SECTOR
 0xD6

	)

260 
	#SMART_WRITE_THRESHOLDS
 0xD7

	)

261 
	#SMART_ENABLE
 0xD8

	)

262 
	#SMART_DISABLE
 0xD9

	)

263 
	#SMART_STATUS
 0xDA

	)

264 
	#SMART_AUTO_OFFLINE
 0xDB

	)

268 
	#SMART_LCYL_PASS
 0x4F

	)

269 
	#SMART_HCYL_PASS
 0xC2

	)

272 
	#SETFEATURES_EN_8BIT
 0x01

	)

273 
	#SETFEATURES_EN_WCACHE
 0x02

	)

274 
	#SETFEATURES_DIS_DEFECT
 0x04

	)

275 
	#SETFEATURES_EN_APM
 0x05

	)

276 
	#SETFEATURES_EN_SAME_R
 0x22

	)

277 
	#SETFEATURES_DIS_MSN
 0x31

	)

278 
	#SETFEATURES_DIS_RETRY
 0x33

	)

279 
	#SETFEATURES_EN_AAM
 0x42

	)

280 
	#SETFEATURES_RW_LONG
 0x44

	)

281 
	#SETFEATURES_SET_CACHE
 0x54

	)

282 
	#SETFEATURES_DIS_RLA
 0x55

	)

283 
	#SETFEATURES_EN_RI
 0x5D

	)

284 
	#SETFEATURES_EN_SI
 0x5E

	)

285 
	#SETFEATURES_DIS_RPOD
 0x66

	)

286 
	#SETFEATURES_DIS_ECC
 0x77

	)

287 
	#SETFEATURES_DIS_8BIT
 0x81

	)

288 
	#SETFEATURES_DIS_WCACHE
 0x82

	)

289 
	#SETFEATURES_EN_DEFECT
 0x84

	)

290 
	#SETFEATURES_DIS_APM
 0x85

	)

291 
	#SETFEATURES_EN_ECC
 0x88

	)

292 
	#SETFEATURES_EN_MSN
 0x95

	)

293 
	#SETFEATURES_EN_RETRY
 0x99

	)

294 
	#SETFEATURES_EN_RLA
 0xAA

	)

295 
	#SETFEATURES_PREFETCH
 0xAB

	)

296 
	#SETFEATURES_EN_REST
 0xAC

	)

297 
	#SETFEATURES_4B_RW_LONG
 0xBB

	)

298 
	#SETFEATURES_DIS_AAM
 0xC2

	)

299 
	#SETFEATURES_EN_RPOD
 0xCC

	)

300 
	#SETFEATURES_DIS_RI
 0xDD

	)

301 
	#SETFEATURES_EN_SAME_M
 0xDD

	)

302 
	#SETFEATURES_DIS_SI
 0xDE

	)

306 
	#SECURITY_SET_PASSWORD
 0xBA

	)

307 
	#SECURITY_UNLOCK
 0xBB

	)

308 
	#SECURITY_ERASE_PREPARE
 0xBC

	)

309 
	#SECURITY_ERASE_UNIT
 0xBD

	)

310 
	#SECURITY_FREEZE_LOCK
 0xBE

	)

311 
	#SECURITY_DISABLE_PASSWORD
 0xBF

	)

313 
	shd_geomëry
 {

314 
	mhóds
;

315 
	m£˘‹s
;

316 
	mcylödîs
;

317 
	m°¨t
;

321 
	#HDIO_GETGEO
 0x0301

	)

322 
	#HDIO_GET_UNMASKINTR
 0x0302

	)

323 
	#HDIO_GET_MULTCOUNT
 0x0304

	)

324 
	#HDIO_GET_QDMA
 0x0305

	)

326 
	#HDIO_SET_XFER
 0x0306

	)

328 
	#HDIO_OBSOLETE_IDENTITY
 0x0307

	)

329 
	#HDIO_GET_KEEPSETTINGS
 0x0308

	)

330 
	#HDIO_GET_32BIT
 0x0309

	)

331 
	#HDIO_GET_NOWERR
 0x030®

	)

332 
	#HDIO_GET_DMA
 0x030b

	)

333 
	#HDIO_GET_NICE
 0x030¯

	)

334 
	#HDIO_GET_IDENTITY
 0x030d

	)

335 
	#HDIO_GET_WCACHE
 0x030ê

	)

336 
	#HDIO_GET_ACOUSTIC
 0x030‡

	)

337 
	#HDIO_GET_ADDRESS
 0x0310

	)

339 
	#HDIO_GET_BUSSTATE
 0x031®

	)

340 
	#HDIO_TRISTATE_HWIF
 0x031b

	)

341 
	#HDIO_DRIVE_RESET
 0x031¯

	)

342 
	#HDIO_DRIVE_TASKFILE
 0x031d

	)

343 
	#HDIO_DRIVE_TASK
 0x031ê

	)

344 
	#HDIO_DRIVE_CMD
 0x031‡

	)

345 
	#HDIO_DRIVE_CMD_AEB
 
HDIO_DRIVE_TASK


	)

348 
	#HDIO_SET_MULTCOUNT
 0x0321

	)

349 
	#HDIO_SET_UNMASKINTR
 0x0322

	)

350 
	#HDIO_SET_KEEPSETTINGS
 0x0323

	)

351 
	#HDIO_SET_32BIT
 0x0324

	)

352 
	#HDIO_SET_NOWERR
 0x0325

	)

353 
	#HDIO_SET_DMA
 0x0326

	)

354 
	#HDIO_SET_PIO_MODE
 0x0327

	)

355 
	#HDIO_SCAN_HWIF
 0x0328

	)

356 
	#HDIO_UNREGISTER_HWIF
 0x032®

	)

357 
	#HDIO_SET_NICE
 0x0329

	)

358 
	#HDIO_SET_WCACHE
 0x032b

	)

359 
	#HDIO_SET_ACOUSTIC
 0x032¯

	)

360 
	#HDIO_SET_BUSSTATE
 0x032d

	)

361 
	#HDIO_SET_QDMA
 0x032ê

	)

362 
	#HDIO_SET_ADDRESS
 0x032‡

	)

366 
	mBUSSTATE_OFF
 = 0,

367 
	mBUSSTATE_ON
,

368 
	mBUSSTATE_TRISTATE


377 
	#__NEW_HD_DRIVE_ID


	)

385 
	shd_driveid
 {

386 
	mc⁄fig
;

387 
	mcyls
;

388 
	mª£rved2
;

389 
	mhóds
;

390 
	måack_byãs
;

391 
	m£˘‹_byãs
;

392 
	m£˘‹s
;

393 
	mvíd‹0
;

394 
	mvíd‹1
;

395 
	mvíd‹2
;

396 
	m£rül_no
[20];

397 
	mbuf_ty≥
;

398 
	mbuf_size
;

401 
	mecc_byãs
;

402 
	mfw_ªv
[8];

403 
	mmodñ
[40];

404 
	mmax_mu…£˘
;

405 
	mvíd‹3
;

406 
	mdw‹d_io
;

407 
	mvíd‹4
;

408 
	mˇ∑bûôy
;

414 
	mª£rved50
;

415 
	mvíd‹5
;

416 
	mtPIO
;

417 
	mvíd‹6
;

418 
	mtDMA
;

419 
	mfõld_vÆid
;

424 
	mcur_cyls
;

425 
	mcur_hóds
;

426 
	mcur_£˘‹s
;

427 
	mcur_ˇ∑côy0
;

428 
	mcur_ˇ∑côy1
;

429 
	mmu…£˘
;

430 
	mmu…£˘_vÆid
;

431 
	mlba_ˇ∑côy
;

432 
	mdma_1w‹d
;

433 
	mdma_mw‹d
;

434 
	meide_pio_modes
;

435 
	meide_dma_mö
;

436 
	meide_dma_time
;

437 
	meide_pio
;

438 
	meide_pio_i‹dy
;

439 
	mw‹ds69_70
[2];

442 
	mw‹ds71_74
[4];

445 
	mqueue_dïth
;

449 
	mw‹ds76_79
[4];

450 
	mmaj‹_ªv_num
;

451 
	mmö‹_ªv_num
;

452 
	mcomm™d_£t_1
;

470 
	mcomm™d_£t_2
;

488 
	mcfs£
;

500 
	mcfs_íabÀ_1
;

519 
	mcfs_íabÀ_2
;

538 
	mcsf_deÁu…
;

550 
	mdma_u…ø
;

551 
	må£uc
;

552 
	måsEuc
;

553 
	mCurAPMvÆues
;

554 
	mm¥c
;

555 
	mhw_c⁄fig
;

573 
	macou°ic
;

577 
	mm§qs
;

578 
	msx„π
;

579 
	mßl
;

580 
	m•g
;

581 
	mlba_ˇ∑côy_2
;

582 
	mw‹ds104_125
[22];

583 
	mœ°_lun
;

584 
	mw‹d127
;

592 
	mdlf
;

604 
	mcsfo
;

612 
	mw‹ds130_155
[26];

613 
	mw‹d156
;

614 
	mw‹ds157_159
[3];

615 
	mcÁ_powî
;

622 
	mw‹ds161_175
[15];

623 
	mw‹ds176_205
[30];

624 
	mw‹ds206_254
[49];

625 
	möãgrôy_w‹d
;

636 
	#IDE_NICE_DSC_OVERLAP
 (0Ë

	)

637 
	#IDE_NICE_ATAPI_OVERLAP
 (1Ë

	)

638 
	#IDE_NICE_1
 (3Ë

	)

639 
	#IDE_NICE_0
 (2Ë

	)

640 
	#IDE_NICE_2
 (4Ë

	)

	@/usr/include/linux/major.h

1 #i‚de‡
_LINUX_MAJOR_H


2 
	#_LINUX_MAJOR_H


	)

9 
	#UNNAMED_MAJOR
 0

	)

10 
	#MEM_MAJOR
 1

	)

11 
	#RAMDISK_MAJOR
 1

	)

12 
	#FLOPPY_MAJOR
 2

	)

13 
	#PTY_MASTER_MAJOR
 2

	)

14 
	#IDE0_MAJOR
 3

	)

15 
	#HD_MAJOR
 
IDE0_MAJOR


	)

16 
	#PTY_SLAVE_MAJOR
 3

	)

17 
	#TTY_MAJOR
 4

	)

18 
	#TTYAUX_MAJOR
 5

	)

19 
	#LP_MAJOR
 6

	)

20 
	#VCS_MAJOR
 7

	)

21 
	#LOOP_MAJOR
 7

	)

22 
	#SCSI_DISK0_MAJOR
 8

	)

23 
	#SCSI_TAPE_MAJOR
 9

	)

24 
	#MD_MAJOR
 9

	)

25 
	#MISC_MAJOR
 10

	)

26 
	#SCSI_CDROM_MAJOR
 11

	)

27 
	#MUX_MAJOR
 11

	)

28 
	#XT_DISK_MAJOR
 13

	)

29 
	#INPUT_MAJOR
 13

	)

30 
	#SOUND_MAJOR
 14

	)

31 
	#CDU31A_CDROM_MAJOR
 15

	)

32 
	#JOYSTICK_MAJOR
 15

	)

33 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

34 
	#OPTICS_CDROM_MAJOR
 17

	)

35 
	#SANYO_CDROM_MAJOR
 18

	)

36 
	#CYCLADES_MAJOR
 19

	)

37 
	#CYCLADESAUX_MAJOR
 20

	)

38 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

39 
	#MFM_ACORN_MAJOR
 21

	)

40 
	#SCSI_GENERIC_MAJOR
 21

	)

41 
	#IDE1_MAJOR
 22

	)

42 
	#DIGICU_MAJOR
 22

	)

43 
	#DIGI_MAJOR
 23

	)

44 
	#MITSUMI_CDROM_MAJOR
 23

	)

45 
	#CDU535_CDROM_MAJOR
 24

	)

46 
	#STL_SERIALMAJOR
 24

	)

47 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

48 
	#STL_CALLOUTMAJOR
 25

	)

49 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

50 
	#QIC117_TAPE_MAJOR
 27

	)

51 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

53 
	#STL_SIOMEMMAJOR
 28

	)

54 
	#ACSI_MAJOR
 28

	)

55 
	#AZTECH_CDROM_MAJOR
 29

	)

56 
	#FB_MAJOR
 29

	)

57 
	#CM206_CDROM_MAJOR
 32

	)

58 
	#IDE2_MAJOR
 33

	)

59 
	#IDE3_MAJOR
 34

	)

60 
	#Z8530_MAJOR
 34

	)

61 
	#XPRAM_MAJOR
 35

	)

62 
	#NETLINK_MAJOR
 36

	)

63 
	#PS2ESDI_MAJOR
 36

	)

64 
	#IDETAPE_MAJOR
 37

	)

65 
	#Z2RAM_MAJOR
 37

	)

66 
	#APBLOCK_MAJOR
 38

	)

67 
	#DDV_MAJOR
 39

	)

68 
	#NBD_MAJOR
 43

	)

69 
	#RISCOM8_NORMAL_MAJOR
 48

	)

70 
	#DAC960_MAJOR
 48

	)

71 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

72 
	#MKISS_MAJOR
 55

	)

73 
	#DSP56K_MAJOR
 55

	)

75 
	#IDE4_MAJOR
 56

	)

76 
	#IDE5_MAJOR
 57

	)

78 
	#SCSI_DISK1_MAJOR
 65

	)

79 
	#SCSI_DISK2_MAJOR
 66

	)

80 
	#SCSI_DISK3_MAJOR
 67

	)

81 
	#SCSI_DISK4_MAJOR
 68

	)

82 
	#SCSI_DISK5_MAJOR
 69

	)

83 
	#SCSI_DISK6_MAJOR
 70

	)

84 
	#SCSI_DISK7_MAJOR
 71

	)

86 
	#COMPAQ_SMART2_MAJOR
 72

	)

87 
	#COMPAQ_SMART2_MAJOR1
 73

	)

88 
	#COMPAQ_SMART2_MAJOR2
 74

	)

89 
	#COMPAQ_SMART2_MAJOR3
 75

	)

90 
	#COMPAQ_SMART2_MAJOR4
 76

	)

91 
	#COMPAQ_SMART2_MAJOR5
 77

	)

92 
	#COMPAQ_SMART2_MAJOR6
 78

	)

93 
	#COMPAQ_SMART2_MAJOR7
 79

	)

95 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

96 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

98 
	#AURORA_MAJOR
 79

	)

100 
	#I2O_MAJOR
 80

	)

102 
	#SHMIQ_MAJOR
 85

	)

103 
	#SCSI_CHANGER_MAJOR
 86

	)

105 
	#IDE6_MAJOR
 88

	)

106 
	#IDE7_MAJOR
 89

	)

107 
	#IDE8_MAJOR
 90

	)

108 
	#IDE9_MAJOR
 91

	)

110 
	#DASD_MAJOR
 94

	)

112 
	#MDISK_MAJOR
 95

	)

114 
	#UBD_MAJOR
 98

	)

116 
	#PP_MAJOR
 99

	)

117 
	#JSFD_MAJOR
 99

	)

119 
	#PHONE_MAJOR
 100

	)

121 
	#COMPAQ_CISS_MAJOR
 104

	)

122 
	#COMPAQ_CISS_MAJOR1
 105

	)

123 
	#COMPAQ_CISS_MAJOR2
 106

	)

124 
	#COMPAQ_CISS_MAJOR3
 107

	)

125 
	#COMPAQ_CISS_MAJOR4
 108

	)

126 
	#COMPAQ_CISS_MAJOR5
 109

	)

127 
	#COMPAQ_CISS_MAJOR6
 110

	)

128 
	#COMPAQ_CISS_MAJOR7
 111

	)

130 
	#VIODASD_MAJOR
 112

	)

131 
	#VIOCD_MAJOR
 113

	)

133 
	#ATARAID_MAJOR
 114

	)

135 
	#SCSI_DISK8_MAJOR
 128

	)

136 
	#SCSI_DISK9_MAJOR
 129

	)

137 
	#SCSI_DISK10_MAJOR
 130

	)

138 
	#SCSI_DISK11_MAJOR
 131

	)

139 
	#SCSI_DISK12_MAJOR
 132

	)

140 
	#SCSI_DISK13_MAJOR
 133

	)

141 
	#SCSI_DISK14_MAJOR
 134

	)

142 
	#SCSI_DISK15_MAJOR
 135

	)

144 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

145 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

146 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

148 
	#DRBD_MAJOR
 147

	)

149 
	#RTF_MAJOR
 150

	)

150 
	#RAW_MAJOR
 162

	)

152 
	#USB_ACM_MAJOR
 166

	)

153 
	#USB_ACM_AUX_MAJOR
 167

	)

154 
	#USB_CHAR_MAJOR
 180

	)

156 
	#MMC_BLOCK_MAJOR
 179

	)

158 
	#VXVM_MAJOR
 199

	)

159 
	#VXSPEC_MAJOR
 200

	)

160 
	#VXDMP_MAJOR
 201

	)

162 
	#XENVBD_MAJOR
 202

	)

164 
	#MSR_MAJOR
 202

	)

165 
	#CPUID_MAJOR
 203

	)

167 
	#OSST_MAJOR
 206

	)

169 
	#IBM_TTY3270_MAJOR
 227

	)

170 
	#IBM_FS3270_MAJOR
 228

	)

172 
	#VIOTAPE_MAJOR
 230

	)

174 
	#BLOCK_EXT_MAJOR
 259

	)

175 
	#SCSI_OSD_MAJOR
 260

	)

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/mntent.h

20 #i‚def 
_MNTENT_H


21 
	#_MNTENT_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_FILE


	)

25 
	~<°dio.h
>

26 
	~<∑ths.h
>

30 
	#MNTTAB
 
_PATH_MNTTAB


	)

33 
	#MOUNTED
 
_PATH_MOUNTED


	)

37 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

38 
	#MNTTYPE_NFS
 "nfs"

	)

39 
	#MNTTYPE_SWAP
 "sw≠"

	)

43 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

44 
	#MNTOPT_RO
 "ro"

	)

45 
	#MNTOPT_RW
 "rw"

	)

46 
	#MNTOPT_SUID
 "suid"

	)

47 
	#MNTOPT_NOSUID
 "nosuid"

	)

48 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

51 
__BEGIN_DECLS


54 
	sm¡ít


56 *
	mm¡_f¢ame
;

57 *
	mm¡_dú
;

58 *
	mm¡_ty≥
;

59 *
	mm¡_›ts
;

60 
	mm¡_‰eq
;

61 
	mm¡_∑s¢o
;

67 
FILE
 *
	$£tm¡ít
 (
__c⁄°
 *
__fûe
, __c⁄° *
__mode
Ë
__THROW
;

72 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

74 #ifde‡
__USE_MISC


76 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

77 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

78 *
__ª°ri˘
 
__buf„r
,

79 
__bufsize
Ë
__THROW
;

84 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

85 
__c⁄°
 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

88 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

92 *
	$hasm¡›t
 (
__c⁄°
 
m¡ít
 *
__m¡
,

93 
__c⁄°
 *
__›t
Ë
__THROW
;

96 
__END_DECLS


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

149 
	#°dö
 
°dö


	)

150 
	#°dout
 
°dout


	)

151 
	#°dîr
 
°dîr


	)

153 
__BEGIN_NAMESPACE_STD


155 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

157 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

158 
__END_NAMESPACE_STD


160 #ifde‡
__USE_ATFILE


162 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

163 
__c⁄°
 *
__√w
Ë
__THROW
;

166 
__BEGIN_NAMESPACE_STD


171 #i‚de‡
__USE_FILE_OFFSET64


172 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

174 #ifde‡
__REDIRECT


175 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

177 
	#tmpfûe
 
tmpfûe64


	)

181 #ifde‡
__USE_LARGEFILE64


182 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

186 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

187 
__END_NAMESPACE_STD


189 #ifde‡
__USE_MISC


192 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

196 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


204 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

205 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

209 
__BEGIN_NAMESPACE_STD


214 
	`f˛o£
 (
FILE
 *
__°ªam
);

219 
	`fÊush
 (
FILE
 *
__°ªam
);

220 
__END_NAMESPACE_STD


222 #ifde‡
__USE_MISC


229 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_GNU


239 
	`f˛o£Æl
 ();

243 
__BEGIN_NAMESPACE_STD


244 #i‚de‡
__USE_FILE_OFFSET64


249 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

250 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

255 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

256 
__c⁄°
 *
__ª°ri˘
 
__modes
,

257 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

259 #ifde‡
__REDIRECT


260 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

261 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

262 
__wur
;

263 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

264 
__c⁄°
 *
__ª°ri˘
 
__modes
,

265 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

266 
__wur
;

268 
	#f›í
 
f›í64


	)

269 
	#‰e›í
 
‰e›í64


	)

272 
__END_NAMESPACE_STD


273 #ifde‡
__USE_LARGEFILE64


274 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

275 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

276 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
,

278 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

281 #ifdef 
__USE_POSIX


283 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

286 #ifdef 
__USE_GNU


289 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

290 
__c⁄°
 *
__ª°ri˘
 
__modes
,

291 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

294 #ifde‡
__USE_XOPEN2K8


296 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

297 
__THROW
 
__wur
;

302 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

306 
__BEGIN_NAMESPACE_STD


309 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

313 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

314 
__modes
, 
size_t
 
__n
Ë
__THROW
;

315 
__END_NAMESPACE_STD


317 #ifdef 
__USE_BSD


320 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

321 
size_t
 
__size
Ë
__THROW
;

324 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

328 
__BEGIN_NAMESPACE_STD


333 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

334 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

339 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	$•rötf
 (*
__ª°ri˘
 
__s
,

342 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

348 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

349 
_G_va_li°
 
__¨g
);

354 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

356 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

357 
_G_va_li°
 
__¨g
Ë
__THROW
;

358 
__END_NAMESPACE_STD


360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


361 
__BEGIN_NAMESPACE_C99


363 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

364 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

365 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

367 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

368 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

370 
__END_NAMESPACE_C99


373 #ifde‡
__USE_GNU


376 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

377 
_G_va_li°
 
__¨g
)

378 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

379 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

380 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

381 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

382 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

383 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

387 #ifde‡
__USE_XOPEN2K8


394 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

395 
_G_va_li°
 
__¨g
)

396 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

397 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

402 
__BEGIN_NAMESPACE_STD


407 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

408 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

413 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

416 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

418 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

419 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

420 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

421 #ifde‡
__REDIRECT


425 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

427 
__isoc99_fsˇnf
Ë
__wur
;

428 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_sˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

431 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

432 
__isoc99_ssˇnf
Ë
__THROW
;

434 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

436 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

438 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

439 
	#fsˇnf
 
__isoc99_fsˇnf


	)

440 
	#sˇnf
 
__isoc99_sˇnf


	)

441 
	#ssˇnf
 
__isoc99_ssˇnf


	)

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_ISOC99


448 
__BEGIN_NAMESPACE_C99


453 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

454 
_G_va_li°
 
__¨g
)

455 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

461 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

462 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

465 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

466 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

467 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

469 #i‡!
deföed
 
__USE_GNU
 \

470 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

471 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

472 #ifde‡
__REDIRECT


476 
	`__REDIRECT
 (
vfsˇnf
,

477 (
FILE
 *
__ª°ri˘
 
__s
,

478 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

479 
__isoc99_vfsˇnf
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

482 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vssˇnf
,

485 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

487 
__isoc99_vssˇnf
)

488 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

490 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

491 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

492 
_G_va_li°
 
__¨g
Ë
__wur
;

493 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

496 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

497 
_G_va_li°
 
__¨g
Ë
__THROW
;

498 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

499 
	#vsˇnf
 
__isoc99_vsˇnf


	)

500 
	#vssˇnf
 
__isoc99_vssˇnf


	)

504 
__END_NAMESPACE_C99


508 
__BEGIN_NAMESPACE_STD


513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

521 
__END_NAMESPACE_STD


525 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

527 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


532 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

533 
	`gëch¨_u∆ocked
 ();

536 #ifde‡
__USE_MISC


543 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

547 
__BEGIN_NAMESPACE_STD


555 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

562 
	`putch¨
 (
__c
);

563 
__END_NAMESPACE_STD


567 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

569 #ifde‡
__USE_MISC


576 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

579 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


584 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

585 
	`putch¨_u∆ocked
 (
__c
);

589 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

590 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

592 
	`gëw
 (
FILE
 *
__°ªam
);

595 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

599 
__BEGIN_NAMESPACE_STD


604 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

605 
__wur
;

612 *
	$gës
 (*
__s
Ë
__wur
;

613 
__END_NAMESPACE_STD


615 #ifde‡
__USE_GNU


622 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

623 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

627 #ifdef 
__USE_XOPEN2K8


638 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

639 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

640 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

641 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

642 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

652 
size_t
 *
__ª°ri˘
 
__n
,

653 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

657 
__BEGIN_NAMESPACE_STD


662 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

668 
	`puts
 (
__c⁄°
 *
__s
);

675 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

682 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

683 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

688 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

689 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

690 
__END_NAMESPACE_STD


692 #ifde‡
__USE_GNU


699 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

700 
FILE
 *
__ª°ri˘
 
__°ªam
);

703 #ifde‡
__USE_MISC


710 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

711 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

717 
__BEGIN_NAMESPACE_STD


722 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

727 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

732 
	`ªwöd
 (
FILE
 *
__°ªam
);

733 
__END_NAMESPACE_STD


740 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


741 #i‚de‡
__USE_FILE_OFFSET64


746 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

751 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

753 #ifde‡
__REDIRECT


754 
	`__REDIRECT
 (
f£eko
,

755 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

756 
f£eko64
);

757 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

759 
	#f£eko
 
f£eko64


	)

760 
	#·ñlo
 
·ñlo64


	)

765 
__BEGIN_NAMESPACE_STD


766 #i‚de‡
__USE_FILE_OFFSET64


771 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

776 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

778 #ifde‡
__REDIRECT


779 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

780 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

781 
	`__REDIRECT
 (
f£ços
,

782 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

784 
	#fgëpos
 
fgëpos64


	)

785 
	#f£ços
 
f£ços64


	)

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_LARGEFILE64


791 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

792 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

793 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

794 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

797 
__BEGIN_NAMESPACE_STD


799 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

801 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

803 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
__END_NAMESPACE_STD


806 #ifde‡
__USE_MISC


808 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

809 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

810 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

814 
__BEGIN_NAMESPACE_STD


819 
	`≥º‹
 (
__c⁄°
 *
__s
);

820 
__END_NAMESPACE_STD


826 
	~<bôs/sys_îæi°.h
>

829 #ifdef 
__USE_POSIX


831 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 #ifde‡
__USE_MISC


836 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

840 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

841 
deföed
 
__USE_MISC
)

846 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

852 
	`p˛o£
 (
FILE
 *
__°ªam
);

856 #ifdef 
__USE_POSIX


858 *
	$˘îmid
 (*
__s
Ë
__THROW
;

862 #ifde‡
__USE_XOPEN


864 *
	`cu£rid
 (*
__s
);

868 #ifdef 
__USE_GNU


869 
ob°ack
;

872 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

873 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

874 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

875 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

876 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

877 
_G_va_li°
 
__¨gs
)

878 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

882 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


886 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

890 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

893 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

896 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


900 
	#__√ed_gë›t


	)

901 
	~<gë›t.h
>

906 #ifde‡
__USE_EXTERN_INLINES


907 
	~<bôs/°dio.h
>

909 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


910 
	~<bôs/°dio2.h
>

912 #ifde‡
__LDBL_COMPAT


913 
	~<bôs/°dio-ldbl.h
>

916 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/strings.h

19 #i‚def 
_STRINGS_H


20 
	#_STRINGS_H
 1

	)

25 #i‡!
deföed
 
_STRING_H
 || !deföed 
__USE_BSD


27 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

32 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

33 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

36 
__BEGIN_DECLS


39 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

40 
__THROW
 
__©åibuã_puª__
;

43 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
Ë
__THROW
;

46 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
;

50 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((const));

53 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


56 *
	`ödex
 (*
__s
, 
__c
)

57 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

58 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

59 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

61 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


62 
__exã∫_Æways_ölöe
 *

63 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


65  
	`__buûtö_ödex
 (
__s
, 
__c
);

68 
__exã∫_Æways_ölöe
 
__c⁄°
 *

69 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


71  
	`__buûtö_ödex
 (
__s
, 
__c
);

74 
	}
}

76 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

77 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


84 *
	`rödex
 (*
__s
, 
__c
)

85 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

86 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

87 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRING_H_PROTO


90 
__exã∫_Æways_ölöe
 *

91 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


93  
	`__buûtö_rödex
 (
__s
, 
__c
);

96 
__exã∫_Æways_ölöe
 
__c⁄°
 *

97 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


99  
	`__buûtö_rödex
 (
__s
, 
__c
);

102 
	}
}

104 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

105 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

110 
__THROW
 
__©åibuã_puª__
;

113 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

114 
__THROW
 
__©åibuã_puª__
;

116 #ifdef 
__USE_XOPEN2K8


120 
	~<xloˇÀ.h
>

124 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

125 
__loˇÀ_t
 
__loc
)

126 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

128 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

129 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

130 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

133 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/signal.h

1 
	~<sig«l.h
>

	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES_IN_LIBC


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/un.h

19 #i‚def 
_SYS_UN_H


20 
	#_SYS_UN_H
 1

	)

22 
	~<sys/cdefs.h
>

25 
	~<bôs/sockaddr.h
>

27 
__BEGIN_DECLS


30 
	ssockaddr_un


32 
__SOCKADDR_COMMON
 (
sun_
);

33 
	msun_∑th
[108];

37 #ifde‡
__USE_MISC


38 
	~<°rög.h
>

41 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

42 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

45 
	g__END_DECLS


	@/usr/include/sys/utsname.h

23 #i‚def 
_SYS_UTSNAME_H


24 
	#_SYS_UTSNAME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ut¢ame.h
>

32 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


33 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

35 #i‚de‡
_UTSNAME_NODENAME_LENGTH


36 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

38 #i‚de‡
_UTSNAME_RELEASE_LENGTH


39 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

41 #i‚de‡
_UTSNAME_VERSION_LENGTH


42 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

44 #i‚de‡
_UTSNAME_MACHINE_LENGTH


45 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

49 
	sut¢ame


52 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

55 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

58 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

60 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

63 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

65 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

67 #ifde‡
__USE_GNU


68 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

70 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

75 #ifde‡
__USE_SVID


77 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

82 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

85 
__END_DECLS


	@/usr/include/sys/vfs.h

4 
	~<sys/°©fs.h
>

	@/usr/include/sys/wait.h

24 #i‚def 
_SYS_WAIT_H


25 
	#_SYS_WAIT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<sig«l.h
>

32 
	~<sys/ªsour˚.h
>

35 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


38 
	~<bôs/waôÊags.h
>

40 #ifdef 
__USE_BSD


45 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


46 
	#__WAIT_INT
(
°©us
) \

47 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

48 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

50 
	#__WAIT_INT
(
°©us
Ë(*(
__c⁄°
 *Ë&(°©us))

	)

58 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


59 
	#__WAIT_STATUS
 *

	)

60 
	#__WAIT_STATUS_DEFN
 *

	)

65 
waô
 *
	m__u±r
;

66 *
	m__ùå
;

67 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

68 
	#__WAIT_STATUS_DEFN
 *

	)

73 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

74 
	#__WAIT_STATUS
 *

	)

75 
	#__WAIT_STATUS_DEFN
 *

	)

80 
	~<bôs/waô°©us.h
>

82 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

88 #ifde‡
__WIFCONTINUED


89 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

93 #ifdef 
__USE_BSD


94 
	#WCOREFLAG
 
__WCOREFLAG


	)

95 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

96 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

97 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

101 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


104 
	mP_ALL
,

105 
	mP_PID
,

106 
	mP_PGID


107 } 
	tidty≥_t
;

116 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

118 #ifdef 
__USE_BSD


120 
	#WAIT_ANY
 (-1Ë

	)

121 
	#WAIT_MYPGRP
 0

	)

139 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

141 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


142 
	#__√ed_sigöfo_t


	)

143 
	~<bôs/sigöfo.h
>

155 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

156 
__›ti⁄s
);

159 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


162 
	grußge
;

169 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

170 
rußge
 * 
__ußge
Ë
__THROW
;

173 #ifde‡
__USE_BSD


175 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

176 
rußge
 *
__ußge
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/termios.h

23 #i‚def 
_TERMIOS_H


24 
	#_TERMIOS_H
 1

	)

26 
	~<„©uªs.h
>

27 #ifde‡
__USE_UNIX98


29 
	~<bôs/ty≥s.h
>

30 #i‚de‡
__pid_t_deföed


31 
__pid_t
 
	tpid_t
;

32 
	#__pid_t_deföed


	)

36 
	g__BEGIN_DECLS


40 
	~<bôs/ãrmios.h
>

42 #ifde‡
__USE_BSD


45 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

49 
•ìd_t
 
	$cfgëo•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

52 
•ìd_t
 
	$cfgëi•ìd
 (
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

55 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

58 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

60 #ifdef 
__USE_BSD


62 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

67 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

71 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

72 
__c⁄°
 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

75 #ifdef 
__USE_BSD


77 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

81 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

87 
	`tcdøö
 (
__fd
);

91 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

95 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

98 #ifde‡
__USE_UNIX98


100 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

104 #ifde‡
__USE_BSD


105 
	~<sys/âydeÁu…s.h
>

108 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@/usr/include/utime.h

23 #i‚def 
_UTIME_H


24 
	#_UTIME_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

34 
	~<time.h
>

38 
	sutimbuf


40 
__time_t
 
	ma˘ime
;

41 
__time_t
 
	mmodtime
;

46 
	$utime
 (
__c⁄°
 *
__fûe
,

47 
__c⁄°
 
utimbuf
 *
__fûe_times
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
__END_DECLS


	@/usr/include/uuid/uuid.h

35 #i‚de‡
_UUID_UUID_H


36 
	#_UUID_UUID_H


	)

38 
	~<sys/ty≥s.h
>

39 #i‚de‡
_WIN32


40 
	~<sys/time.h
>

42 
	~<time.h
>

44 
	tuuid_t
[16];

47 
	#UUID_VARIANT_NCS
 0

	)

48 
	#UUID_VARIANT_DCE
 1

	)

49 
	#UUID_VARIANT_MICROSOFT
 2

	)

50 
	#UUID_VARIANT_OTHER
 3

	)

53 
	#UUID_TYPE_DCE_TIME
 1

	)

54 
	#UUID_TYPE_DCE_RANDOM
 4

	)

57 #ifde‡
__GNUC__


58 
	#UUID_DEFINE
(
«me
,
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
) \

59 c⁄° 
uuid_t
 
«me
 
	`__©åibuã__
 ((
unu£d
)Ë{
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
}

	)

61 
	#UUID_DEFINE
(
«me
,
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
) \

62 c⁄° 
uuid_t
 
«me
 = {
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
}

	)

65 #ifde‡
__˝lu•lus


70 
uuid_˛ór
(
uuid_t
 
uu
);

73 
uuid_com∑ª
(c⁄° 
uuid_t
 
uu1
, c⁄° uuid_à
uu2
);

76 
uuid_c›y
(
uuid_t
 
d°
, c⁄° uuid_à
§c
);

79 
uuid_gíî©e
(
uuid_t
 
out
);

80 
uuid_gíî©e_øndom
(
uuid_t
 
out
);

81 
uuid_gíî©e_time
(
uuid_t
 
out
);

84 
uuid_is_nuŒ
(c⁄° 
uuid_t
 
uu
);

87 
uuid_∑r£
(c⁄° *
ö
, 
uuid_t
 
uu
);

90 
uuid_u≈¨£
(c⁄° 
uuid_t
 
uu
, *
out
);

91 
uuid_u≈¨£_lowî
(c⁄° 
uuid_t
 
uu
, *
out
);

92 
uuid_u≈¨£_uµî
(c⁄° 
uuid_t
 
uu
, *
out
);

95 
time_t
 
uuid_time
(c⁄° 
uuid_t
 
uu
, 
timevÆ
 *
ªt_tv
);

96 
uuid_ty≥
(c⁄° 
uuid_t
 
uu
);

97 
uuid_v¨ü¡
(c⁄° 
uuid_t
 
uu
);

99 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/dirent.h

19 #i‚de‡
_DIRENT_H


23 
	sdúít


25 #i‚de‡
__USE_FILE_OFFSET64


26 
__öo_t
 
	md_öo
;

27 
__off_t
 
	md_off
;

29 
__öo64_t
 
	md_öo
;

30 
__off64_t
 
	md_off
;

32 
	md_ª˛í
;

33 
	md_ty≥
;

34 
	md_«me
[256];

37 #ifde‡
__USE_LARGEFILE64


38 
	sdúít64


40 
__öo64_t
 
	md_öo
;

41 
__off64_t
 
	md_off
;

42 
	md_ª˛í
;

43 
	md_ty≥
;

44 
	md_«me
[256];

48 
	#d_fûío
 
d_öo


	)

50 #unde‡
_DIRENT_HAVE_D_NAMLEN


51 
	#_DIRENT_HAVE_D_RECLEN


	)

52 
	#_DIRENT_HAVE_D_OFF


	)

53 
	#_DIRENT_HAVE_D_TYPE


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


23 
	~<bôs/w‹dsize.h
>

43 #i‡
__WORDSIZE
 == 64

57 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

58 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

59 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

62 
	#_POSIX_V7_LP64_OFF64
 1

	)

63 
	#_POSIX_V6_LP64_OFF64
 1

	)

64 
	#_XBS5_LP64_OFF64
 1

	)

70 
	#_POSIX_V7_ILP32_OFF32
 1

	)

71 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

72 
	#_POSIX_V6_ILP32_OFF32
 1

	)

73 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

74 
	#_XBS5_ILP32_OFF32
 1

	)

75 
	#_XBS5_ILP32_OFFBIG
 1

	)

92 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

93 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

94 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

95 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

96 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

97 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

20 #i‚def 
_FCNTL_H


24 
	~<sys/ty≥s.h
>

25 
	~<bôs/w‹dsize.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 #i‡
__WORDSIZE
 == 64

66 
	#O_LARGEFILE
 0

	)

68 
	#O_LARGEFILE
 0100000

	)

73 
	#F_DUPFD
 0

	)

74 
	#F_GETFD
 1

	)

75 
	#F_SETFD
 2

	)

76 
	#F_GETFL
 3

	)

77 
	#F_SETFL
 4

	)

78 #i‡
__WORDSIZE
 == 64

79 
	#F_GETLK
 5

	)

80 
	#F_SETLK
 6

	)

81 
	#F_SETLKW
 7

	)

83 
	#F_GETLK64
 5

	)

84 
	#F_SETLK64
 6

	)

85 
	#F_SETLKW64
 7

	)

87 #i‚de‡
__USE_FILE_OFFSET64


88 
	#F_GETLK
 5

	)

89 
	#F_SETLK
 6

	)

90 
	#F_SETLKW
 7

	)

92 
	#F_GETLK
 
F_GETLK64


	)

93 
	#F_SETLK
 
F_SETLK64


	)

94 
	#F_SETLKW
 
F_SETLKW64


	)

96 
	#F_GETLK64
 12

	)

97 
	#F_SETLK64
 13

	)

98 
	#F_SETLKW64
 14

	)

101 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


102 
	#F_SETOWN
 8

	)

103 
	#F_GETOWN
 9

	)

106 #ifde‡
__USE_GNU


107 
	#F_SETSIG
 10

	)

108 
	#F_GETSIG
 11

	)

109 
	#F_SETOWN_EX
 15

	)

110 
	#F_GETOWN_EX
 16

	)

113 #ifde‡
__USE_GNU


114 
	#F_SETLEASE
 1024

	)

115 
	#F_GETLEASE
 1025

	)

116 
	#F_NOTIFY
 1026

	)

117 
	#F_DUPFD_CLOEXEC
 1030

	)

122 
	#FD_CLOEXEC
 1

	)

125 
	#F_RDLCK
 0

	)

126 
	#F_WRLCK
 1

	)

127 
	#F_UNLCK
 2

	)

130 
	#F_EXLCK
 4

	)

131 
	#F_SHLCK
 8

	)

133 #ifde‡
__USE_BSD


135 
	#LOCK_SH
 1

	)

136 
	#LOCK_EX
 2

	)

137 
	#LOCK_NB
 4

	)

139 
	#LOCK_UN
 8

	)

142 #ifde‡
__USE_GNU


143 
	#LOCK_MAND
 32

	)

144 
	#LOCK_READ
 64

	)

145 
	#LOCK_WRITE
 128

	)

146 
	#LOCK_RW
 192

	)

149 #ifde‡
__USE_GNU


151 
	#DN_ACCESS
 0x00000001

	)

152 
	#DN_MODIFY
 0x00000002

	)

153 
	#DN_CREATE
 0x00000004

	)

154 
	#DN_DELETE
 0x00000008

	)

155 
	#DN_RENAME
 0x00000010

	)

156 
	#DN_ATTRIB
 0x00000020

	)

157 
	#DN_MULTISHOT
 0x80000000

	)

160 
	sÊock


162 
	ml_ty≥
;

163 
	ml_whí˚
;

164 #i‚de‡
__USE_FILE_OFFSET64


165 
__off_t
 
	ml_°¨t
;

166 
__off_t
 
	ml_Àn
;

168 
__off64_t
 
	ml_°¨t
;

169 
__off64_t
 
	ml_Àn
;

171 
__pid_t
 
	ml_pid
;

174 #ifde‡
__USE_LARGEFILE64


175 
	sÊock64


177 
	ml_ty≥
;

178 
	ml_whí˚
;

179 
__off64_t
 
	ml_°¨t
;

180 
__off64_t
 
	ml_Àn
;

181 
__pid_t
 
	ml_pid
;

185 #ifde‡
__USE_GNU


187 
	e__pid_ty≥


189 
	mF_OWNER_TID
 = 0,

190 
	mF_OWNER_PID
,

191 
	mF_OWNER_GID


195 
	sf_ow√r_ex


197 
__pid_ty≥
 
	mty≥
;

198 
__pid_t
 
	mpid
;

204 #ifdef 
__USE_BSD


205 
	#FAPPEND
 
O_APPEND


	)

206 
	#FFSYNC
 
O_FSYNC


	)

207 
	#FASYNC
 
O_ASYNC


	)

208 
	#FNONBLOCK
 
O_NONBLOCK


	)

209 
	#FNDELAY
 
O_NDELAY


	)

213 #ifde‡
__USE_XOPEN2K


214 
	#POSIX_FADV_NORMAL
 0

	)

215 
	#POSIX_FADV_RANDOM
 1

	)

216 
	#POSIX_FADV_SEQUENTIAL
 2

	)

217 
	#POSIX_FADV_WILLNEED
 3

	)

218 
	#POSIX_FADV_DONTNEED
 4

	)

219 
	#POSIX_FADV_NOREUSE
 5

	)

223 #ifde‡
__USE_GNU


225 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

228 
	#SYNC_FILE_RANGE_WRITE
 2

	)

231 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

236 
	#SPLICE_F_MOVE
 1

	)

237 
	#SPLICE_F_NONBLOCK
 2

	)

240 
	#SPLICE_F_MORE
 4

	)

241 
	#SPLICE_F_GIFT
 8

	)

245 #ifde‡
__USE_ATFILE


246 
	#AT_FDCWD
 -100

	)

249 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

250 
	#AT_REMOVEDIR
 0x200

	)

252 
	#AT_SYMLINK_FOLLOW
 0x400

	)

253 
	#AT_EACCESS
 0x200

	)

257 
	g__BEGIN_DECLS


259 #ifde‡
__USE_GNU


262 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

263 
__THROW
;

267 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

268 
__Êags
);

272 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

273 
size_t
 
__cou¡
, 
__Êags
);

276 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

277 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

278 
__Êags
);

281 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

282 
__Êags
);

285 #i‚de‡
__USE_FILE_OFFSET64


286 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

288 #ifde‡
__REDIRECT


289 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

290 
__off64_t
 
__Àn
),

291 
ÁŒoˇã64
);

293 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

296 #ifde‡
__USE_LARGEFILE64


297 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

298 
__off64_t
 
__Àn
);

302 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/locale.h

20 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


24 #i‚de‡
_BITS_LOCALE_H


25 
	#_BITS_LOCALE_H
 1

	)

29 
	m__LC_CTYPE
 = 0,

30 
	m__LC_NUMERIC
 = 1,

31 
	m__LC_TIME
 = 2,

32 
	m__LC_COLLATE
 = 3,

33 
	m__LC_MONETARY
 = 4,

34 
	m__LC_MESSAGES
 = 5,

35 
	m__LC_ALL
 = 6,

36 
	m__LC_PAPER
 = 7,

37 
	m__LC_NAME
 = 8,

38 
	m__LC_ADDRESS
 = 9,

39 
	m__LC_TELEPHONE
 = 10,

40 
	m__LC_MEASUREMENT
 = 11,

41 
	m__LC_IDENTIFICATION
 = 12

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

20 #i‚de‡
_SETJMP_H


25 #ifde‡
__REDIRECT_NTH


26 
__REDIRECT_NTH
 (
l⁄gjmp
,

27 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

28 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

29 
__REDIRECT_NTH
 (
_l⁄gjmp
,

30 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

31 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

32 
__REDIRECT_NTH
 (
sigl⁄gjmp
,

33 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

34 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

36 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

37 
__THROW
 
__©åibuã__
 ((
__n‹ëu∫__
));

38 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

40 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‚de‡
_BITS_SIGCONTEXT_H


20 
	#_BITS_SIGCONTEXT_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


26 
	~<bôs/w‹dsize.h
>

28 
	s_Âªg


30 
	msignifiˇnd
[4];

31 
	mexp⁄ít
;

34 
	s_Âxªg


36 
	msignifiˇnd
[4];

37 
	mexp⁄ít
;

38 
	m∑ddög
[3];

41 
	s_xmmªg


43 
__uöt32_t
 
	mñemít
[4];

48 #i‡
__WORDSIZE
 == 32

50 
	s_Â°©e


53 
__uöt32_t
 
	mcw
;

54 
__uöt32_t
 
	msw
;

55 
__uöt32_t
 
	mèg
;

56 
__uöt32_t
 
	mùoff
;

57 
__uöt32_t
 
	mcs£l
;

58 
__uöt32_t
 
	md©aoff
;

59 
__uöt32_t
 
	md©a£l
;

60 
_Âªg
 
	m_°
[8];

61 
	m°©us
;

62 
	mmagic
;

65 
__uöt32_t
 
	m_fx§_ív
[6];

66 
__uöt32_t
 
	mmxc§
;

67 
__uöt32_t
 
	mª£rved
;

68 
_Âxªg
 
	m_fx§_°
[8];

69 
_xmmªg
 
	m_xmm
[8];

70 
__uöt32_t
 
	m∑ddög
[56];

73 #i‚de‡
sigc⁄ãxt_°ru˘


78 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

81 
	ssigc⁄ãxt


83 
	mgs
, 
	m__gsh
;

84 
	mfs
, 
	m__fsh
;

85 
	mes
, 
	m__esh
;

86 
	mds
, 
	m__dsh
;

87 
	medi
;

88 
	mesi
;

89 
	mebp
;

90 
	me•
;

91 
	mebx
;

92 
	medx
;

93 
	mecx
;

94 
	móx
;

95 
	må≠no
;

96 
	mîr
;

97 
	meù
;

98 
	mcs
, 
	m__csh
;

99 
	meÊags
;

100 
	me•_©_sig«l
;

101 
	mss
, 
	m__ssh
;

102 
_Â°©e
 * 
	mÂ°©e
;

103 
	mﬁdmask
;

104 
	m¸2
;

109 
	s_Â°©e


112 
__uöt16_t
 
	mcwd
;

113 
__uöt16_t
 
	mswd
;

114 
__uöt16_t
 
	m·w
;

115 
__uöt16_t
 
	mf›
;

116 
__uöt64_t
 
	mrù
;

117 
__uöt64_t
 
	mrdp
;

118 
__uöt32_t
 
	mmxc§
;

119 
__uöt32_t
 
	mmx¸_mask
;

120 
_Âxªg
 
	m_°
[8];

121 
_xmmªg
 
	m_xmm
[16];

122 
__uöt32_t
 
	m∑ddög
[24];

125 
	ssigc⁄ãxt


127 
	mr8
;

128 
	mr9
;

129 
	mr10
;

130 
	mr11
;

131 
	mr12
;

132 
	mr13
;

133 
	mr14
;

134 
	mr15
;

135 
	mrdi
;

136 
	mrsi
;

137 
	mrbp
;

138 
	mrbx
;

139 
	mrdx
;

140 
	møx
;

141 
	mrcx
;

142 
	mr•
;

143 
	mrù
;

144 
	meÊags
;

145 
	mcs
;

146 
	mgs
;

147 
	mfs
;

148 
	m__∑d0
;

149 
	mîr
;

150 
	må≠no
;

151 
	mﬁdmask
;

152 
	m¸2
;

153 
_Â°©e
 * 
	mÂ°©e
;

154 
	m__ª£rved1
 [8];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

236 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

239 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

245 
	smsghdr


247 *
	mmsg_«me
;

248 
sockÀn_t
 
	mmsg_«mñí
;

250 
iovec
 *
	mmsg_iov
;

251 
size_t
 
	mmsg_iovÀn
;

253 *
	mmsg_c⁄åﬁ
;

254 
size_t
 
	mmsg_c⁄åﬁÀn
;

259 
	mmsg_Êags
;

263 
	scmsghdr


265 
size_t
 
	mcmsg_Àn
;

270 
	mcmsg_Àvñ
;

271 
	mcmsg_ty≥
;

272 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

273 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

278 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

279 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

281 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

283 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

284 
	#CMSG_FIRSTHDR
(
mhdr
) \

285 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

286 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

287 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

288 & (
size_t
Ë~( (size_tË- 1))

	)

289 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

290 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

291 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

293 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

294 
cmsghdr
 *
__cmsg
Ë
__THROW
;

295 #ifde‡
__USE_EXTERN_INLINES


296 #i‚de‡
_EXTERN_INLINE


297 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

299 
_EXTERN_INLINE
 
cmsghdr
 *

300 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

302 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

306 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

307 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

308 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


309 + 
__mhdr
->
msg_c⁄åﬁÀn
)

310 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

311 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

314  
__cmsg
;

315 
	}
}

322 
	mSCM_RIGHTS
 = 0x01

323 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

324 #ifde‡
__USE_GNU


325 , 
	mSCM_CREDENTIALS
 = 0x02

326 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

330 #ifde‡
__USE_GNU


332 
	su¸ed


334 
pid_t
 
	mpid
;

335 
uid_t
 
	muid
;

336 
gid_t
 
	mgid
;

341 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


342 #i‚de‡
FIOGETOWN


343 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

345 #i‚de‡
FIOSETOWN


346 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

348 #i‚de‡
SIOCATMARK


349 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

351 #i‚de‡
SIOCGPGRP


352 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

354 #i‚de‡
SIOCGSTAMP


355 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

357 #i‚de‡
SIOCGSTAMPNS


358 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

360 #i‚de‡
SIOCSPGRP


361 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

366 
	~<asm/sockë.h
>

368 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


369 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


370 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


371 #unde‡
FIOGETOWN


373 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


374 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


375 #unde‡
FIOSETOWN


377 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


378 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


379 #unde‡
SIOCATMARK


381 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


382 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


383 #unde‡
SIOCGPGRP


385 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


386 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


387 #unde‡
SIOCGSTAMP


389 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


390 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


391 #unde‡
SIOCGSTAMPNS


393 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


394 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


395 #unde‡
SIOCSPGRP


400 
	slögî


402 
	ml_⁄off
;

403 
	ml_lögî
;

	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_KERNEL
 0

	)

26 #i‡
__WORDSIZE
 == 32

27 
	#_STAT_VER_SVR4
 2

	)

28 
	#_STAT_VER_LINUX
 3

	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

35 
	#_STAT_VER_LINUX
 1

	)

38 
	#_MKNOD_VER_LINUX
 0

	)

41 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

43 
	s°©


45 
__dev_t
 
	m°_dev
;

46 #i‡
__WORDSIZE
 == 32

47 
	m__∑d1
;

49 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


50 
__öo_t
 
	m°_öo
;

52 
__öo_t
 
	m__°_öo
;

54 #i‡
__WORDSIZE
 == 32

55 
__mode_t
 
	m°_mode
;

56 
__∆ök_t
 
	m°_∆ök
;

58 
__∆ök_t
 
	m°_∆ök
;

59 
__mode_t
 
	m°_mode
;

61 
__uid_t
 
	m°_uid
;

62 
__gid_t
 
	m°_gid
;

63 #i‡
__WORDSIZE
 == 64

64 
	m__∑d0
;

66 
__dev_t
 
	m°_rdev
;

67 #i‡
__WORDSIZE
 == 32

68 
	m__∑d2
;

70 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


71 
__off_t
 
	m°_size
;

73 
__off64_t
 
	m°_size
;

75 
__blksize_t
 
	m°_blksize
;

76 #i‡
__WORDSIZE
 =64 || !
deföed
 
__USE_FILE_OFFSET64


77 
__blk˙t_t
 
	m°_blocks
;

79 
__blk˙t64_t
 
	m°_blocks
;

81 #ifde‡
__USE_MISC


88 
time•ec
 
	m°_©im
;

89 
time•ec
 
	m°_mtim
;

90 
time•ec
 
	m°_˘im
;

91 
	#°_©ime
 
°_©im
.
tv_£c


	)

92 
	#°_mtime
 
°_mtim
.
tv_£c


	)

93 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

95 
__time_t
 
	m°_©ime
;

96 
	m°_©imí£c
;

97 
__time_t
 
	m°_mtime
;

98 
	m°_mtimí£c
;

99 
__time_t
 
	m°_˘ime
;

100 
	m°_˘imí£c
;

102 #i‡
__WORDSIZE
 == 64

103 
	m__unu£d
[3];

105 #i‚de‡
__USE_FILE_OFFSET64


106 
	m__unu£d4
;

107 
	m__unu£d5
;

109 
__öo64_t
 
	m°_öo
;

114 #ifde‡
__USE_LARGEFILE64


116 
	s°©64


118 
__dev_t
 
	m°_dev
;

119 #i‡
__WORDSIZE
 == 64

120 
__öo64_t
 
	m°_öo
;

121 
__∆ök_t
 
	m°_∆ök
;

122 
__mode_t
 
	m°_mode
;

124 
	m__∑d1
;

125 
__öo_t
 
	m__°_öo
;

126 
__mode_t
 
	m°_mode
;

127 
__∆ök_t
 
	m°_∆ök
;

129 
__uid_t
 
	m°_uid
;

130 
__gid_t
 
	m°_gid
;

131 #i‡
__WORDSIZE
 == 64

132 
	m__∑d0
;

133 
__dev_t
 
	m°_rdev
;

134 
__off_t
 
	m°_size
;

136 
__dev_t
 
	m°_rdev
;

137 
	m__∑d2
;

138 
__off64_t
 
	m°_size
;

140 
__blksize_t
 
	m°_blksize
;

141 
__blk˙t64_t
 
	m°_blocks
;

142 #ifde‡
__USE_MISC


149 
time•ec
 
	m°_©im
;

150 
time•ec
 
	m°_mtim
;

151 
time•ec
 
	m°_˘im
;

152 
	#°_©ime
 
°_©im
.
tv_£c


	)

153 
	#°_mtime
 
°_mtim
.
tv_£c


	)

154 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

156 
__time_t
 
	m°_©ime
;

157 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
	m°_˘imí£c
;

163 #i‡
__WORDSIZE
 == 64

164 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/termios.h

21 #i‚de‡
_TERMIOS_H


25 
	tcc_t
;

26 
	t•ìd_t
;

27 
	ttcÊag_t
;

29 
	#NCCS
 32

	)

30 
	sãrmios


32 
tcÊag_t
 
	mc_iÊag
;

33 
tcÊag_t
 
	mc_oÊag
;

34 
tcÊag_t
 
	mc_cÊag
;

35 
tcÊag_t
 
	mc_lÊag
;

36 
cc_t
 
	mc_löe
;

37 
cc_t
 
	mc_cc
[
NCCS
];

38 
•ìd_t
 
	mc_i•ìd
;

39 
•ìd_t
 
	mc_o•ìd
;

40 
	#_HAVE_STRUCT_TERMIOS_C_ISPEED
 1

	)

41 
	#_HAVE_STRUCT_TERMIOS_C_OSPEED
 1

	)

45 
	#VINTR
 0

	)

46 
	#VQUIT
 1

	)

47 
	#VERASE
 2

	)

48 
	#VKILL
 3

	)

49 
	#VEOF
 4

	)

50 
	#VTIME
 5

	)

51 
	#VMIN
 6

	)

52 
	#VSWTC
 7

	)

53 
	#VSTART
 8

	)

54 
	#VSTOP
 9

	)

55 
	#VSUSP
 10

	)

56 
	#VEOL
 11

	)

57 
	#VREPRINT
 12

	)

58 
	#VDISCARD
 13

	)

59 
	#VWERASE
 14

	)

60 
	#VLNEXT
 15

	)

61 
	#VEOL2
 16

	)

64 
	#IGNBRK
 0000001

	)

65 
	#BRKINT
 0000002

	)

66 
	#IGNPAR
 0000004

	)

67 
	#PARMRK
 0000010

	)

68 
	#INPCK
 0000020

	)

69 
	#ISTRIP
 0000040

	)

70 
	#INLCR
 0000100

	)

71 
	#IGNCR
 0000200

	)

72 
	#ICRNL
 0000400

	)

73 
	#IUCLC
 0001000

	)

74 
	#IXON
 0002000

	)

75 
	#IXANY
 0004000

	)

76 
	#IXOFF
 0010000

	)

77 
	#IMAXBEL
 0020000

	)

78 
	#IUTF8
 0040000

	)

81 
	#OPOST
 0000001

	)

82 
	#OLCUC
 0000002

	)

83 
	#ONLCR
 0000004

	)

84 
	#OCRNL
 0000010

	)

85 
	#ONOCR
 0000020

	)

86 
	#ONLRET
 0000040

	)

87 
	#OFILL
 0000100

	)

88 
	#OFDEL
 0000200

	)

89 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


90 
	#NLDLY
 0000400

	)

91 
	#NL0
 0000000

	)

92 
	#NL1
 0000400

	)

93 
	#CRDLY
 0003000

	)

94 
	#CR0
 0000000

	)

95 
	#CR1
 0001000

	)

96 
	#CR2
 0002000

	)

97 
	#CR3
 0003000

	)

98 
	#TABDLY
 0014000

	)

99 
	#TAB0
 0000000

	)

100 
	#TAB1
 0004000

	)

101 
	#TAB2
 0010000

	)

102 
	#TAB3
 0014000

	)

103 
	#BSDLY
 0020000

	)

104 
	#BS0
 0000000

	)

105 
	#BS1
 0020000

	)

106 
	#FFDLY
 0100000

	)

107 
	#FF0
 0000000

	)

108 
	#FF1
 0100000

	)

111 
	#VTDLY
 0040000

	)

112 
	#VT0
 0000000

	)

113 
	#VT1
 0040000

	)

115 #ifde‡
__USE_MISC


116 
	#XTABS
 0014000

	)

120 #ifde‡
__USE_MISC


121 
	#CBAUD
 0010017

	)

123 
	#B0
 0000000

	)

124 
	#B50
 0000001

	)

125 
	#B75
 0000002

	)

126 
	#B110
 0000003

	)

127 
	#B134
 0000004

	)

128 
	#B150
 0000005

	)

129 
	#B200
 0000006

	)

130 
	#B300
 0000007

	)

131 
	#B600
 0000010

	)

132 
	#B1200
 0000011

	)

133 
	#B1800
 0000012

	)

134 
	#B2400
 0000013

	)

135 
	#B4800
 0000014

	)

136 
	#B9600
 0000015

	)

137 
	#B19200
 0000016

	)

138 
	#B38400
 0000017

	)

139 #ifde‡
__USE_MISC


140 
	#EXTA
 
B19200


	)

141 
	#EXTB
 
B38400


	)

143 
	#CSIZE
 0000060

	)

144 
	#CS5
 0000000

	)

145 
	#CS6
 0000020

	)

146 
	#CS7
 0000040

	)

147 
	#CS8
 0000060

	)

148 
	#CSTOPB
 0000100

	)

149 
	#CREAD
 0000200

	)

150 
	#PARENB
 0000400

	)

151 
	#PARODD
 0001000

	)

152 
	#HUPCL
 0002000

	)

153 
	#CLOCAL
 0004000

	)

154 #ifde‡
__USE_MISC


155 
	#CBAUDEX
 0010000

	)

157 
	#B57600
 0010001

	)

158 
	#B115200
 0010002

	)

159 
	#B230400
 0010003

	)

160 
	#B460800
 0010004

	)

161 
	#B500000
 0010005

	)

162 
	#B576000
 0010006

	)

163 
	#B921600
 0010007

	)

164 
	#B1000000
 0010010

	)

165 
	#B1152000
 0010011

	)

166 
	#B1500000
 0010012

	)

167 
	#B2000000
 0010013

	)

168 
	#B2500000
 0010014

	)

169 
	#B3000000
 0010015

	)

170 
	#B3500000
 0010016

	)

171 
	#B4000000
 0010017

	)

172 
	#__MAX_BAUD
 
B4000000


	)

173 #ifde‡
__USE_MISC


174 
	#CIBAUD
 002003600000

	)

175 
	#CMSPAR
 010000000000

	)

176 
	#CRTSCTS
 020000000000

	)

180 
	#ISIG
 0000001

	)

181 
	#ICANON
 0000002

	)

182 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


183 
	#XCASE
 0000004

	)

185 
	#ECHO
 0000010

	)

186 
	#ECHOE
 0000020

	)

187 
	#ECHOK
 0000040

	)

188 
	#ECHONL
 0000100

	)

189 
	#NOFLSH
 0000200

	)

190 
	#TOSTOP
 0000400

	)

191 #ifde‡
__USE_MISC


192 
	#ECHOCTL
 0001000

	)

193 
	#ECHOPRT
 0002000

	)

194 
	#ECHOKE
 0004000

	)

195 
	#FLUSHO
 0010000

	)

196 
	#PENDIN
 0040000

	)

198 
	#IEXTEN
 0100000

	)

201 
	#TCOOFF
 0

	)

202 
	#TCOON
 1

	)

203 
	#TCIOFF
 2

	)

204 
	#TCION
 3

	)

207 
	#TCIFLUSH
 0

	)

208 
	#TCOFLUSH
 1

	)

209 
	#TCIOFLUSH
 2

	)

212 
	#TCSANOW
 0

	)

213 
	#TCSADRAIN
 1

	)

214 
	#TCSAFLUSH
 2

	)

217 
	#_IOT_ãrmios
 \

218 
	`_IOT
 (
	`_IOTS
 (
cÊag_t
), 4, _IOTS (
cc_t
), 
NCCS
, _IOTS (
•ìd_t
), 2)

	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/utsname.h

19 #i‚de‡
_SYS_UTSNAME_H


24 
	#_UTSNAME_LENGTH
 65

	)

29 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/blkid/blkid_types.h

6 #i‡(!
deföed
(
_LINUX_TYPES_H
Ë&& !deföed(
_BLKID_TYPES_H
) && \

7 !
	$deföed
(
_EXT2_TYPES_H
))

8 
	#_BLKID_TYPES_H


	)

10 
	#__S8_TYPEDEF
 
__sig√d__
 

	)

11 
	#__U8_TYPEDEF
 

	)

12 
	#__S16_TYPEDEF
 
__sig√d__
 

	)

13 
	#__U16_TYPEDEF
 

	)

14 
	#__S32_TYPEDEF
 
__sig√d__
 

	)

15 
	#__U32_TYPEDEF
 

	)

16 
	#__S64_TYPEDEF
 
__sig√d__
 

	)

17 
	#__U64_TYPEDEF
 

	)

19 #ifde‡
__U8_TYPEDEF


20 
__U8_TYPEDEF
 
	t__u8
;

22 
	t__u8
;

25 #ifde‡
__S8_TYPEDEF


26 
__S8_TYPEDEF
 
	t__s8
;

28 sig√d 
	t__s8
;

31 #ifde‡
__U16_TYPEDEF


32 
__U16_TYPEDEF
 
	t__u16
;

35 
	t__u16
;

38 
	t__u16
;

40 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


45 #ifde‡
__S16_TYPEDEF


46 
__S16_TYPEDEF
 
	t__s16
;

49 
	t__s16
;

52 
	t__s16
;

54 ?==
îr‹
: 
undeföed
 16 
bô
 
ty≥


60 #ifde‡
__U32_TYPEDEF


61 
__U32_TYPEDEF
 
	t__u32
;

64 
	t__u32
;

67 
	t__u32
;

70 
	t__u32
;

72 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


78 #ifde‡
__S32_TYPEDEF


79 
__S32_TYPEDEF
 
	t__s32
;

82 
	t__s32
;

85 
	t__s32
;

88 
	t__s32
;

90 ?=
îr‹
: 
undeföed
 32 
bô
 
ty≥


96 #ifde‡
__U64_TYPEDEF


97 
__U64_TYPEDEF
 
	t__u64
;

100 
	t__u64
;

103 
	t__u64
;

106 
	t__u64
;

112 #ifde‡
__S64_TYPEDEF


113 
__S64_TYPEDEF
 
	t__s64
;

116 
	t__s64
;

119 
	t__s64
;

122 #i‡
	`deföed
(
__GNUC__
)

123 
__sig√d__
 
	t__s64
;

125 sig√d 
	t__s64
;

132 #unde‡
__S8_TYPEDEF


133 #unde‡
__U8_TYPEDEF


134 #unde‡
__S16_TYPEDEF


135 #unde‡
__U16_TYPEDEF


136 #unde‡
__S32_TYPEDEF


137 #unde‡
__U32_TYPEDEF


138 #unde‡
__S64_TYPEDEF


139 #unde‡
__U64_TYPEDEF


	@/usr/include/com_err.h

11 #i‡!
deföed
(
__COM_ERR_H
Ë&& !deföed(
__COM_ERR_H__
)

13 #ifde‡
__GNUC__


14 
	#COM_ERR_ATTR
(
x
Ë
	`__©åibuã__
(x)

	)

16 
	#COM_ERR_ATTR
(
x
)

	)

19 
	~<°ddef.h
>

20 
	~<°d¨g.h
>

22 
	tîrcode_t
;

24 
	sîr‹_èbÀ
 {

25 c⁄° * c⁄° * 
	mmsgs
;

26 
	mba£
;

27 
	mn_msgs
;

29 
	gë_li°
;

31 
	$com_îr
 (const *, , const *, ...)

32 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 4)));

34 
	$com_îr_va
 (c⁄° *
whﬂmi
, 
îrcode_t
 
code
, c⁄° *
fmt
,

35 
va_li°
 
¨gs
)

36 
	`COM_ERR_ATTR
((
	`f‹m©
(
¥ötf
, 3, 0)));

38 c⁄° *
	`îr‹_mesßge
 ();

39 (*
com_îr_hook
Ë(c⁄° *, , c⁄° *, 
va_li°
);

40 (*
	`£t_com_îr_hook
 ((*) (const *, ,

41 c⁄° *, 
va_li°
)))

42 (c⁄° *, , c⁄° *, 
va_li°
);

43 (*
	$ª£t_com_îr_hook
 ()) (const *, ,

44 c⁄° *, 
va_li°
);

45 
	`öô_îr‹_èbÀ
(c⁄° * c⁄° *
msgs
, 
ba£
, 
cou¡
);

47 
îrcode_t
 
	`add_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

48 
îrcode_t
 
	`ªmove_îr‹_èbÀ
(c⁄° 
îr‹_èbÀ
 * 
ë
);

49 
	`add_to_îr‹_èbÀ
(
ë_li°
 *
√w_èbÀ
);

52 c⁄° *
	`com_right
(
ë_li°
 *
li°
, 
code
);

53 c⁄° *
	`com_right_r
(
ë_li°
 *
li°
, 
code
, *
°r
, 
size_t
 
Àn
);

54 
	`öôülize_îr‹_èbÀ_r
(
ë_li°
 **
li°
,

55 c⁄° **
mesßges
,

56 
num_îr‹s
,

57 
ba£
);

58 
	`‰ì_îr‹_èbÀ
(
ë_li°
 *
ë
);

61 
	`ë_li°_lock
();

62 
	`ë_li°_u∆ock
();

64 
	#__COM_ERR_H


	)

65 
	#__COM_ERR_H__


	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/ext2fs/bitops.h

17 
ext2fs_£t_bô
(
ƒ
,* 
addr
);

18 
ext2fs_˛ór_bô
(
ƒ
, * 
addr
);

19 
ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
);

20 
ext2fs_Á°_£t_bô
(
ƒ
,* 
addr
);

21 
ext2fs_Á°_˛ór_bô
(
ƒ
, * 
addr
);

22 
__u16
 
ext2fs_swab16
(__u16 
vÆ
);

23 
__u32
 
ext2fs_swab32
(__u32 
vÆ
);

24 
__u64
 
ext2fs_swab64
(__u64 
vÆ
);

26 #ifde‡
WORDS_BIGENDIAN


27 
	#ext2fs_˝u_to_À64
(
x
Ë
	`ext2fs_swab64
((x))

	)

28 
	#ext2fs_À64_to_˝u
(
x
Ë
	`ext2fs_swab64
((x))

	)

29 
	#ext2fs_˝u_to_À32
(
x
Ë
	`ext2fs_swab32
((x))

	)

30 
	#ext2fs_À32_to_˝u
(
x
Ë
	`ext2fs_swab32
((x))

	)

31 
	#ext2fs_˝u_to_À16
(
x
Ë
	`ext2fs_swab16
((x))

	)

32 
	#ext2fs_À16_to_˝u
(
x
Ë
	`ext2fs_swab16
((x))

	)

33 
	#ext2fs_˝u_to_be32
(
x
Ë((
__u32
)(x))

	)

34 
	#ext2fs_be32_to_˝u
(
x
Ë((
__u32
)(x))

	)

35 
	#ext2fs_˝u_to_be16
(
x
Ë((
__u16
)(x))

	)

36 
	#ext2fs_be16_to_˝u
(
x
Ë((
__u16
)(x))

	)

38 
	#ext2fs_˝u_to_À64
(
x
Ë((
__u64
)(x))

	)

39 
	#ext2fs_À64_to_˝u
(
x
Ë((
__u64
)(x))

	)

40 
	#ext2fs_˝u_to_À32
(
x
Ë((
__u32
)(x))

	)

41 
	#ext2fs_À32_to_˝u
(
x
Ë((
__u32
)(x))

	)

42 
	#ext2fs_˝u_to_À16
(
x
Ë((
__u16
)(x))

	)

43 
	#ext2fs_À16_to_˝u
(
x
Ë((
__u16
)(x))

	)

44 
	#ext2fs_˝u_to_be32
(
x
Ë
	`ext2fs_swab32
((x))

	)

45 
	#ext2fs_be32_to_˝u
(
x
Ë
	`ext2fs_swab32
((x))

	)

46 
	#ext2fs_˝u_to_be16
(
x
Ë
	`ext2fs_swab16
((x))

	)

47 
	#ext2fs_be16_to_˝u
(
x
Ë
	`ext2fs_swab16
((x))

	)

55 c⁄° *
ext2fs_block_°rög
;

56 c⁄° *
ext2fs_öode_°rög
;

57 c⁄° *
ext2fs_m¨k_°rög
;

58 c⁄° *
ext2fs_unm¨k_°rög
;

59 c⁄° *
ext2fs_ã°_°rög
;

60 
ext2fs_w¨n_bôm≠
(
îrcode_t
 
îrcode
, 
¨g
,

61 c⁄° *
des¸ùti⁄
);

62 
ext2fs_w¨n_bôm≠2
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

63 
code
, 
¨g
);

65 
ext2fs_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
, 
blk_t
 
block
);

66 
ext2fs_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

67 
blk_t
 
block
);

68 
ext2fs_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
, 
blk_t
 
block
);

70 
ext2fs_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
, 
ext2_öo_t
 
öode
);

71 
ext2fs_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

72 
ext2_öo_t
 
öode
);

73 
ext2fs_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
, 
ext2_öo_t
 
öode
);

75 
ext2fs_Á°_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

76 
blk_t
 
block
);

77 
ext2fs_Á°_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

78 
blk_t
 
block
);

79 
ext2fs_Á°_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

80 
blk_t
 
block
);

82 
ext2fs_Á°_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

83 
ext2_öo_t
 
öode
);

84 
ext2fs_Á°_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

85 
ext2_öo_t
 
öode
);

86 
ext2fs_Á°_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

87 
ext2_öo_t
 
öode
);

88 
blk_t
 
ext2fs_gë_block_bôm≠_°¨t
(
ext2fs_block_bôm≠
 
bôm≠
);

89 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_°¨t
(
ext2fs_öode_bôm≠
 
bôm≠
);

90 
blk_t
 
ext2fs_gë_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
);

91 
ext2_öo_t
 
ext2fs_gë_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
);

93 
ext2fs_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

94 
blk_t
 
block
, 
num
);

95 
ext2fs_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

96 
blk_t
 
block
, 
num
);

97 
ext2fs_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

98 
blk_t
 
block
, 
num
);

99 
ext2fs_ã°_öode_bôm≠_ønge
(
ext2fs_öode_bôm≠
 
bôm≠
,

100 
öo_t
 
öode
, 
num
);

101 
ext2fs_Á°_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

102 
blk_t
 
block
, 
num
);

103 
ext2fs_Á°_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

104 
blk_t
 
block
, 
num
);

105 
ext2fs_Á°_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

106 
blk_t
 
block
, 
num
);

107 
ext2fs_£t_bôm≠_∑ddög
(
ext2fs_gíîic_bôm≠
 
m≠
);

110 
ext2fs_m¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

111 
__u32
 
bôno
);

112 
ext2fs_unm¨k_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

113 
blk_t
 
bôno
);

114 
ext2fs_ã°_gíîic_bôm≠
(
ext2fs_gíîic_bôm≠
 
bôm≠
,

115 
blk_t
 
bôno
);

116 
ext2fs_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

117 
blk_t
 
block
, 
num
);

118 
__u32
 
ext2fs_gë_gíîic_bôm≠_°¨t
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

119 
__u32
 
ext2fs_gë_gíîic_bôm≠_íd
(
ext2fs_gíîic_bôm≠
 
bôm≠
);

128 #ifde‡
NO_INLINE_FUNCS


129 #i‡(
deföed
(
__GNUC__
Ë&& (deföed(
__i386__
Ë|| deföed(
__i486__
) || \

130 
deföed
(
__i586__
Ë|| 
	$deföed
(
__mc68000__
)))

133 
	#_EXT2_HAVE_ASM_BITOPS_


	)

137 #i‡(
	`deföed
(
INCLUDE_INLINE_FUNCS
Ë|| !deföed(
NO_INLINE_FUNCS
))

138 #ifde‡
INCLUDE_INLINE_FUNCS


139 
	#_INLINE_
 

	)

141 #ifde‡
__GNUC__


142 
	#_INLINE_
 
__ölöe__


	)

144 
	#_INLINE_
 
ölöe


	)

153 
_INLINE_
 
	$ext2fs_Á°_£t_bô
(
ƒ
,* 
addr
)

155 *
ADDR
 = (*Ë
addr
;

157 
ADDR
 +
ƒ
 >> 3;

158 *
ADDR
 |(1 << (
ƒ
 & 0x07));

159 
	}
}

161 
_INLINE_
 
	$ext2fs_Á°_˛ór_bô
(
ƒ
, * 
addr
)

163 *
ADDR
 = (*Ë
addr
;

165 
ADDR
 +
ƒ
 >> 3;

166 *
ADDR
 &~(1 << (
ƒ
 & 0x07));

167 
	}
}

170 #i‡((
deföed
 
__GNUC__
Ë&& !deföed(
_EXT2_USE_C_VERSIONS_
) && \

171 (
deföed
(
__i386__
Ë|| deföed(
__i486__
Ë|| 
	$deföed
(
__i586__
)))

173 
	#_EXT2_HAVE_ASM_BITOPS_


	)

174 
	#_EXT2_HAVE_ASM_SWAB_


	)

187 
	s__dummy_h
 { 
a
[100]; };

188 
	#EXT2FS_ADDR
 (*(
__dummy_h
 *Ë
addr
)

	)

189 
	#EXT2FS_CONST_ADDR
 (*(c⁄° 
__dummy_h
 *Ë
addr
)

	)

191 
_INLINE_
 
	$ext2fs_£t_bô
(
ƒ
, * 
addr
)

193 
ﬁdbô
;

195 
addr
 = (*Ë(((*ËaddrË+ (
ƒ
 >> 3));

196 
__asm__
 
	`__vﬁ©ûe__
("btsl %2,%1\n\tsbbl %0,%0"

197 :"Ù" (
ﬁdbô
),"+m" (
EXT2FS_ADDR
)

198 :"r" (
ƒ
 & 7));

199  
ﬁdbô
;

200 
	}
}

202 
_INLINE_
 
	$ext2fs_˛ór_bô
(
ƒ
, * 
addr
)

204 
ﬁdbô
;

206 
addr
 = (*Ë(((*ËaddrË+ (
ƒ
 >> 3));

207 
__asm__
 
	`__vﬁ©ûe__
("btrl %2,%1\n\tsbbl %0,%0"

208 :"Ù" (
ﬁdbô
),"+m" (
EXT2FS_ADDR
)

209 :"r" (
ƒ
 & 7));

210  
ﬁdbô
;

211 
	}
}

213 
_INLINE_
 
	$ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
)

215 
ﬁdbô
;

217 
addr
 = (c⁄° *Ë(((c⁄° *ËaddrË+ (
ƒ
 >> 3));

218 
__asm__
 
	`__vﬁ©ûe__
("btl %2,%1\n\tsbbl %0,%0"

219 :"Ù" (
ﬁdbô
)

220 :"m" (
EXT2FS_CONST_ADDR
),"r" (
ƒ
 & 7));

221  
ﬁdbô
;

222 
	}
}

224 
_INLINE_
 
__u32
 
	$ext2fs_swab32
(
__u32
 
vÆ
)

226 #ifde‡
EXT2FS_REQUIRE_486


227 
	`__asm__
("bsw≠ %0" : "Ù" (
vÆ
) : "0" (val));

229 
	`__asm__
("xchgb %b0,%h0\n\t"

232 :"=q" (
vÆ
)

233 : "0" (
vÆ
));

235  
vÆ
;

236 
	}
}

238 
_INLINE_
 
__u16
 
	$ext2fs_swab16
(
__u16
 
vÆ
)

240 
	`__asm__
("xchgb %b0,%h0" \

241 : "=q" (
vÆ
) \

242 : "0" (
vÆ
)); \

243  
vÆ
;

244 
	}
}

246 #unde‡
EXT2FS_ADDR


250 #i‡((
deföed
 
__GNUC__
Ë&& !deföed(
_EXT2_USE_C_VERSIONS_
) && \

251 (
	$deföed
(
__mc68000__
)))

253 
	#_EXT2_HAVE_ASM_BITOPS_


	)

255 
_INLINE_
 
	$ext2fs_£t_bô
(
ƒ
,* 
addr
)

257 
ªtvÆ
;

259 
__asm__
 
	`__vﬁ©ûe__
 ("bfset %2@{%1:#1}; sne %0"

260 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

262  
ªtvÆ
;

263 
	}
}

265 
_INLINE_
 
	$ext2fs_˛ór_bô
(
ƒ
, * 
addr
)

267 
ªtvÆ
;

269 
__asm__
 
	`__vﬁ©ûe__
 ("bfclr %2@{%1:#1}; sne %0"

270 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

272  
ªtvÆ
;

273 
	}
}

275 
_INLINE_
 
	$ext2fs_ã°_bô
(
ƒ
, c⁄° * 
addr
)

277 
ªtvÆ
;

279 
__asm__
 
	`__vﬁ©ûe__
 ("bftst %2@{%1:#1}; sne %0"

280 : "=d" (
ªtvÆ
Ë: "d" (
ƒ
^7), "a" (
addr
));

282  
ªtvÆ
;

283 
	}
}

288 #i‡!
deföed
(
_EXT2_HAVE_ASM_SWAB_
)

290 
_INLINE_
 
__u16
 
	$ext2fs_swab16
(
__u16
 
vÆ
)

292  (
vÆ
 >> 8) | (val << 8);

293 
	}
}

295 
_INLINE_
 
__u32
 
	$ext2fs_swab32
(
__u32
 
vÆ
)

297  ((
vÆ
>>24) | ((val>>8)&0xFF00) |

298 ((
vÆ
<<8)&0xFF0000) | (val<<24));

299 
	}
}

303 
_INLINE_
 
__u64
 
	$ext2fs_swab64
(
__u64
 
vÆ
)

305  (
	`ext2fs_swab32
(
vÆ
 >> 32) |

306 (((
__u64
)
	`ext2fs_swab32
(
vÆ
 & 0xFFFFFFFFUL)) << 32));

307 
	}
}

309 
_INLINE_
 
	$ext2fs_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

310 
blk_t
 
block
)

312  
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

313 
block
);

314 
	}
}

316 
_INLINE_
 
	$ext2fs_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

317 
blk_t
 
block
)

319  
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

320 
block
);

321 
	}
}

323 
_INLINE_
 
	$ext2fs_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

324 
blk_t
 
block
)

326  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

327 
block
);

328 
	}
}

330 
_INLINE_
 
	$ext2fs_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

331 
ext2_öo_t
 
öode
)

333  
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

334 
öode
);

335 
	}
}

337 
_INLINE_
 
	$ext2fs_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

338 
ext2_öo_t
 
öode
)

340  
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

341 
öode
);

342 
	}
}

344 
_INLINE_
 
	$ext2fs_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

345 
ext2_öo_t
 
öode
)

347  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

348 
öode
);

349 
	}
}

351 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

352 
blk_t
 
block
)

354 
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

355 
	}
}

357 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

358 
blk_t
 
block
)

360 
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
block
);

361 
	}
}

363 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠
(
ext2fs_block_bôm≠
 
bôm≠
,

364 
blk_t
 
block
)

366  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

367 
block
);

368 
	}
}

370 
_INLINE_
 
	$ext2fs_Á°_m¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

371 
ext2_öo_t
 
öode
)

373 
	`ext2fs_m¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

374 
	}
}

376 
_INLINE_
 
	$ext2fs_Á°_unm¨k_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

377 
ext2_öo_t
 
öode
)

379 
	`ext2fs_unm¨k_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
, 
öode
);

380 
	}
}

382 
_INLINE_
 
	$ext2fs_Á°_ã°_öode_bôm≠
(
ext2fs_öode_bôm≠
 
bôm≠
,

383 
ext2_öo_t
 
öode
)

385  
	`ext2fs_ã°_gíîic_bôm≠
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
,

386 
öode
);

387 
	}
}

389 
_INLINE_
 
blk_t
 
	$ext2fs_gë_block_bôm≠_°¨t
(
ext2fs_block_bôm≠
 
bôm≠
)

391  
	`ext2fs_gë_gíîic_bôm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

392 
	}
}

394 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_°¨t
(
ext2fs_öode_bôm≠
 
bôm≠
)

396  
	`ext2fs_gë_gíîic_bôm≠_°¨t
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

397 
	}
}

399 
_INLINE_
 
blk_t
 
	$ext2fs_gë_block_bôm≠_íd
(
ext2fs_block_bôm≠
 
bôm≠
)

401  
	`ext2fs_gë_gíîic_bôm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

402 
	}
}

404 
_INLINE_
 
ext2_öo_t
 
	$ext2fs_gë_öode_bôm≠_íd
(
ext2fs_öode_bôm≠
 
bôm≠
)

406  
	`ext2fs_gë_gíîic_bôm≠_íd
((
ext2fs_gíîic_bôm≠
Ë
bôm≠
);

407 
	}
}

409 
_INLINE_
 
	$ext2fs_Á°_ã°_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

410 
blk_t
 
block
, 
num
)

412  
	`ext2fs_ã°_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

413 
	}
}

415 
_INLINE_
 
	$ext2fs_Á°_m¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

416 
blk_t
 
block
, 
num
)

418 
	`ext2fs_m¨k_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

419 
	}
}

421 
_INLINE_
 
	$ext2fs_Á°_unm¨k_block_bôm≠_ønge
(
ext2fs_block_bôm≠
 
bôm≠
,

422 
blk_t
 
block
, 
num
)

424 
	`ext2fs_unm¨k_block_bôm≠_ønge
(
bôm≠
, 
block
, 
num
);

425 
	}
}

426 #unde‡
_INLINE_


	@/usr/include/ext2fs/ext2_err.h

6 
	~<ë/com_îr.h
>

8 
	#EXT2_ET_BASE
 (2133571328L)

	)

9 
	#EXT2_ET_MAGIC_EXT2FS_FILSYS
 (2133571329L)

	)

10 
	#EXT2_ET_MAGIC_BADBLOCKS_LIST
 (2133571330L)

	)

11 
	#EXT2_ET_MAGIC_BADBLOCKS_ITERATE
 (2133571331L)

	)

12 
	#EXT2_ET_MAGIC_INODE_SCAN
 (2133571332L)

	)

13 
	#EXT2_ET_MAGIC_IO_CHANNEL
 (2133571333L)

	)

14 
	#EXT2_ET_MAGIC_UNIX_IO_CHANNEL
 (2133571334L)

	)

15 
	#EXT2_ET_MAGIC_IO_MANAGER
 (2133571335L)

	)

16 
	#EXT2_ET_MAGIC_BLOCK_BITMAP
 (2133571336L)

	)

17 
	#EXT2_ET_MAGIC_INODE_BITMAP
 (2133571337L)

	)

18 
	#EXT2_ET_MAGIC_GENERIC_BITMAP
 (2133571338L)

	)

19 
	#EXT2_ET_MAGIC_TEST_IO_CHANNEL
 (2133571339L)

	)

20 
	#EXT2_ET_MAGIC_DBLIST
 (2133571340L)

	)

21 
	#EXT2_ET_MAGIC_ICOUNT
 (2133571341L)

	)

22 
	#EXT2_ET_MAGIC_PQ_IO_CHANNEL
 (2133571342L)

	)

23 
	#EXT2_ET_MAGIC_EXT2_FILE
 (2133571343L)

	)

24 
	#EXT2_ET_MAGIC_E2IMAGE
 (2133571344L)

	)

25 
	#EXT2_ET_MAGIC_INODE_IO_CHANNEL
 (2133571345L)

	)

26 
	#EXT2_ET_MAGIC_EXTENT_HANDLE
 (2133571346L)

	)

27 
	#EXT2_ET_BAD_MAGIC
 (2133571347L)

	)

28 
	#EXT2_ET_REV_TOO_HIGH
 (2133571348L)

	)

29 
	#EXT2_ET_RO_FILSYS
 (2133571349L)

	)

30 
	#EXT2_ET_GDESC_READ
 (2133571350L)

	)

31 
	#EXT2_ET_GDESC_WRITE
 (2133571351L)

	)

32 
	#EXT2_ET_GDESC_BAD_BLOCK_MAP
 (2133571352L)

	)

33 
	#EXT2_ET_GDESC_BAD_INODE_MAP
 (2133571353L)

	)

34 
	#EXT2_ET_GDESC_BAD_INODE_TABLE
 (2133571354L)

	)

35 
	#EXT2_ET_INODE_BITMAP_WRITE
 (2133571355L)

	)

36 
	#EXT2_ET_INODE_BITMAP_READ
 (2133571356L)

	)

37 
	#EXT2_ET_BLOCK_BITMAP_WRITE
 (2133571357L)

	)

38 
	#EXT2_ET_BLOCK_BITMAP_READ
 (2133571358L)

	)

39 
	#EXT2_ET_INODE_TABLE_WRITE
 (2133571359L)

	)

40 
	#EXT2_ET_INODE_TABLE_READ
 (2133571360L)

	)

41 
	#EXT2_ET_NEXT_INODE_READ
 (2133571361L)

	)

42 
	#EXT2_ET_UNEXPECTED_BLOCK_SIZE
 (2133571362L)

	)

43 
	#EXT2_ET_DIR_CORRUPTED
 (2133571363L)

	)

44 
	#EXT2_ET_SHORT_READ
 (2133571364L)

	)

45 
	#EXT2_ET_SHORT_WRITE
 (2133571365L)

	)

46 
	#EXT2_ET_DIR_NO_SPACE
 (2133571366L)

	)

47 
	#EXT2_ET_NO_INODE_BITMAP
 (2133571367L)

	)

48 
	#EXT2_ET_NO_BLOCK_BITMAP
 (2133571368L)

	)

49 
	#EXT2_ET_BAD_INODE_NUM
 (2133571369L)

	)

50 
	#EXT2_ET_BAD_BLOCK_NUM
 (2133571370L)

	)

51 
	#EXT2_ET_EXPAND_DIR_ERR
 (2133571371L)

	)

52 
	#EXT2_ET_TOOSMALL
 (2133571372L)

	)

53 
	#EXT2_ET_BAD_BLOCK_MARK
 (2133571373L)

	)

54 
	#EXT2_ET_BAD_BLOCK_UNMARK
 (2133571374L)

	)

55 
	#EXT2_ET_BAD_BLOCK_TEST
 (2133571375L)

	)

56 
	#EXT2_ET_BAD_INODE_MARK
 (2133571376L)

	)

57 
	#EXT2_ET_BAD_INODE_UNMARK
 (2133571377L)

	)

58 
	#EXT2_ET_BAD_INODE_TEST
 (2133571378L)

	)

59 
	#EXT2_ET_FUDGE_BLOCK_BITMAP_END
 (2133571379L)

	)

60 
	#EXT2_ET_FUDGE_INODE_BITMAP_END
 (2133571380L)

	)

61 
	#EXT2_ET_BAD_IND_BLOCK
 (2133571381L)

	)

62 
	#EXT2_ET_BAD_DIND_BLOCK
 (2133571382L)

	)

63 
	#EXT2_ET_BAD_TIND_BLOCK
 (2133571383L)

	)

64 
	#EXT2_ET_NEQ_BLOCK_BITMAP
 (2133571384L)

	)

65 
	#EXT2_ET_NEQ_INODE_BITMAP
 (2133571385L)

	)

66 
	#EXT2_ET_BAD_DEVICE_NAME
 (2133571386L)

	)

67 
	#EXT2_ET_MISSING_INODE_TABLE
 (2133571387L)

	)

68 
	#EXT2_ET_CORRUPT_SUPERBLOCK
 (2133571388L)

	)

69 
	#EXT2_ET_BAD_GENERIC_MARK
 (2133571389L)

	)

70 
	#EXT2_ET_BAD_GENERIC_UNMARK
 (2133571390L)

	)

71 
	#EXT2_ET_BAD_GENERIC_TEST
 (2133571391L)

	)

72 
	#EXT2_ET_SYMLINK_LOOP
 (2133571392L)

	)

73 
	#EXT2_ET_CALLBACK_NOTHANDLED
 (2133571393L)

	)

74 
	#EXT2_ET_BAD_BLOCK_IN_INODE_TABLE
 (2133571394L)

	)

75 
	#EXT2_ET_UNSUPP_FEATURE
 (2133571395L)

	)

76 
	#EXT2_ET_RO_UNSUPP_FEATURE
 (2133571396L)

	)

77 
	#EXT2_ET_LLSEEK_FAILED
 (2133571397L)

	)

78 
	#EXT2_ET_NO_MEMORY
 (2133571398L)

	)

79 
	#EXT2_ET_INVALID_ARGUMENT
 (2133571399L)

	)

80 
	#EXT2_ET_BLOCK_ALLOC_FAIL
 (2133571400L)

	)

81 
	#EXT2_ET_INODE_ALLOC_FAIL
 (2133571401L)

	)

82 
	#EXT2_ET_NO_DIRECTORY
 (2133571402L)

	)

83 
	#EXT2_ET_TOO_MANY_REFS
 (2133571403L)

	)

84 
	#EXT2_ET_FILE_NOT_FOUND
 (2133571404L)

	)

85 
	#EXT2_ET_FILE_RO
 (2133571405L)

	)

86 
	#EXT2_ET_DB_NOT_FOUND
 (2133571406L)

	)

87 
	#EXT2_ET_DIR_EXISTS
 (2133571407L)

	)

88 
	#EXT2_ET_UNIMPLEMENTED
 (2133571408L)

	)

89 
	#EXT2_ET_CANCEL_REQUESTED
 (2133571409L)

	)

90 
	#EXT2_ET_FILE_TOO_BIG
 (2133571410L)

	)

91 
	#EXT2_ET_JOURNAL_NOT_BLOCK
 (2133571411L)

	)

92 
	#EXT2_ET_NO_JOURNAL_SB
 (2133571412L)

	)

93 
	#EXT2_ET_JOURNAL_TOO_SMALL
 (2133571413L)

	)

94 
	#EXT2_ET_JOURNAL_UNSUPP_VERSION
 (2133571414L)

	)

95 
	#EXT2_ET_LOAD_EXT_JOURNAL
 (2133571415L)

	)

96 
	#EXT2_ET_NO_JOURNAL
 (2133571416L)

	)

97 
	#EXT2_ET_DIRHASH_UNSUPP
 (2133571417L)

	)

98 
	#EXT2_ET_BAD_EA_BLOCK_NUM
 (2133571418L)

	)

99 
	#EXT2_ET_TOO_MANY_INODES
 (2133571419L)

	)

100 
	#EXT2_ET_NOT_IMAGE_FILE
 (2133571420L)

	)

101 
	#EXT2_ET_RES_GDT_BLOCKS
 (2133571421L)

	)

102 
	#EXT2_ET_RESIZE_INODE_CORRUPT
 (2133571422L)

	)

103 
	#EXT2_ET_SET_BMAP_NO_IND
 (2133571423L)

	)

104 
	#EXT2_ET_TDB_SUCCESS
 (2133571424L)

	)

105 
	#EXT2_ET_TDB_ERR_CORRUPT
 (2133571425L)

	)

106 
	#EXT2_ET_TDB_ERR_IO
 (2133571426L)

	)

107 
	#EXT2_ET_TDB_ERR_LOCK
 (2133571427L)

	)

108 
	#EXT2_ET_TDB_ERR_OOM
 (2133571428L)

	)

109 
	#EXT2_ET_TDB_ERR_EXISTS
 (2133571429L)

	)

110 
	#EXT2_ET_TDB_ERR_NOLOCK
 (2133571430L)

	)

111 
	#EXT2_ET_TDB_ERR_EINVAL
 (2133571431L)

	)

112 
	#EXT2_ET_TDB_ERR_NOEXIST
 (2133571432L)

	)

113 
	#EXT2_ET_TDB_ERR_RDONLY
 (2133571433L)

	)

114 
	#EXT2_ET_DBLIST_EMPTY
 (2133571434L)

	)

115 
	#EXT2_ET_RO_BLOCK_ITERATE
 (2133571435L)

	)

116 
	#EXT2_ET_MAGIC_EXTENT_PATH
 (2133571436L)

	)

117 
	#EXT2_ET_MAGIC_RESERVED_10
 (2133571437L)

	)

118 
	#EXT2_ET_MAGIC_RESERVED_11
 (2133571438L)

	)

119 
	#EXT2_ET_MAGIC_RESERVED_12
 (2133571439L)

	)

120 
	#EXT2_ET_MAGIC_RESERVED_13
 (2133571440L)

	)

121 
	#EXT2_ET_MAGIC_RESERVED_14
 (2133571441L)

	)

122 
	#EXT2_ET_MAGIC_RESERVED_15
 (2133571442L)

	)

123 
	#EXT2_ET_MAGIC_RESERVED_16
 (2133571443L)

	)

124 
	#EXT2_ET_MAGIC_RESERVED_17
 (2133571444L)

	)

125 
	#EXT2_ET_MAGIC_RESERVED_18
 (2133571445L)

	)

126 
	#EXT2_ET_MAGIC_RESERVED_19
 (2133571446L)

	)

127 
	#EXT2_ET_EXTENT_HEADER_BAD
 (2133571447L)

	)

128 
	#EXT2_ET_EXTENT_INDEX_BAD
 (2133571448L)

	)

129 
	#EXT2_ET_EXTENT_LEAF_BAD
 (2133571449L)

	)

130 
	#EXT2_ET_EXTENT_NO_SPACE
 (2133571450L)

	)

131 
	#EXT2_ET_INODE_NOT_EXTENT
 (2133571451L)

	)

132 
	#EXT2_ET_EXTENT_NO_NEXT
 (2133571452L)

	)

133 
	#EXT2_ET_EXTENT_NO_PREV
 (2133571453L)

	)

134 
	#EXT2_ET_EXTENT_NO_UP
 (2133571454L)

	)

135 
	#EXT2_ET_EXTENT_NO_DOWN
 (2133571455L)

	)

136 
	#EXT2_ET_NO_CURRENT_NODE
 (2133571456L)

	)

137 
	#EXT2_ET_OP_NOT_SUPPORTED
 (2133571457L)

	)

138 
	#EXT2_ET_CANT_INSERT_EXTENT
 (2133571458L)

	)

139 
	#EXT2_ET_CANT_SPLIT_EXTENT
 (2133571459L)

	)

140 
	#EXT2_ET_EXTENT_NOT_FOUND
 (2133571460L)

	)

141 
	#EXT2_ET_EXTENT_NOT_SUPPORTED
 (2133571461L)

	)

142 
	#EXT2_ET_EXTENT_INVALID_LENGTH
 (2133571462L)

	)

143 
	#EXT2_ET_IO_CHANNEL_NO_SUPPORT_64
 (2133571463L)

	)

144 
	#EXT2_NO_MTAB_FILE
 (2133571464L)

	)

145 c⁄° 
îr‹_èbÀ
 
ë_ext2_îr‹_èbÀ
;

146 
öôülize_ext2_îr‹_èbÀ
();

149 
öôülize_ext2_îr‹_èbÀ_r
(
ë_li°
 **
li°
);

151 
	#ERROR_TABLE_BASE_ext2
 (2133571328L)

	)

154 
	#öô_ext2_îr_tbl
 
öôülize_ext2_îr‹_èbÀ


	)

155 
	#ext2_îr_ba£
 
ERROR_TABLE_BASE_ext2


	)

	@/usr/include/ext2fs/ext2_ext_attr.h

9 #i‚de‡
_EXT2_EXT_ATTR_H


10 
	#_EXT2_EXT_ATTR_H


	)

12 
	#EXT2_EXT_ATTR_MAGIC_v1
 0xEA010000

	)

13 
	#EXT2_EXT_ATTR_MAGIC
 0xEA020000

	)

16 
	#EXT2_EXT_ATTR_REFCOUNT_MAX
 1024

	)

18 
	sext2_ext_©å_hódî
 {

19 
__u32
 
	mh_magic
;

20 
__u32
 
	mh_ªfcou¡
;

21 
__u32
 
	mh_blocks
;

22 
__u32
 
	mh_hash
;

23 
__u32
 
	mh_ª£rved
[4];

26 
	sext2_ext_©å_íåy
 {

27 
__u8
 
	me_«me_Àn
;

28 
__u8
 
	me_«me_ödex
;

29 
__u16
 
	me_vÆue_offs
;

30 
__u32
 
	me_vÆue_block
;

31 
__u32
 
	me_vÆue_size
;

32 
__u32
 
	me_hash
;

34 
	me_«me
[0];

38 
	#EXT2_EXT_ATTR_PAD_BITS
 2

	)

39 
	#EXT2_EXT_ATTR_PAD
 ((Ë1<<
EXT2_EXT_ATTR_PAD_BITS
)

	)

40 
	#EXT2_EXT_ATTR_ROUND
 (
EXT2_EXT_ATTR_PAD
-1)

	)

41 
	#EXT2_EXT_ATTR_LEN
(
«me_Àn
) \

42 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

43 (
ext2_ext_©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

44 
	#EXT2_EXT_ATTR_NEXT
(
íåy
) \

45 –(
ext2_ext_©å_íåy
 *)( \

46 (*)(
íåy
Ë+ 
	`EXT2_EXT_ATTR_LEN
(”¡ry)->
e_«me_Àn
)Ë)

	)

47 
	#EXT2_EXT_ATTR_SIZE
(
size
) \

48 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

49 
	#EXT2_EXT_IS_LAST_ENTRY
(
íåy
Ë(*((
__u32
 *)”¡ry)Ë=0UL)

	)

50 
	#EXT2_EXT_ATTR_NAME
(
íåy
) \

51 (((*Ë(
íåy
)Ë+ (
ext2_ext_©å_íåy
))

	)

52 
	#EXT2_XATTR_LEN
(
«me_Àn
) \

53 (((
«me_Àn
Ë+ 
EXT2_EXT_ATTR_ROUND
 + \

54 (
ext2_x©å_íåy
)Ë& ~
EXT2_EXT_ATTR_ROUND
)

	)

55 
	#EXT2_XATTR_SIZE
(
size
) \

56 (((
size
Ë+ 
EXT2_EXT_ATTR_ROUND
Ë& ~EXT2_EXT_ATTR_ROUND)

	)

58 #ifde‡
__KERNEL__


59 #ifde‡
CONFIG_EXT2_FS_EXT_ATTR


60 
ext2_gë_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

61 
ext2_£t_ext_©å
(
öode
 *, c⁄° *, *, 
size_t
, );

62 
ext2_ext_©å_‰ì_öode
(
öode
 *inode);

63 
ext2_ext_©å_put_su≥r
(
su≥r_block
 *
sb
);

64 
ext2_ext_©å_öô
();

65 
ext2_ext_©å_d⁄e
();

67 
	#ext2_gë_ext_©å
 
NULL


	)

68 
	#ext2_£t_ext_©å
 
NULL


	)

	@/usr/include/ext2fs/ext3_extents.h

19 #i‚de‡
_LINUX_EXT3_EXTENTS


20 
	#_LINUX_EXT3_EXTENTS


	)

33 
	sext3_exã¡
 {

34 
__u32
 
	mì_block
;

35 
__u16
 
	mì_Àn
;

36 
__u16
 
	mì_°¨t_hi
;

37 
__u32
 
	mì_°¨t
;

44 
	sext3_exã¡_idx
 {

45 
__u32
 
	mei_block
;

46 
__u32
 
	mei_Àaf
;

48 
__u16
 
	mei_Àaf_hi
;

49 
__u16
 
	mei_unu£d
;

55 
	sext3_exã¡_hódî
 {

56 
__u16
 
	meh_magic
;

57 
__u16
 
	meh_íåõs
;

58 
__u16
 
	meh_max
;

59 
__u16
 
	meh_dïth
;

60 
__u32
 
	meh_gíî©i⁄
;

63 
	#EXT3_EXT_MAGIC
 0xf30a

	)

70 
	sext3_ext_∑th
 {

71 
__u32
 
	mp_block
;

72 
__u16
 
	mp_dïth
;

73 
ext3_exã¡
 *
	mp_ext
;

74 
ext3_exã¡_idx
 *
	mp_idx
;

75 
ext3_exã¡_hódî
 *
	mp_hdr
;

76 
buf„r_hód
 *
	mp_bh
;

96 
	#EXT_INIT_MAX_LEN
 (1UL << 15)

	)

97 
	#EXT_UNINIT_MAX_LEN
 (
EXT_INIT_MAX_LEN
 - 1)

	)

99 
	#EXT_FIRST_EXTENT
(
__hdr__
) \

100 ((
ext3_exã¡
 *Ë(((*Ë(
__hdr__
)) + \

101 (
ext3_exã¡_hódî
)))

	)

102 
	#EXT_FIRST_INDEX
(
__hdr__
) \

103 ((
ext3_exã¡_idx
 *Ë(((*Ë(
__hdr__
)) + \

104 (
ext3_exã¡_hódî
)))

	)

105 
	#EXT_HAS_FREE_INDEX
(
__∑th__
) \

106 ((
__∑th__
)->
p_hdr
->
eh_íåõs
 < (__∑th__)->p_hdr->
eh_max
)

	)

107 
	#EXT_LAST_EXTENT
(
__hdr__
) \

108 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

109 
	#EXT_LAST_INDEX
(
__hdr__
) \

110 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_íåõs
 - 1)

	)

111 
	#EXT_MAX_EXTENT
(
__hdr__
) \

112 (
	`EXT_FIRST_EXTENT
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

113 
	#EXT_MAX_INDEX
(
__hdr__
) \

114 (
	`EXT_FIRST_INDEX
((
__hdr__
)Ë+ (__hdr__)->
eh_max
 - 1)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡
_FORTIFY_SOURCE
 > 1

304 
	#__USE_FORTIFY_LEVEL
 2

	)

306 
	#__USE_FORTIFY_LEVEL
 1

	)

309 
	#__USE_FORTIFY_LEVEL
 0

	)

313 
	~<bôs/¥edefs.h
>

316 
	#__STDC_ISO_10646__
 200009L

	)

324 #unde‡
__GNU_LIBRARY__


325 
	#__GNU_LIBRARY__
 6

	)

329 
	#__GLIBC__
 2

	)

330 
	#__GLIBC_MINOR__
 11

	)

332 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

333 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

336 #i‡
deföed
 
__GNUC__
 \

337 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

338 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

339 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

340 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

344 #i‚de‡
__ASSEMBLER__


345 #i‚de‡
_SYS_CDEFS_H


346 
	~<sys/cdefs.h
>

351 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


352 
	#__USE_LARGEFILE
 1

	)

353 
	#__USE_LARGEFILE64
 1

	)

359 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

360 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

361 && 
deföed
 
	g__exã∫_ölöe


362 
	#__USE_EXTERN_INLINES
 1

	)

367 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

368 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

369 && 
deföed
 
	g__exã∫_ölöe


370 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

378 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/statfs.h

20 #i‚def 
_SYS_STATFS_H


21 
	#_SYS_STATFS_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/°©fs.h
>

28 
	g__BEGIN_DECLS


31 #i‚de‡
__USE_FILE_OFFSET64


32 
	$°©fs
 (
__c⁄°
 *
__fûe
, 
°©fs
 *
__buf
)

33 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

35 #ifde‡
__REDIRECT_NTH


36 
	`__REDIRECT_NTH
 (
°©fs
,

37 (
__c⁄°
 *
__fûe
, 
°©fs
 *
__buf
),

38 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

40 
	#°©fs
 
°©fs64


	)

43 #ifde‡
__USE_LARGEFILE64


44 
	$°©fs64
 (
__c⁄°
 *
__fûe
, 
°©fs64
 *
__buf
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

52 
__THROW
 
	`__n⁄nuŒ
 ((2));

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

56 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

58 
	#f°©fs
 
f°©fs64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

63 
__THROW
 
	`__n⁄nuŒ
 ((2));

66 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

24 
	~<bôs/w‹dsize.h
>

28 
	~<bôs/sigc⁄ãxt.h
>

30 #i‡
__WORDSIZE
 == 64

33 
	tgªg_t
;

36 
	#NGREG
 23

	)

39 
gªg_t
 
	tgªg£t_t
[
NGREG
];

41 #ifde‡
__USE_GNU


45 
	mREG_R8
 = 0,

46 
	#REG_R8
 
REG_R8


	)

47 
	mREG_R9
,

48 
	#REG_R9
 
REG_R9


	)

49 
	mREG_R10
,

50 
	#REG_R10
 
REG_R10


	)

51 
	mREG_R11
,

52 
	#REG_R11
 
REG_R11


	)

53 
	mREG_R12
,

54 
	#REG_R12
 
REG_R12


	)

55 
	mREG_R13
,

56 
	#REG_R13
 
REG_R13


	)

57 
	mREG_R14
,

58 
	#REG_R14
 
REG_R14


	)

59 
	mREG_R15
,

60 
	#REG_R15
 
REG_R15


	)

61 
	mREG_RDI
,

62 
	#REG_RDI
 
REG_RDI


	)

63 
	mREG_RSI
,

64 
	#REG_RSI
 
REG_RSI


	)

65 
	mREG_RBP
,

66 
	#REG_RBP
 
REG_RBP


	)

67 
	mREG_RBX
,

68 
	#REG_RBX
 
REG_RBX


	)

69 
	mREG_RDX
,

70 
	#REG_RDX
 
REG_RDX


	)

71 
	mREG_RAX
,

72 
	#REG_RAX
 
REG_RAX


	)

73 
	mREG_RCX
,

74 
	#REG_RCX
 
REG_RCX


	)

75 
	mREG_RSP
,

76 
	#REG_RSP
 
REG_RSP


	)

77 
	mREG_RIP
,

78 
	#REG_RIP
 
REG_RIP


	)

79 
	mREG_EFL
,

80 
	#REG_EFL
 
REG_EFL


	)

81 
	mREG_CSGSFS
,

82 
	#REG_CSGSFS
 
REG_CSGSFS


	)

83 
	mREG_ERR
,

84 
	#REG_ERR
 
REG_ERR


	)

85 
	mREG_TRAPNO
,

86 
	#REG_TRAPNO
 
REG_TRAPNO


	)

87 
	mREG_OLDMASK
,

88 
	#REG_OLDMASK
 
REG_OLDMASK


	)

89 
	mREG_CR2


90 
	#REG_CR2
 
REG_CR2


	)

94 
	s_libc_Âxªg


96 
	msignifiˇnd
[4];

97 
	mexp⁄ít
;

98 
	m∑ddög
[3];

101 
	s_libc_xmmªg


103 
__uöt32_t
 
	mñemít
[4];

106 
	s_libc_Â°©e


109 
__uöt16_t
 
	mcwd
;

110 
__uöt16_t
 
	mswd
;

111 
__uöt16_t
 
	m·w
;

112 
__uöt16_t
 
	mf›
;

113 
__uöt64_t
 
	mrù
;

114 
__uöt64_t
 
	mrdp
;

115 
__uöt32_t
 
	mmxc§
;

116 
__uöt32_t
 
	mmx¸_mask
;

117 
_libc_Âxªg
 
	m_°
[8];

118 
_libc_xmmªg
 
	m_xmm
[16];

119 
__uöt32_t
 
	m∑ddög
[24];

123 
_libc_Â°©e
 *
	tÂªg£t_t
;

128 
gªg£t_t
 
	mgªgs
;

130 
Âªg£t_t
 
	mÂªgs
;

131 
	m__ª£rved1
 [8];

132 } 
	tmc⁄ãxt_t
;

135 
	suc⁄ãxt


137 
	muc_Êags
;

138 
uc⁄ãxt
 *
	muc_lök
;

139 
°ack_t
 
	muc_°ack
;

140 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

141 
__sig£t_t
 
	muc_sigmask
;

142 
_libc_Â°©e
 
	m__Âªgs_mem
;

143 } 
	tuc⁄ãxt_t
;

148 
	tgªg_t
;

151 
	#NGREG
 19

	)

154 
gªg_t
 
	tgªg£t_t
[
NGREG
];

156 #ifde‡
__USE_GNU


160 
	mREG_GS
 = 0,

161 
	#REG_GS
 
REG_GS


	)

162 
	mREG_FS
,

163 
	#REG_FS
 
REG_FS


	)

164 
	mREG_ES
,

165 
	#REG_ES
 
REG_ES


	)

166 
	mREG_DS
,

167 
	#REG_DS
 
REG_DS


	)

168 
	mREG_EDI
,

169 
	#REG_EDI
 
REG_EDI


	)

170 
	mREG_ESI
,

171 
	#REG_ESI
 
REG_ESI


	)

172 
	mREG_EBP
,

173 
	#REG_EBP
 
REG_EBP


	)

174 
	mREG_ESP
,

175 
	#REG_ESP
 
REG_ESP


	)

176 
	mREG_EBX
,

177 
	#REG_EBX
 
REG_EBX


	)

178 
	mREG_EDX
,

179 
	#REG_EDX
 
REG_EDX


	)

180 
	mREG_ECX
,

181 
	#REG_ECX
 
REG_ECX


	)

182 
	mREG_EAX
,

183 
	#REG_EAX
 
REG_EAX


	)

184 
	mREG_TRAPNO
,

185 
	#REG_TRAPNO
 
REG_TRAPNO


	)

186 
	mREG_ERR
,

187 
	#REG_ERR
 
REG_ERR


	)

188 
	mREG_EIP
,

189 
	#REG_EIP
 
REG_EIP


	)

190 
	mREG_CS
,

191 
	#REG_CS
 
REG_CS


	)

192 
	mREG_EFL
,

193 
	#REG_EFL
 
REG_EFL


	)

194 
	mREG_UESP
,

195 
	#REG_UESP
 
REG_UESP


	)

196 
	mREG_SS


197 
	#REG_SS
 
REG_SS


	)

202 
	s_libc_Âªg


204 
	msignifiˇnd
[4];

205 
	mexp⁄ít
;

208 
	s_libc_Â°©e


210 
	mcw
;

211 
	msw
;

212 
	mèg
;

213 
	mùoff
;

214 
	mcs£l
;

215 
	md©aoff
;

216 
	md©a£l
;

217 
_libc_Âªg
 
	m_°
[8];

218 
	m°©us
;

222 
_libc_Â°©e
 *
	tÂªg£t_t
;

227 
gªg£t_t
 
	mgªgs
;

230 
Âªg£t_t
 
	mÂªgs
;

231 
	mﬁdmask
;

232 
	m¸2
;

233 } 
	tmc⁄ãxt_t
;

236 
	suc⁄ãxt


238 
	muc_Êags
;

239 
uc⁄ãxt
 *
	muc_lök
;

240 
°ack_t
 
	muc_°ack
;

241 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

242 
__sig£t_t
 
	muc_sigmask
;

243 
_libc_Â°©e
 
	m__Âªgs_mem
;

244 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

95 
	m__RLIMIT_NICE
 = 13,

96 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

100 
	m__RLIMIT_RTPRIO
 = 14,

101 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

103 
	m__RLIMIT_NLIMITS
 = 15,

104 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


105 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

106 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

110 #i‚de‡
__USE_FILE_OFFSET64


111 
	#RLIM_INFINITY
 (()(~0UL))

	)

113 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

116 #ifde‡
__USE_LARGEFILE64


117 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

121 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

122 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

126 #i‚de‡
__USE_FILE_OFFSET64


127 
__æim_t
 
	tæim_t
;

129 
__æim64_t
 
	tæim_t
;

131 #ifde‡
__USE_LARGEFILE64


132 
__æim64_t
 
	tæim64_t
;

135 
	sæimô


138 
æim_t
 
	mæim_cur
;

140 
æim_t
 
	mæim_max
;

143 #ifde‡
__USE_LARGEFILE64


144 
	sæimô64


147 
æim64_t
 
	mæim_cur
;

149 
æim64_t
 
	mæim_max
;

154 
	e__rußge_who


157 
	mRUSAGE_SELF
 = 0,

158 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

161 
	mRUSAGE_CHILDREN
 = -1

162 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

164 #ifde‡
__USE_GNU


167 
	mRUSAGE_THREAD
 = 1

168 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

170 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

174 
	#__√ed_timevÆ


	)

175 
	~<bôs/time.h
>

178 
	srußge


181 
timevÆ
 
	mru_utime
;

183 
timevÆ
 
	mru_°ime
;

185 
	mru_maxrss
;

188 
	mru_ixrss
;

190 
	mru_idrss
;

192 
	mru_i§ss
;

195 
	mru_möÊt
;

197 
	mru_majÊt
;

199 
	mru_nsw≠
;

202 
	mru_öblock
;

204 
	mru_oublock
;

206 
	mru_msg¢d
;

208 
	mru_msgrcv
;

210 
	mru_nsig«ls
;

214 
	mru_nvcsw
;

217 
	mru_nivcsw
;

221 
	#PRIO_MIN
 -20

	)

222 
	#PRIO_MAX
 20

	)

226 
	e__¥i‹ôy_which


228 
	mPRIO_PROCESS
 = 0,

229 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

230 
	mPRIO_PGRP
 = 1,

231 
	#PRIO_PGRP
 
PRIO_PGRP


	)

232 
	mPRIO_USER
 = 2

233 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/statfs.h

19 #i‚de‡
_SYS_STATFS_H


23 
	~<bôs/ty≥s.h
>

25 
	s°©fs


27 
__SWORD_TYPE
 
	mf_ty≥
;

28 
__SWORD_TYPE
 
	mf_bsize
;

29 #i‚de‡
__USE_FILE_OFFSET64


30 
__fsblk˙t_t
 
	mf_blocks
;

31 
__fsblk˙t_t
 
	mf_b‰ì
;

32 
__fsblk˙t_t
 
	mf_bavaû
;

33 
__fsfû˙t_t
 
	mf_fûes
;

34 
__fsfû˙t_t
 
	mf_f‰ì
;

36 
__fsblk˙t64_t
 
	mf_blocks
;

37 
__fsblk˙t64_t
 
	mf_b‰ì
;

38 
__fsblk˙t64_t
 
	mf_bavaû
;

39 
__fsfû˙t64_t
 
	mf_fûes
;

40 
__fsfû˙t64_t
 
	mf_f‰ì
;

42 
__fsid_t
 
	mf_fsid
;

43 
__SWORD_TYPE
 
	mf_«mñí
;

44 
__SWORD_TYPE
 
	mf_‰size
;

45 
__SWORD_TYPE
 
	mf_•¨e
[5];

48 #ifde‡
__USE_LARGEFILE64


49 
	s°©fs64


51 
__SWORD_TYPE
 
	mf_ty≥
;

52 
__SWORD_TYPE
 
	mf_bsize
;

53 
__fsblk˙t64_t
 
	mf_blocks
;

54 
__fsblk˙t64_t
 
	mf_b‰ì
;

55 
__fsblk˙t64_t
 
	mf_bavaû
;

56 
__fsfû˙t64_t
 
	mf_fûes
;

57 
__fsfû˙t64_t
 
	mf_f‰ì
;

58 
__fsid_t
 
	mf_fsid
;

59 
__SWORD_TYPE
 
	mf_«mñí
;

60 
__SWORD_TYPE
 
	mf_‰size
;

61 
__SWORD_TYPE
 
	mf_•¨e
[5];

66 
	#_STATFS_F_NAMELEN


	)

67 
	#_STATFS_F_FRSIZE


	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 
	#TIOCSRS485
 0x542F

	)

66 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

67 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

68 
	#TCGETX
 0x5432

	)

69 
	#TCSETX
 0x5433

	)

70 
	#TCSETXF
 0x5434

	)

71 
	#TCSETXW
 0x5435

	)

73 
	#FIONCLEX
 0x5450

	)

74 
	#FIOCLEX
 0x5451

	)

75 
	#FIOASYNC
 0x5452

	)

76 
	#TIOCSERCONFIG
 0x5453

	)

77 
	#TIOCSERGWILD
 0x5454

	)

78 
	#TIOCSERSWILD
 0x5455

	)

79 
	#TIOCGLCKTRMIOS
 0x5456

	)

80 
	#TIOCSLCKTRMIOS
 0x5457

	)

81 
	#TIOCSERGSTRUCT
 0x5458

	)

82 
	#TIOCSERGETLSR
 0x5459

	)

83 
	#TIOCSERGETMULTI
 0x545A

	)

84 
	#TIOCSERSETMULTI
 0x545B

	)

86 
	#TIOCMIWAIT
 0x545C

	)

87 
	#TIOCGICOUNT
 0x545D

	)

93 #i‚de‡
FIOQSIZE


94 
	#TIOCGHAYESESP
 0x545E

	)

95 
	#TIOCSHAYESESP
 0x545F

	)

96 
	#FIOQSIZE
 0x5460

	)

100 
	#TIOCPKT_DATA
 0

	)

101 
	#TIOCPKT_FLUSHREAD
 1

	)

102 
	#TIOCPKT_FLUSHWRITE
 2

	)

103 
	#TIOCPKT_STOP
 4

	)

104 
	#TIOCPKT_START
 8

	)

105 
	#TIOCPKT_NOSTOP
 16

	)

106 
	#TIOCPKT_DOSTOP
 32

	)

108 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 #i‚de‡
EXEC_PAGESIZE


10 
	#EXEC_PAGESIZE
 4096

	)

13 #i‚de‡
NOGROUP


14 
	#NOGROUP
 (-1)

	)

17 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

20 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

21 
	#__OPTION_EGLIBC_ENVZ
 1

	)

22 
	#__OPTION_EGLIBC_FCVT
 1

	)

23 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

24 
	#__OPTION_EGLIBC_FSTAB
 1

	)

25 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

26 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

27 
	#__OPTION_EGLIBC_INET
 1

	)

28 
	#__OPTION_EGLIBC_LIBM
 1

	)

29 
	#__OPTION_EGLIBC_LOCALES
 1

	)

30 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

31 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

32 
	#__OPTION_EGLIBC_NIS
 1

	)

33 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

34 
	#__OPTION_EGLIBC_RCMD
 1

	)

35 
	#__OPTION_EGLIBC_SPAWN
 1

	)

36 
	#__OPTION_EGLIBC_STREAMS
 1

	)

37 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

38 
	#__OPTION_EGLIBC_UTMP
 1

	)

39 
	#__OPTION_EGLIBC_UTMPX
 1

	)

40 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

41 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

42 
	#__OPTION_POSIX_REGEXP
 1

	)

43 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

44 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@
1
.
1
/usr/include
198
4825
badblocks.c
base_device.c
blkid.c
chattr.c
dumpe2fs.c
e2freefrag.c
e2freefrag.h
e2image.c
e2initrd_helper.c
e2label.c
e2undo.c
e4receive.c
e4send.c
filefrag.c
findsuper.c
fsck.c
fsck.h
ismounted.c
jfs_user.h
logsave.c
lsattr.c
mke2fs.c
mklost+found.c
nls-enable.h
partinfo.c
tune2fs.c
util.c
util.h
uuidd.c
uuidgen.c
../version.h
/usr/include/blkid/blkid.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/e2p/e2p.h
/usr/include/errno.h
/usr/include/et/com_err.h
/usr/include/ext2fs/ext2_fs.h
/usr/include/ext2fs/ext2_io.h
/usr/include/ext2fs/ext2_types.h
/usr/include/ext2fs/ext2fs.h
/usr/include/ext2fs/tdb.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/fd.h
/usr/include/linux/fiemap.h
/usr/include/linux/fs.h
/usr/include/linux/hdreg.h
/usr/include/linux/major.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/mntent.h
/usr/include/paths.h
/usr/include/pwd.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/sys/ioctl.h
/usr/include/sys/param.h
/usr/include/sys/signal.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/un.h
/usr/include/sys/utsname.h
/usr/include/sys/vfs.h
/usr/include/sys/wait.h
/usr/include/termio.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utime.h
/usr/include/uuid/uuid.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/locale.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/termios.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/blkid/blkid_types.h
/usr/include/com_err.h
/usr/include/endian.h
/usr/include/ext2fs/bitops.h
/usr/include/ext2fs/ext2_err.h
/usr/include/ext2fs/ext2_ext_attr.h
/usr/include/ext2fs/ext3_extents.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/types.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/statfs.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/param.h
/usr/include/asm/socket.h
/usr/include/asm/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/predefs.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/statfs.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/socket.h
/usr/include/asm-generic/types.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
/usr/include/asm/bitsperlong.h
/usr/include/sched.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/bits/sched.h
